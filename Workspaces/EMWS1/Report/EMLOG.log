*------------------------------------------------------------*
User:                bteric01
Date:                November 05, 2015
Time:                14:14:08
Site:                70080760
Platform:            X64_7PRO
Maintenance Release: 9.04.01M1P120413
EM Version:          13.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:12:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 05, 2015
Time:                14:12:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0DWTE1J
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMTRAIN.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0DWTE1J new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMLOG.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:12:50" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080760";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMTRAIN.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMSCORE.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMREPORT.log"
 encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMOUTPUT.out"
 encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:12:50" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMTRAIN.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMSCORE.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMREPORT.out"
 encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMRUNSTATUS.x
ml' encoding="UTF-8" NOBOM;
175350     proc freq data=EMWS1.Report_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Report_VariableSet noprint;
175351     table ROLE*LEVEL/out=WORK.ReportMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ReportMETA;
175352     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.REPORT_VARIABLESET.
NOTE: The data set WORK.REPORTMETA has 10 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
175353     proc print data=WORK.ReportMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ReportMETA label noobs;
175354     var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
175355     label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
175355   ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
175355   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
175356     title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
175357     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
175358     run;
 
NOTE: There were 10 observations read from the data set WORK.REPORTMETA.
NOTE: The PROCEDURE PRINT printed page 92.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
175359     title10;
MPRINT(EM_DIAGRAM):   title10;
175360     %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
175726     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
175727     * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
175728     * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE
or _ALL_;
175729     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
175730     %let EMEXCEPTIONSTRING=;
175731     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
175732     * TRAIN: Report;
MPRINT(EM_DIAGRAM):   * TRAIN: Report;
175733     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
175734     %let EM_ACTION = TRAIN;
175735     %let syscc = 0;
175736     %macro main;
175737
175738       filename temp catalog 'sashelp.emutil.reporter_macros.source';
175739       %include temp;
175740       filename temp;
175741
175742       %setProperties;
175743
175744       %if %upcase(&EM_ACTION) = CREATE %then %do;
175745         filename temp catalog 'sashelp.emutil.reporter_create.source';
175746         %include temp;
175747         filename temp;
175748
175749         %create;
175750       %end;
175751
175752        %else
175753        %if %upcase(&EM_ACTION) = TRAIN %then %do;
175754
175755            filename temp catalog 'sashelp.emutil.reporter_train.source';
175756            %include temp;
175757            filename temp;
175758            %train;
175759        %end;
175760
175761        %doendm:
175762     %mend main;
175763
175764     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
175767    +%macro SetProperties;
175769    +     /* reporting options */
175770    +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
175771    +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
175772    +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
175773    +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
175775    +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
175776    +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
175777    +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
175778    +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
175779    +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
175780    +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
175781    +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
175783    +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
175785    +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
175786    +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
175787    +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
175788    +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
175790    +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TRAIN.SOURCE.
175791    +
175792    +%macro train();
175793    +
175794    +    filename temp catalog 'sashelp.emutil.reporter_trainmacros.source'; %include
175794   !+temp; filename temp;
175795    +    filename temp catalog 'sashelp.emrpm.em_modelprops.source';         %include
175795   !+temp; filename temp;
175796    +
175797    +    /* Initialize property macro variables */
175798    +    %SetProperties;
175799    +
175800    +    /* if pdf or rtf files exist, delete these prior to recreating report */
175801    +    %EM_GETNAME(key=REPORT, type=FILE, extension=pdf);
175802    +    filename pdffile "&EM_USER_REPORT";
175803    +    %if %sysfunc(fexist(pdffile)) %then %do;
175804    +        %let rc = %sysfunc(fdelete(pdffile));
175805    +    %end;
175806    +    filename pdffile;
175807    +
175808    +    %EM_GETNAME(key=REPORT, type=FILE, extension=rtf);
175809    +    filename rtffile "&EM_USER_REPORT";
175810    +    %if %sysfunc(fexist(rtffile)) %then %do;
175811    +        %let rc = %sysfunc(fdelete(rtffile));
175812    +    %end;
175813    +    filename rtffile;
175814    +
175815    +    /* create report */
175816    +
175817    +    %EM_REPORT_CREATE(
175818    +        path        = &EM_NODEDIR,
175819    +        lib         = &EM_LIB,
175820    +        startnodeid = &EM_NODEID,
175821    +        showall     = &EM_PROPERTY_SHOWALL,
175822    +        nodes       = &EM_PROPERTY_NODES,
175823    +        format      = &EM_PROPERTY_FORMAT,
175824    +        style       = &EM_PROPERTY_STYLE
175825    +    );
175826    +
175827    +    %if &EMEXCEPTIONSTRING ne %then %do; %goto doendm; %end;
175828    +
175829    +    %EM_REPORT_RESULTS(
175830    +        path        = &EM_NODEDIR,
175831    +        lib         = &EM_LIB,
175832    +        startnodeid = &EM_NODEID,
175833    +        showall     = &EM_PROPERTY_SHOWALL,
175834    +        nodes       = &EM_PROPERTY_NODES,
175835    +        format      = &EM_PROPERTY_FORMAT,
175836    +        style       = &EM_PROPERTY_STYLE
175837    +    );
175838    +
175839    +    %doendm:
175840    +
175841    +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.reporter_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TRAINMACROS.SOURCE.
175842    +/*---------------------------------------------------------*/
175843    + *  EM_REPORT_CREATE;
MPRINT(TRAIN):   * EM_REPORT_CREATE;
175844    + *   all work needed to start the documents;
MPRINT(TRAIN):   * all work needed to start the documents;
175845    + *  - identify directory location;
MPRINT(TRAIN):   * - identify directory location;
175846    + *  - clear directory of em report files;
MPRINT(TRAIN):   * - clear directory of em report files;
175847    + *  - initialize document options;
MPRINT(TRAIN):   * - initialize document options;
175848    + *  - setup ODS system;
MPRINT(TRAIN):   * - setup ODS system;
175849    +/*---------------------------------------------------------*/
175850    +%macro EM_REPORT_CREATE(
175851    +    path=,             /*-- output location             ---*/
175852    +    lib=,              /*-- em workspace library        ---*/
175853    +    startnodeid=,      /*-- starting nodeid             ---*/
175854    +    showall=,          /*-- show all content Y or N     ---*/
175855    +    nodes=,            /*-- nodes to generate report on ---*/
175856    +    format=,           /*-- format for generated report ---*/
175857    +    style=             /*--- style for ODS statement    ---*/
175858    +) ;
175860    +    filename temp catalog 'sashelp.emutil.reporter_plotmacros.source';      %include
175860   !+ temp; filename temp;
175861    +    filename temp catalog 'sashelp.emutil.reporter_printmacros.source';     %include
175861   !+ temp; filename temp;
175862    +    filename temp catalog 'sashelp.emutil.reporter_rpmmacros.source';       %include
175862   !+ temp; filename temp;
175863    +    filename temp catalog 'sashelp.emutil.em_gettrainpath.source' ;         %include
175863   !+ temp; filename temp;
175864    +    filename temp catalog 'sashelp.emutil.reporter_tagset_template.source'; %include
175864   !+ temp; filename temp;
175866    +    /*--- 1. set global parameters ---*/
175868    +    %GLOBAL EM_REPORT_PATH    ; %let EM_REPORT_PATH    = &PATH ;
175869    +    %GLOBAL EM_REPORT_SHOWALL ; %let EM_REPORT_SHOWALL = %upcase(&showall) ;
175870    +    %GLOBAL EM_REPORT_LIB     ; %let EM_REPORT_LIB     = &lib;
175871    +    %GLOBAL EM_REPORT_NODES   ; %let EM_REPORT_NODES   = &nodes;
175872    +    %GLOBAL EM_REPORT_FORMAT  ; %let EM_REPORT_FORMAT  = &format;
175873    +    %GLOBAL EM_REPORT_SYTLE   ; %let EM_REPORT_STYLE   = &style;
175875    +    /*--- 2. set global constants ---*/
175877    +    %GLOBAL EM_REPORT_GDEVICE;
175878    +    %GLOBAL EM_REPORT_PRINT_MAXVARS;
175879    +    %GLOBAL EM_REPORT_TEXT_FONT;
175880    +    %GLOBAL EM_REPORT_TEXT_SIZE;
175881    +    %GLOBAL EM_REPORT_TITLE_SIZE;
175882    +    %GLOBAL EM_REPORT_HEADER_SIZE;
175883    +    %GLOBAL EM_REPORT_NODE_FONT;
175884    +    %GLOBAL EM_REPORT_TITLE;
175885    +    %GLOBAL EM_REPORT_FOOTNOTE1;
175886    +    %GLOBAL EM_REPORT_FOOTNOTE2;
175888    +    %global EM_REPORT_SUPPRESS_DATE; %let EM_REPORT_SUPPRESS_DATE =;
175890    +    %global RPM_REPORT_MODELNODE RPM_REPORT_SCORENODE RPM_REPORT_MDLCOMP
175890   !+RPM_REPORT_VALIDSUMMARY;
175892    +    %if "&EM_REPORT_GDEVICE"       eq ""  %then %let EM_REPORT_GDEVICE = GIF;
175893    +    %if "&EM_REPORT_PRINT_MAXVARS" eq ""  %then %let EM_REPORT_PRINT_MAXVARS= 40;
175894    +    %if "&EM_REPORT_TEXT_FONT"     eq ""  %then %do;
175895    +        %let EM_REPORT_TEXT_FONT= %sysfunc(getlocale(FTITLE, &EM_PROPERTY_TEXTFONT))
175895   !+;
175896    +        %let EM_REPORT_TEXT_FONT=
175896   !+%sysfunc(tranwrd(&EM_REPORT_TEXT_FONT,%str(<ttf>),%str()));
175897    +    %end;
175898    +    %if "&EM_REPORT_NODE_FONT"     eq ""  %then %do;
175899    +        %let EM_REPORT_NODE_FONT = %sysfunc(getlocale(FTITLE, SIMPLEX)) ;
175900    +        %let EM_REPORT_NODE_FONT =
175900   !+%sysfunc(tranwrd(&EM_REPORT_NODE_FONT,%str(<ttf>),%str()));
175901    +    %end;
175902    +    %if "&EM_REPORT_HEADER_SIZE"   eq ""  %then %let EM_REPORT_HEADER_SIZE =
175902   !+&EM_PROPERTY_HEADERSIZE;
175903    +    %if "&EM_REPORT_TEXT_SIZE"     eq ""  %then %let EM_REPORT_TEXT_SIZE   =
175903   !+&EM_PROPERTY_TEXTSIZE;
175904    +    %if "&EM_REPORT_TITLE_SIZE"    eq ""  %then %let EM_REPORT_TITLE_SIZE  =
175904   !+&EM_PROPERTY_TITLESIZE;
175906    +    /*--- 3. text for title statements ---*/
175908    +    %global EM_REPORT_PROJECT_TEXT ; %let EM_REPORT_PROJECT_TEXT=
175908   !+%superq(EM_PROJECTNAME);
175909    +    %global EM_REPORT_DIAGRAM_TEXT ; %let EM_REPORT_DIAGRAM_TEXT= %superq(EM_WSNAME)
175909   !+;
175911    +    %EM_REPORT_NODE_TEXT(&startnodeid) ;
175913    +    /*--- 4. create output filename ---*/
175915    +    %EM_REGISTER(key=REPORT, type=FILE, extension=&EM_REPORT_FORMAT);
175917    +    /*--- 5. Allways get the path for showing the score code --*/
175919    +    %let FLOW= ;            /*--- ignore for now ---*/
175920    +    %let PUBLISH=;          /*--- ignore for now ---*/
175921    +    %let EM_LIB=&lib ;      /*--- used by the macro */
175923    +    %if &EM_REPORT_NODES ne SUMMARY %then %do;
175924    +        %EM_PATH(nodeid=&startnodeid, outds=emreportpath, nodes=&EM_REPORT_NODES);
175925    +    %end;
175926    +    %else %do;
175927    +        %EM_PATH(nodeid=&startnodeid, outds=emreportpath, nodes=PATH);
175928    +    %end;
175930    +    data emreportpath;
175931    +        set emreportpath;
175932    +        rename nodelabel=nodeid;
175933    +        nodeIndex = _n_;
175934    +    run;
175936    +    /*--- 6. create new tagset templates needed for tree, icicle and pie charts */
175938    +    *** create new style template to address fonts in ods text;
175940    +    ods path(prepend) work.templat(update);
175941    +    proc template ;
175942    +        define style styles.em_style / store=work.templat;
175943    +        parent= styles.&EM_REPORT_STYLE;
175945    +            style usertext from usertext /
175946    +                foreground=black font_size=&EM_REPORT_TITLE_SIZE pt
175946   !+font_face="&EM_REPORT_TEXT_FONT" font_weight=bold
175947    +            ;
175948    +            style systemtitle from systemtitle /
175949    +              color=colors("systitlefg") backgroundcolor=colors("systitlebg")
175950    +              fontsize=&EM_REPORT_TITLE_SIZE pt font_face="&EM_REPORT_TEXT_FONT"
175950   !+font_weight=bold
175951    +            ;
175952    +            style systemfooter from systemfooter /
175953    +              color=colors("systitlefg") backgroundcolor=colors("systitlebg")
175954    +              font_face="&EM_REPORT_TEXT_FONT"
175955    +            ;
175956    +            style GraphFonts from GraphFonts /
175957    +                'GraphTitleFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE
175957   !+ pt)
175958    +                'GraphTitle1Font'   = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE
175958   !+ pt)
175959    +                'GraphLabelFont'    = ("&EM_REPORT_TEXT_FONT",
175959   !+&EM_REPORT_HEADER_SIZE pt)
175960    +                'GraphFootnoteFont' = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE
175960   !+pt)
175961    +                'GraphValueFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE
175961   !+pt)
175962    +                'GraphDataFont'     = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE
175962   !+pt)
175963    +            ;
175964    +            style Fonts from Fonts/
175965    +                'TitleFont'           = ("&EM_REPORT_TEXT_FONT",
175965   !+&EM_REPORT_TITLE_SIZE pt)
175966    +                'TitleFont2'          = ("&EM_REPORT_TEXT_FONT",
175966   !+&EM_REPORT_TITLE_SIZE pt)
175967    +                'StrongFont'          = ("&EM_REPORT_TEXT_FONT",
175967   !+&EM_REPORT_TEXT_SIZE pt)
175968    +                'EmphasisFont'        = ("&EM_REPORT_TEXT_FONT",
175968   !+&EM_REPORT_TEXT_SIZE pt)
175969    +                'headingFont'         = ("&EM_REPORT_TEXT_FONT",
175969   !+&EM_REPORT_TEXT_SIZE pt)
175970    +                'headingEmphasisFont' = ("&EM_REPORT_TEXT_FONT",
175970   !+&EM_REPORT_TEXT_SIZE pt)
175971    +                'FixedEmphasisFont'   = ("&EM_REPORT_TEXT_FONT",
175971   !+&EM_REPORT_TEXT_SIZE pt)
175972    +                'FixedStrongFont'     = ("&EM_REPORT_TEXT_FONT",
175972   !+&EM_REPORT_TEXT_SIZE pt)
175973    +                'FixedHeadingFont'    = ("&EM_REPORT_TEXT_FONT",
175973   !+&EM_REPORT_TEXT_SIZE pt)
175974    +                'FixedFont'           = ("&EM_REPORT_TEXT_FONT",
175974   !+&EM_REPORT_TEXT_SIZE pt)
175975    +                'BatchFixedFont'      = ("&EM_REPORT_TEXT_FONT",
175975   !+&EM_REPORT_TEXT_SIZE pt)
175976    +                'docFont'             = ("&EM_REPORT_TEXT_FONT",
175976   !+&EM_REPORT_TEXT_SIZE pt)
175977    +            ;
175978    +            style GraphTitleText from GraphTitleText /
175978   !+font_face="&EM_REPORT_TEXT_FONT";
175979    +            style data           from data           /
175979   !+font_size=&EM_REPORT_TEXT_SIZE pt;
175980    +            style header         from header         /
175980   !+font_size=&EM_REPORT_HEADER_SIZE pt;
175981    +            style rowheader      from header;
175982    +        end;
175983    +    run; quit;
175985    +    /*--- 7. start report / destination configurations ---*/
175987    +    *** options for page layout;
175988    +    options nodate nocenter number ls=97 ;
175990    +    *** get file name;
175991    +    %EM_GETNAME(key=REPORT, type=FILE, extension=&EM_REPORT_FORMAT);
175992    +    %let file = &EM_USER_REPORT;
175994    +    *** turn off LISTING and turn on the specified destination;
175995    +    ods listing close;
175996    +    ods graphics / height=4.5in;
175997    +    ods &EM_REPORT_FORMAT file="&file" style=styles.em_style
175998    +        %if &EM_REPORT_FORMAT eq PDF %then %do; startpage=NO uniform NOTOC %end;
175999    +        %if &EM_REPORT_FORMAT eq RTF %then %do; startpage=NEVER BODYTITLE  %end;
176000    +    ;
176002    +    *** titles and footnotes;
176003    +    ods &EM_REPORT_FORMAT text=" ";
176004    +    %if "&EM_REPORT_TITLE" ne "" %then %do;
176005    +        ods &EM_REPORT_FORMAT text="&EM_REPORT_TITLE";
176006    +    %end;
176007    +    %else %do;
176008    +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
176008   !+rpt_reporttitleone_title, NOQUOTE))";
176009    +    %end;
176011    +    %if "&EM_REPORT_FOOTNOTE1" ne "" %then %do; footnote1 "&EM_REPORT_FOOTNOTE1";
176011   !+%end;
176012    +    %if "&EM_REPORT_FOOTNOTE2" ne "" %then %do; footnote2 "&EM_REPORT_FOOTNOTE2";
176012   !+%end;
176014    +    /*--- 8. verify that valid flow exists for SUMMARY (RPM) report ---*/
176015    +    /*--- if not, SUMMARY style report can not be generated and PATH report will be
176015   !+done instead ---*/
176017    +    %EM_REPORT_validSummaryPath(startNodeID = &startNodeID);
176019    +    %if ((&EM_REPORT_NODES eq SUMMARY ) AND(&RPM_REPORT_VALIDSUMMARY eq 1))%then %do
176019   !+;
176020    +        %local hprpm_hpassess;
176021    +        %let   hprpm_hpassess = &em_lib..&RPM_REPORT_MODELNODE._hpassess;
176022    +        %if %sysfunc(exist(&hprpm_hpassess)) %then %do;
176023    +            filename temp catalog 'sashelp.hpdm.hpdm_scorecard.source'; %include
176023   !+temp; filename temp;
176024    +            %EM_REPORT_SUMMARY(runHP=1);
176025    +        %end;
176026    +        %else %do;
176027    +            %EM_REPORT_SUMMARY(runHP=0);
176028    +        %end;
176029    +        %goto create_endline;
176030    +    %end;
176031    +    %else %do;
176032    +        %if &EM_REPORT_NODES eq SUMMARY %then %let EM_REPORT_NODES= PATH;
176033    +    %end;
176035    +    /*--- 9. output report information (header of the report)---*/
176037    +    ods proclabel "%sysfunc(sasmsg(sashelp.dmine, rpt_reportinfo_title, NOQUOTE))";
176038    +    data _null_;
176039    +        call symput('report_date', %nrbquote(strip(put(date(),     NLDATE.))));
176040    +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
176041    +    run;
176043    +    data _null_;
176044    +        file print ;
176045    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
176046    +        %if ((&EM_REPORT_SUPPRESS_DATE eq ) OR (%index(&EM_REPORT_SUPPRESS_DATE, Y)
176046   !+< 1)) %then %do;
176047    +            put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE,
176047   !+%nrbquote(&report_time), &report_date))" ;
176048    +        %end;
176049    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE,
176049   !+&EM_REPORT_PROJECT_TEXT)) " ;
176050    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE,
176050   !+%nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
176051    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE,
176051   !+&startnodeid))";
176052    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE,
176052   !+%nrbquote(&em_report_node_text)))" ;
176053    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE,
176053   !+&EM_REPORT_NODES))" ;
176054    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE,
176054   !+&EM_REPORT_showall))" /;
176055    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE,
176055   !+&EM_REPORT_FORMAT))" ;
176056    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE,
176056   !+&EM_REPORT_STYLE))" /;
176057    +    run ;
176059    +    /*--- 10. generate the workspace plot ---*/
176061    +    %em_report_workspace_xml;
176062    +    %em_getname(key=PFD, type=FILE, extension=XML);
176063    +    %em_report_makeds(&EM_USER_PFD, xmldata);
176064    +    %em_report_workspace_render;
176066    +    /*--- 11. identify the nodes to report                                  ---*/
176067    +    /*--- merged and modified from three previous macros:                   ---*/
176068    +    /*--- EM_REPORT_PATH, EM_REPORT_PREDECESORS EM_REPORT_PREDECESORS_COUNT ---*/
176070    +    %global EM_REPORT_NODENUM EM_REPORT_NODELIST;
176071    +    %let EM_REPORT_NODENUM = 0;
176073    +    %if &EM_REPORT_NODES eq PATH or &EM_REPORT_NODES eq ALL
176074    +    %then %do;
176075    +        %if %sysfunc(exist(emreportpath)) %then %do;
176076    +            proc sql noprint;
176077    +                select count(*) into :EM_REPORT_NODENUM
176078    +                    from emreportpath where nodeID ne " ";
176079    +                %if &EM_REPORT_NODENUM gt 0 %then %do;
176080    +                    select strip(nodeID) into :EM_REPORT_NODELIST separated by ' '
176081    +                        from emreportpath where nodeID ne " " order by nodeIndex;
176082    +                %end;
176083    +            quit;
176084    +        %end;
176085    +    %end;
176086    +    %else %if &EM_REPORT_NODES eq PREDECESSOR
176087    +    %then %do ;
176088    +        proc sql noprint;
176089    +            select count(*) into :EM_REPORT_NODENUM
176090    +                from &EM_REPORT_LIB..em_dgraph where upcase(strip(to)) eq
176090   !+upcase(strip("&startnodeid"));
176091    +            %if &EM_REPORT_NODENUM gt 0 %then %do;
176092    +                select strip(from) into :EM_REPORT_NODELIST separated by ' '
176093    +                    from &EM_REPORT_LIB..em_dgraph where upcase(strip(to)) eq
176093   !+upcase(strip("&startnodeid"));
176094    +            %end;
176095    +        quit;
176096    +    %end;
176097    +    %else %if &EM_REPORT_NODES eq 0 %then %do;
176098    +        %let EM_REPORT_NODENUM = 1;
176099    +        %let EM_REPORT_NODELIST = &startnodeid;
176100    +    %end;
176102    +    %if &EM_REPORT_NODENUM gt 0 %then %do;
176103    +        %do n = 1 %to &EM_REPORT_NODENUM;
176104    +            %EM_REPORT_NODE(nodeid=%scan(&EM_REPORT_NODELIST,&n,' '));
176105    +        %end;
176106    +    %end;
176108    +    /*--- 12. close report and ODS destinations---*/
176110    +    %create_endline:;
176112    +    data _NULL_ ;
176113    +        file print;
176114    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_endreport_note, NOQUOTE))" ;
176115    +    run;
176117    +    title1; title2; title3 ;
176118    +    %if "&EM_REPORT_FOOTNOTE1" ne "" %then %do; footnote1; %end;
176119    +    %if "&EM_REPORT_FOOTNOTE2" ne "" %then %do; footnote2; %end;
176120    +    ods graphics / reset=height;
176121    +    ods listing;
176122    +    ods &EM_REPORT_FORMAT close;
176124    +%mend EM_REPORT_CREATE ;
176126    +/*---------------------------------------------------------*/
176127    + * EM_REPORT_NODE ;
MPRINT(TRAIN):   * EM_REPORT_NODE ;
176128    + *     create a report for a node on an EM diagram ;
MPRINT(TRAIN):   * create a report for a node on an EM diagram ;
176129    +/*---------------------------------------------------------*/
176130    +%macro EM_REPORT_NODE(nodeid=) ;
176132    +    %if not %sysfunc(exist(&em_report_lib..&nodeid._emreport))
176133    +    %then %do ;
176134    +        %put NOTE: Node report data set (&em_report_lib..&nodeid._emreport) is not
176134   !+defined.;
176135    +        %goto node_skip;
176136    +    %end ;
176138    +    /*--- 1. set global parameters ---*/
176140    +    %global EM_REPORT_NODEID EM_REPORT_KEY_WHERECLAUSE
176141    +            EM_REPORT_TTL1 EM_REPORT_TTL2 EM_REPORT_TTL3
176142    +    ;
176143    +    %let EM_REPORT_NODEID= &nodeid ;
176145    +    /*--- 2. preparations: Node Text; Path; Notes; Num of Prev. Nodes ---*/
176147    +    /* 2.1 get node text;*/
176148    +    %EM_REPORT_NODE_TEXT(&nodeid) ;
176150    +    /* 2.2 get the em path to this node;*/
176151    +    %EM_gettrainpath(nodeid=&nodeid,outpath=_tmp_emrnp);
176153    +    %if %sysfunc(exist(_tmp_emrnp))
176154    +    %then %do;
176155    +        data _null_;
176156    +            set _tmp_emrnp end=eof ;
176157    +            length path $1000 ;
176158    +            retain path ' ';
176159    +            if _n_ eq 1
176160    +                then path = strip(nodelabel) ;
176161    +                else path = strip(path) !! " => " !! strip(nodelabel);
176162    +            if eof then call symput('print_path', strip(path));
176163    +        run;
176164    +    %end ;
176165    +    %else %do;
176166    +        %let print_path= Unknown;
176167    +    %end ;
176169    +    /* 2.3 retrieve location of notes file;*/
176170    +    %let temp = %nrbquote(%sysfunc(pathname(&EM_REPORT_LIB)));
176171    +    %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
176172    +    %let file = EMNOTES.txt;
176173    +    %let notesfile = %nrbquote(&path&em_dsep&nodeid&em_dsep&file);
176175    +    /* 2.4 predecessor node counts */
176176    +    proc sql noprint;
176177    +        select count(*) into :EM_REPORT_PREDECESSORS_COUNT
176178    +            from &EM_REPORT_LIB..EM_DGRAPH where upcase(strip(to)) eq
176178   !+upcase(strip("&nodeid"));
176179    +    quit;
176181    +    %if ((&EM_REPORT_PREDECESSORS_COUNT eq 0) or (&EM_REPORT_NODES eq 0) or
176181   !+(&EM_REPORT_NODES eq PREDECESSOR))
176182    +        %then %let varlist=1;
176183    +        %else %let varlist=0;
176185    +    %if %substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq MDLCOMP
176186    +        %then %let varlist = 0;
176188    +    /*--- 3. beginning section of a node report ---*/
176190    +    /* 3.1 force page break at the beginning of each node */
176192    +    /* sample output of a beginning section
176193    +        -----------------------------------
176194    +        -  SAS Enterprise Miner Report    -
176195    +        -                                 -
176196    +        -  Node=Regression                -
176197    +        -  Summary                        -
176198    +        -                                 -
176199    +        -  Node id = Reg                  -
176200    +        -  Node label = Regression        -
176201    +        -  Meta Path = Ids => Part => Reg -
176202    +        -  Notes =                        -
176203    +        -----------------------------------*/
176205    +    ods &EM_REPORT_FORMAT startpage=now;
176207    +    ods &EM_REPORT_FORMAT text=" ";
176208    +    %if "&EM_REPORT_TITLE" ne ""
176209    +        %then %do; ods &EM_REPORT_FORMAT text= "&EM_REPORT_TITLE"; %end;
176210    +        %else %do; ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
176210   !+rpt_reporttitleone_title, NOQUOTE))"; %end;
176212    +    ods &EM_REPORT_FORMAT text=" ";
176213    +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
176213   !+rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
176214    +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_summary_title,
176214   !+NOQUOTE))";
176216    +    data _null_ ;
176217    +        file print;
176218    +        put " ";
176219    +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnodeid_vlabel,   NOQUOTE,
176219   !+&nodeid));                         put "&note";
176220    +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnodelbl_vlabel,  NOQUOTE,
176220   !+%nrbquote(&em_report_node_text))); put "&note";
176221    +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptmetapath_vlabel, NOQUOTE,
176221   !+&print_path));                     put "&note";
176222    +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnotes_vlabel,    NOQUOTE))
176222   !+;                                  put "&note";
176223    +        put " ";
176224    +    run;
176226    +    %if "&notesfile" ne "" %then %do;
176227    +        filename x "&notesfile" encoding='utf-8' NOBOM;
176228    +        data _null_;
176229    +            length string $1000;
176230    +            file PRINT;
176231    +            fid = fopen('x');
176232    +            do while (^fread(fid));
176233    +                rc= fget(fid, string, frlen(fid));
176234    +                string = tranwrd(string, "'", "''");
176235    +                if string eq '' then string = ' ';
176236    +                put string;
176237    +            end;
176238    +            fid = fclose(fid);
176239    +            put " ";
176240    +        run;
176241    +        filename x;
176242    +    %end;
176244    +    /*--- 4. property table of a node report ---*/
176245    +    %EM_REPORT_PROPERTIES(catalog=&em_report_lib..&nodeid, dsname=properties);
176247    +    /*--- 5. datasource table of a node report ---*/
176248    +    %if &varlist eq 1 and
176248   !+%sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTMETADEFAULT)) %then %do;
176249    +        %EM_REPORT_DATASOURCE;
176250    +    %end;
176252    +    /*--- 6. varlist table of a node report ---*/
176253    +    %EM_REPORT_VARS(varlist=&varlist) ;
176255    +    /* --- 7. the itemized output of EMREPORT TLFs ---*/
176257    +    /* 7.1 get number of items */
176258    +    proc sql noprint;
176259    +        select max(ID) into: numitems from &em_report_lib..&nodeid._emreport;
176260    +    quit;
176262    +    /* 7.2 define and initialize global KEYs */
176263    +    proc sql noprint;
176264    +        select count(distinct key) into :allnumkeys
176265    +            from &em_report_lib..&nodeid._emreport;
176266    +        select distinct key into :allnamekey1-:allnamekey%left(&allnumkeys)
176267    +            from &em_report_lib..&nodeid._emreport;
176268    +    quit;
176270    +    %do i = 1 %to &allnumkeys;
176271    +        %global EM_REPORT_KEY_&&&allnamekey&i;
176272    +        %let EM_REPORT_KEY_&&&allnamekey&i = ;
176273    +    %end;
176274    +    %global EM_REPORT_KEY_YREF EM_REPORT_KEY_XREF EM_REPORT_KEY_Y EM_REPORT_KEY_Y2
176274   !+EM_REPORT_KEY_X
176275    +            EM_REPORT_KEY_LATTICEY EM_REPORT_KEY_LATTICEX EM_REPORT_KEY_WHERE
176275   !+EM_REPORT_KEY_SUBGROUP
176276    +            EM_REPORT_KEY_FREQUENCY EM_REPORT_KEY_GROUP EM_REPORT_KEY_Y2REF
176276   !+EM_REPORT_KEY_LATTICETYPE
176277    +            EM_REPORT_KEY_ORIENTATION
176278    +    ;
176279    +    %let EM_REPORT_KEY_AUTODISPLAY = N;
176280    +    %let EM_REPORT_KEY_XREF        = ;
176281    +    %let EM_REPORT_KEY_YREF        = ;
176282    +    %let EM_REPORT_KEY_Y2REF       = ;
176283    +    %let EM_REPORT_KEY_X           = ;
176284    +    %let EM_REPORT_KEY_Y           = ;
176285    +    %let EM_REPORT_KEY_Y2          = ;
176286    +    %let EM_REPORT_KEY_LATTICEX    = ;
176287    +    %let EM_REPORT_KEY_LATTICEY    = ;
176288    +    %let EM_REPORT_KEY_WHERE       = ;
176289    +    %let EM_REPORT_KEY_SUBGROUP    = ;
176290    +    %let EM_REPORT_KEY_FREQUENCY   = ;
176291    +    %let EM_REPORT_KEY_GROUP       = ;
176292    +    %let EM_REPORT_KEY_LATTICETYPE = ;
176293    +    %let EM_REPORT_KEY_ORIENTATION = ;
176295    +    /* 7.3 loop over items in the EM_REPORT dataset */
176297    +    %do index = 1 %to &numitems ;
176299    +        /* 7.3.1 initialize all key macro variables for each item */
176301    +        %do i = 1 %to &allnumkeys;
176302    +            %let EM_REPORT_KEY_&&&allnamekey&i = ;
176303    +        %end;
176304    +        %let EM_REPORT_KEY_AUTODISPLAY = N;
176305    +        %let EM_REPORT_KEY_WHERE       = ;
176306    +        %let EM_REPORT_KEY_WHERECLAUSE = ;
176307    +        %let EM_REPORT_TTL1            = ;
176308    +        %let EM_REPORT_TTL2            = ;
176309    +        %let EM_REPORT_TTL3            = ;
176310    +        %let EM_REPORT_KEY_XREF        = ;
176311    +        %let EM_REPORT_KEY_YREF        = ;
176312    +        %let EM_REPORT_KEY_Y2REF       = ;
176313    +        %let EM_REPORT_KEY_X           = ;
176314    +        %let EM_REPORT_KEY_Y           = ;
176315    +        %let EM_REPORT_KEY_Y2          = ;
176316    +        %let EM_REPORT_KEY_LATTICEX    = ;
176317    +        %let EM_REPORT_KEY_LATTICEY    = ;
176318    +        %let EM_REPORT_KEY_SUBGROUP    = ;
176319    +        %let EM_REPORT_KEY_FREQUENCY   = ;
176320    +        %let EM_REPORT_KEY_GROUP       = ;
176321    +        %let EM_REPORT_KEY_LATTICETYPE = ;
176322    +        %let EM_REPORT_KEY_ORIENTATION = ;
176324    +        %let item_skip_code = 1;
176326    +        data _null_;
176327    +            set &em_report_lib..&nodeid._emreport(where=(id eq &index));
176328    +            call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
176329    +        run;
176331    +        %if "&EM_REPORT_KEY_VIEWTYPE" eq "MULTIPLESCATTER"
176332    +            %then %let EM_REPORT_KEY_VIEWTYPE = SCATTER;
176334    +        /* special treatment for EM_REPORT_KEY_Y in overlaid line plot */
176335    +        %if "&EM_REPORT_KEY_VIEWTYPE" eq "PLOT" or "&EM_REPORT_KEY_VIEWTYPE" eq
176335   !+"SCATTER"
176336    +            or "&EM_REPORT_KEY_VIEWTYPE" eq "LINEPLOT"
176337    +            or "&EM_REPORT_KEY_LATTICETYPE" eq "LINEPLOT" or
176337   !+"&EM_REPORT_KEY_LATTICETYPE" eq "PLOT"
176338    +        %then %do;
176339    +            proc sql noprint;
176340    +                select distinct value into :EM_REPORT_KEY_Y separated by ' '
176341    +                    from &em_report_lib..&nodeid._emreport(where=(id eq &index))
176342    +                    where upcase(key) eq "Y";
176343    +            quit;
176344    +        %end;
176346    +        %put ==&INDEX : Viewtype = &EM_REPORT_KEY_VIEWTYPE
176346   !+&EM_REPORT_KEY_DESCRIPTION ;
176348    +        /* 7.3.2 set EM_REPORT_KEY_WHERE as EM_REPORT_KEY_WHERECLAUSE */
176350    +        %if "&EM_REPORT_KEY_WHERECLAUSE" ne "" and "&EM_REPORT_KEY_WHERE" eq ""
176351    +        %then %do;
176352    +            %let EM_REPORT_KEY_WHERE = %str(&EM_REPORT_KEY_WHERECLAUSE);
176353    +        %end;
176354    +        %else %if "&EM_REPORT_KEY_WHERECLAUSE" eq "" and "&EM_REPORT_KEY_WHERE" ne
176354   !+""
176355    +        %then %do;
176356    +            %let EM_REPORT_KEY_WHERE = %str(&EM_REPORT_KEY_WHERE);
176357    +        %end;
176358    +        %else %do;
176359    +            %let EM_REPORT_KEY_WHERE = ;
176360    +        %end;
176362    +        %if "&EM_REPORT_KEY_WHERE" ne "" %then %do;
176363    +            %let EM_REPORT_KEY_WHERECLAUSE = %str((where=(&EM_REPORT_KEY_WHERE)));
176364    +        %end;
176366    +        /* 7.3.3 skip this TLF item if the source data set does not exist */
176367    +        %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_KEY_FILE)) %then %do;
176368    +            %let item_skip_code = 0;
176369    +        %end;
176371    +        /* 7.3.4 skip the TLF item as documented in the previous version of the
176371   !+macro */
176372    +        /*       or just print the TLF item as documented, or use special macros
176372   !+  */
176374    +        data _null_;
176375    +            format type $100. desc $200.;
176376    +            type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
176377    +            desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
176379    +            if  (type in ('SCATTER')   and desc in ('STATPLOT' 'RULEPATHITEM'
176379   !+'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN'))
176380    +             or (type in ('PLOT')      and desc in ('SEASON' 'TREND' 'CORRSTAT'
176380   !+'DECOMP'))
176381    +             or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
176381   !+'CROSSCCFMAP' 'CROSSCCFNORMMAP'))
176382    +             or (type in ('BAR')       and desc in ('VIP' 'ABSESTIMATE'
176382   !+'ABSSTDESTIMATE' 'PRINCOEFFPLOT'))
176383    +             or (type in ('LATTICE')   and desc in ('ESTIMATEGRID' 'ASSESSRANKGRID'
176383   !+'CORRPLOT'))
176384    +                then call symput('item_skip_code','2');
176386    +            /* ASSESSRANKGRID : content handled in %EM_REPORT_PLOT - from old macro
176386   !+comments*/
176387    +            /* CORRPLOT: empty macro report_corrplot in old macro */
176389    +            if  (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR'))
176390    +             or (type in ('BAR')       and desc in ('ESTIMATE' 'CORRSTRUCT'
176390   !+'FITSTATPLOT'))
176391    +             or (type in ('LATTICE')   and desc in ('CHIPLOT' 'WORTH'))
176392    +                then call symput('item_skip_code','3');
176394    +            if (type in ('PLOT')    and desc in ('ASSESSRANKOVERLAY'))
176395    +                then call symput('item_skip_code','4');
176396    +            if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY'))
176397    +                then call symput('item_skip_code','5');
176399    +            if (type in ('PLOT') and desc in ('EVENTPLOT'))
176400    +                then call symput('item_skip_code','6');
176402    +            if (type in ('LATTICE') and desc in ('CLASSSTAT'))
176403    +                then call symput('EM_REPORT_KEY_VIEWTYPE','DATA');
176405    +            if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST'))
176406    +                then call symput('item_skip_code','7');
176407    +            if (type in ('LATTICE') and desc in ('SCOREDIST'))
176408    +                then call symput('item_skip_code','8');
176409    +            if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY'))
176410    +                then call symput('item_skip_code','9');
176412    +            if (type in ('PLOT') and desc in ('HPDMASSESS'))
176413    +                then call symput('item_skip_code','10');
176415    +            if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
176415   !+'TSDISTANCEMAP'))
176416    +                then call symput('item_skip_code','11');
176418    +        run;
176420    +        /* 7.3.5 */
176422    +        %EM_REPORT_GTT;
176424    +        /********** actions by item_skip_code ***********************************/
176426    +        %if &item_skip_code eq 2 %then %do;
176427    +            /* TLF is skipped for these types of reports */
176428    +        %end;
176429    +        %else
176430    +        %if &item_skip_code eq 3 %then %do;
176431    +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq
176431   !+"Y")) %then %do;
176432    +                /* just a print */
176433    +                title1 "&EM_REPORT_TTL1";
176434    +                title2 "&EM_REPORT_TTL2";
176435    +                title3 "&EM_REPORT_TTL3";
176436    +                ods proclabel = "%sysfunc(sasmsg(sashelp.dmine,
176436   !+rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))
176436   !+%sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description,
176436   !+NOQUOTE))";
176437    +                proc print data=&EM_REPORT_LIB..&EM_REPORT_KEY_FILE noobs label
176437   !+contents='';
176438    +                run;
176439    +            %end;
176440    +        %end;
176441    +        %else
176442    +        %if &item_skip_code eq 4 %then %do;
176443    +            %EM_REPORT_EMRANK(pdat=&em_report_lib..&EM_REPORT_KEY_FILE,lattice=no);
176444    +        %end;
176445    +        %else
176446    +        %if &item_skip_code eq 5 %then %do;
176447    +            %EM_REPORT_EMRANK(pdat=&em_report_lib..&EM_REPORT_KEY_FILE,lattice=yes);
176448    +        %end;
176449    +        %else
176450    +        %if &item_skip_code eq 6 %then %do;
176451    +            %EM_REPORT_EVENTPLOT;
176452    +        %end;
176453    +        %else
176454    +        %if &item_skip_code eq 7 %then %do;
176455    +            %if %substr(%upcase(%sysfunc(strip(&nodeid))),1,7) ne MDLCOMP or
176455   !+&EM_REPORT_NODES eq PREDECESSOR %then %do;
176456    +                %EM_REPORT_SCOREDIST;
176457    +            %end;
176458    +        %end;
176459    +        %else
176460    +        %if &item_skip_code eq 8 %then %do;
176461    +            %EM_REPORT_SCOREDIST2;
176462    +        %end;
176463    +        %else
176464    +        %if &item_skip_code eq 9 %then %do;
176465    +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq
176465   !+"Y")) %then %do;
176466    +                %EM_REPORT_CLASSIFYTAB;
176467    +            %end;
176468    +        %end;
176469    +        %else
176470    +        %if &item_skip_code eq 10 %then %do;
176471    +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq
176471   !+"Y")) %then %do;
176472    +                %EM_REPORT_HPDMASSESS;
176473    +            %end;
176474    +        %end;
176475    +        %else
176476    +        %if &item_skip_code eq 11 %then %do;
176477    +                %EM_REPORT_HEATMAPTEMPLATE;
176478    +        %end;
176481    +        %else
176483    +        %if &item_skip_code eq 1 %then %do;
176485    +            /*--- process the viewtypes ---*/
176486    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "PLOT"           %then %do;
176486   !+%EM_REPORT_SGPLOT(type=PLOT);     %end;
176487    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "LINEPLOT"       %then %do;
176487   !+%EM_REPORT_SGPLOT(type=LINEPLOT); %end;
176488    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "SCATTER"        %then %do;
176488   !+%EM_REPORT_SGPLOT(type=SCATTER);  %end;
176489    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "BAR"            %then %do;
176489   !+%EM_REPORT_SGPLOT(type=BARPLOT);  %end;
176490    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "HISTOGRAM"      %then %do;
176490   !+%EM_REPORT_SGPLOT(type=HISTOGRAM);%end;
176491    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "PIE"            %then %do;
176491   !+%EM_REPORT_SGSILK(type=PIE);      %end;
176492    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DTREE"          %then %do;
176492   !+%EM_REPORT_SGSILK(type=DTREE);    %end;
176493    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "ICICLE"         %then %do;
176493   !+%EM_REPORT_SGSILK(type=ICICLE);   %end;
176494    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DENDROGRAM"     %then %do;
176494   !+%EM_REPORT_DENDROGRAM;            %end;
176495    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "ITERATIONPLOT"  %then %do;
176495   !+%EM_REPORT_ITERATIONPLOT;         %end;
176496    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DATA"           %then %do;
176496   !+%EM_REPORT_DATA(maxobs=100);      %end;
176497    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "MULTIPLEY2PLOT" %then %do;
176497   !+%EM_REPORT_MULTIPLY2PLOT;         %end;
176499    +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "LATTICE" %then %do;
176500    +                ods graphics / height=9in;
176501    +                %EM_REPORT_LATTICE;
176502    +                ods graphics / height=4.5in;
176503    +            %end;
176504    +        %end;
176506    +        title1; title2; title3; title4; title5;
176507    +    %end;
176509    +%node_skip:
176511    +%mend EM_REPORT_NODE;
176513    +/*---------------------------------------------------------*/
176514    +/*---- create xml file containing pfd information      ----*/
176515    +/*---------------------------------------------------------*/
176516    +%macro em_report_workspace_xml();
176518    +    %global EM_REPORT_LIB;
176520    +    %EM_REGISTER(key=PFD, type=FILE, extension=XML);
176521    +    %EM_GETNAME(key=PFD,  type=FILE, extension=XML);
176523    +    filename x "&EM_USER_PFD" encoding="utf-8" NOBOM;
176525    +    /* Node information */
176526    +    data _null_;
176527    +        file x;
176528    +        set &EM_REPORT_LIB..EM_NODEID;
176529    +        length string $400;
176531    +        /* check for invalid characters in the node label */
176532    +        label = tranwrd(label, %nrstr("&"), %nrstr("&amp;"));
176533    +        label = tranwrd(label, %nrstr("<"), %nrstr("&lt;"));
176534    +        label = tranwrd(label, %nrstr(">"), %nrstr("&gt;"));
176535    +        label = tranwrd(label, %nrstr("'"), %nrstr("&#39;"));
176536    +        label = tranwrd(label, %nrstr('"'), %nrstr('&quot;'));
176538    +        string = cats('<PFDNode x="',X,'" y="',Y,'" id="',NODEID,'"
176538   !+title="',LABEL,'"></PFDNode>');
176539    +        put string;
176540    +    run;
176542    +    /* Link information */
176543    +    data _null_;
176544    +        file x mod;
176545    +        set &EM_REPORT_LIB..EM_DGRAPH(where=(TO ne ""));
176546    +        length string $400;
176548    +        string = cats("<PFDLink id='",_N_,"' fromId='",FROM,"'
176548   !+toId='",TO,"'></PFDLink>");
176549    +        put string;
176550    +    run;
176552    +    filename x;
176554    +%mend em_report_workspace_xml;
176556    +/*---------------------------------------------------------*/
176557    +/* "chop" xml definitions, wrapping if over 256 bytes      */
176558    +/*---------------------------------------------------------*/
176559    +%macro em_report_makeds(XMLfile,outds);
176561    +    %local rc fileref fid max reclen;
176562    +    %let fileref=xmlref;
176563    +    %if %sysfunc(fexist(xmlref)) %then %put ERROR: Fileref XMLREF in use.;
176564    +    %else %do;
176565    +      %let rc=%sysfunc(filename(fileref,&XMLfile,,encoding='utf-8')));
176566    +      %if %sysfunc(fileref(xmlref)) ne 0 %then %put %sysfunc(sysmsg());
176567    +      %else %do;
176568    +        %let fid=%sysfunc(fopen(xmlref,i,5000,v));
176569    +        %let max=0;
176570    +         %if %sysfunc(fread(&fid)) = 0 %then %do;
176571    +            %let reclen=%sysfunc(frlen(&fid));
176572    +            %let max=&reclen;
176573    +            %do %while(%sysfunc(fread(&fid)) = 0);
176574    +               %let reclen=%sysfunc(frlen(&fid));
176575    +               %if &reclen > &max %then %let max=&reclen;
176576    +            %end;
176577    +        %end;
176578    +        %let rc=%sysfunc(fclose(&fid));
176580    +        data &outds(keep=PFDItemList);
176581    +          infile xmlref recfm=v  lrecl=&max  length=len;
176582    +          length PFDItemList $256;
176583    +          input record $varying5000. len;
176584    +          recordNum+1;
176585    +          do start=1 to len by 256 ;
176586    +             end=start+256;
176587    +             *put recordNum= start= end=;
176588    +             PFDItemList=substr(record,start,end);
176589    +             output;
176590    +          end;
176591    +        run;
176592    +        %let rc=%sysfunc(filename(fileref));
176593    +      %end;
176594    +    %end;
176595    +%mend em_report_makeds;
176597    +/*---------------------------------------------------------*/
176598    +/* render a workspace plot in the ODS destination          */
176599    +/*---------------------------------------------------------*/
176600    +%macro em_report_workspace_render;
176602    +     /*--- determine if flow was run in batch (ie all x/y coordinates are -1) ---*/
176603    +     %let runBatch = 0;
176604    +     data temp;
176605    +        set &EM_REPORT_LIB..EM_NODEID;
176606    +        if X = -1 AND Y= - 1 then delete;
176607    +     run;
176608    +     %let dsid = %sysfunc(open(work.temp));
176609    +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
176610    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
176612    +     %if &nobs le 1 %then %let runBatch = 1;
176614    +      title1; title2; title3;
176616    +      %let temp = %nrbquote(%sysfunc(PATHNAME(&em_report_lib)));
176617    +      %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
176618    +      %let view = view.xml;
176619    +      %let viewfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&view);
176620    +      %let datax = data.xml;
176621    +      %let dataxfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&datax);
176623    +      /* make sgDataModel*/
176624    +      ods &EM_REPORT_FORMAT exclude SGRENDER; /* disable sgrender output to PDF */
176625    +      ods tagsets.gtl file="&viewfile" data="&dataxfile" encoding="utf-8"
176625   !+style=styles.em_style;
176626    +      proc sgrender data=work.xmldata template=dataonly;
176627    +          dynamic var1="PFDItemList";
176628    +      run;
176630    +      /* pfd event code */
176631    +      %if "&EM_REPORT_TITLE" ne "" %then %do;
176632    +          ods tagsets.gtl event=LayoutRegion(start)
176633    +              options(title ="&EM_REPORT_TITLE"
176634    +                      title2="%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title,
176634   !+NOQUOTE))");
176635    +      %end;
176636    +      %else %do;
176637    +          ods tagsets.gtl event=LayoutRegion(start)
176638    +              options(title ="%sysfunc(sasmsg(sashelp.dmine,
176638   !+rpt_reporttitleone_title, NOQUOTE))"
176639    +                      title2="%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title,
176639   !+NOQUOTE))");
176640    +      %end;
176642    +      %if &runBatch ne 1 %then %do;
176643    +          ods tagsets.gtl event=PFD options(pfditems="PFDItemList" id="pfdView1");
176644    +          ods tagsets.gtl event=LayoutRegion(finish);
176645    +          ods tagsets.gtl close;
176646    +          ods &EM_REPORT_FORMAT select ALL ; /* re-enable sgrender output */
176647    +          ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title,
176647   !+NOQUOTE))";
176648    +          proc sgsilk viewxml="&viewfile" dataxml="&dataxfile"; run;
176649    +      %end;
176650    +      title1; title2; title3;
176652    +%mend em_report_workspace_render;
176655    +%macro EM_REPORT_RESULTS(
176656    +    path=,              /*-- output location             ---*/
176657    +    lib=,               /*-- em workspace library        ---*/
176658    +    startnodeid=,       /*-- starting nodeid             ---*/
176659    +    showall=,           /*-- show all content Y or N     ---*/
176660    +    nodes=,             /*-- nodes to generate report on ---*/
176661    +    format=,            /*-- format for generated report ---*/
176662    +    style=              /*--- style for ODS statement    ---*/
176663    +) ;
176665    +    data _null_ ;
176666    +        call symput('report_date', strip(put(date(),     NLDATE.)));
176667    +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
176668    +    run;
176670    +    data _null_;
176671    +        file print ;
176672    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
176673    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE,
176673   !+%nrbquote(&report_time), &report_date))" ;
176674    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE,
176674   !+&EM_REPORT_PROJECT_TEXT)) " ;
176675    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE,
176675   !+%nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
176676    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE,
176676   !+&startnodeid))";
176677    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE,
176677   !+%nrbquote(&em_report_node_text)))" ;
176678    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE,
176678   !+&EM_REPORT_NODES))" ;
176679    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE,
176679   !+&EM_REPORT_SHOWALL))" / ;
176680    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE,
176680   !+&EM_REPORT_FORMAT))" ;
176681    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_graphics_note, NOQUOTE,
176681   !+&EM_REPORT_GDEVICE))" ;
176682    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE, &STYLE))" / ;
176683    +    run ;
176685    +    /* add report view to results */
176686    +    %EM_GETNAME(key=REPORT, type=FILE, extension=&FORMAT);
176687    +    %EM_REPORT(KEY=REPORT, BLOCK=MODEL, VIEWTYPE = FILEVIEWER, autodisplay=Y,
176687   !+DESCRIPTION=CUSTOM);
176689    +%mend;
176691    +%macro EM_REPORT_CREATERESULTS();
176693    +    %EM_GETNAME(key=ODSRESULTS, type=FILE, extension=htm, folder=ODS);
176694    +    filename x "&EM_FILE_ODSRESULTS" nobom;
176696    +    ods listing close;
176697    +    ods html3 file=X encoding = "utf-8" style=styles.em_style;
176698    +    ods html3 text=" ";
176699    +    %if "&EM_REPORT_TITLE" ne "" %then %do;
176700    +        ods html3 text="&EM_REPORT_TITLE";
176701    +    %end;
176702    +    %else %do;
176703    +        ods html3 text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title,
176703   !+NOQUOTE))";
176704    +    %end;
176706    +    data _null_ ;
176707    +        call symput('report_date', strip(put(date(),     NLDATE.)));
176708    +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
176709    +    run;
176711    +    data _null_;
176712    +        file print ;
176713    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
176714    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE,
176714   !+%nrbquote(&report_time), &report_date))" ;
176715    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE,
176715   !+&EM_REPORT_PROJECT_TEXT)) " ;
176716    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE,
176716   !+%nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
176717    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE,
176717   !+&startnodeid))";
176718    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE,
176718   !+%nrbquote(&em_report_node_text)))" ;
176719    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE,
176719   !+&EM_REPORT_NODES))" ;
176720    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE, &showall))" /
176720   !+ ;
176721    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE,
176721   !+&EM_REPORT_FORMAT))" ;
176722    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_graphics_note, NOQUOTE,
176722   !+&EM_REPORT_GDEVICE))" ;
176723    +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE,
176723   !+&EM_REPORT_STYLE))" / ;
176724    +    run ;
176726    +    filename x;
176727    +    ods listing;
176728    +    ods html3 close;
176730    +    %EM_REPORT(KEY=ODSRESULTS, BLOCK=MODEL, VIEWTYPE = HTMLVIEW);
176732    +%mend EM_REPORT_CREATERESULTS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emrpm.em_modelprops.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMRPM.EM_MODELPROPS.SOURCE.
176733    +%macro em_modelprops(dgmid=, modelid=, output=%nrbquote(work.properties));
176734    +  %global mdl_emwsid mdl_modelid;
176735    +  %do;
176736    +     %let mdl_emwsid  = &dgmid;
176737    +     %let mdl_modelid = &modelid;
176738    +     %let mdl_output  = &output;
176739    +
176740    +     dm "afa c=sashelp.emrpm.modelprops.scl";
176741    +  %end;
176742    +%mend em_modelprops;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename pdffile
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pdf";
MPRINT(TRAIN):   filename pdffile;
NOTE: Fileref PDFFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename rtffile
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\REPORT.rtf";
MPRINT(TRAIN):   filename rtffile;
NOTE: Fileref RTFFILE has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_plotmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_PLOTMACROS.SOURCE.
176743    +/*---------------------------------------------------------*/
176744    + * Utility functions:;
MPRINT(EM_REPORT_CREATE):   * Utility functions:;
176745    +/*---------------------------------------------------------*/
176747    +%macro EM_REPORT_GTT();
176749    +    %global EM_REPORT_TTL1 EM_REPORT_TTL2 EM_REPORT_TTL3 EM_REPORT_TITLE
176749   !+EM_REPORT_NODE_TEXT EM_REPORT_KEY_description;
176751    +    %if "&EM_REPORT_TITLE" ne "" %then %do;
176752    +        %let EM_REPORT_ttl1 = &EM_REPORT_TITLE;
176753    +    %end;
176754    +    %else %do;
176755    +        %let EM_REPORT_ttl1 = %sysfunc(sasmsg(sashelp.dmine,
176755   !+rpt_reporttitleone_title, NOQUOTE));
176756    +    %end;
176758    +    %let EM_REPORT_ttl2 = %sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title,
176758   !+NOQUOTE, %nrbquote(&em_report_node_text)));
176760    +    %let msg0 = views_descriptions_&em_report_key_description;
176761    +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine,
176761   !+views_descriptions_&em_report_key_description, NOQUOTE));
176762    +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
176763    +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine,
176763   !+views_descriptions_&em_report_key_description, NOQUOTE));
176764    +    %end;
176765    +    %else %do;
176766    +        %let msg2=views_descriptions_&em_report_key_description;
176767    +    %end;
176769    +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&msg0))"
176770    +    %then %do;
176771    +        %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.dmine,
176771   !+views_descriptions_&em_report_key_description, NOQUOTE));
176772    +    %end;
176773    +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&msg0))"
176774    +    %then %do;
176775    +        %if %sysfunc(exist(sashelp.tmine)) %then %do;
176776    +            %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.tmine,
176776   !+views_descriptions_&em_report_key_description, NOQUOTE));
176777    +        %end;
176778    +    %end;
176779    +    %else %do;
176780    +        %let EM_REPORT_ttl3 = &em_report_key_description;
176781    +    %end;
176783    +    /*--- special labels ---*/
176785    +    %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS"
176786    +    %then %do;
176787    +       %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.dmine, rpt_regressionmod_title,
176787   !+ NOQUOTE));
176788    +    %end;
176790    +%mend;
176792    +/*---------------------------------------------------------*/
176793    +* Plots created by SGPLOT: LINEPLOT, SCATTER, PLOT, BAR;
MPRINT(EM_REPORT_CREATE):   * Plots created by SGPLOT: LINEPLOT, SCATTER, PLOT, BAR;
176794    +/*---------------------------------------------------------*/
176796    +%macro EM_REPORT_SGPLOT(type=);
176798    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
176800    +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
176802    +    /*--- EM_REPORT_SGPLOT 1. identify the plot statement ---*/
176804    +    %let axisstmt = xaxis;
176806    +    %if &type eq LINEPLOT   %then %let plotstmt = series;
176807    +    %if &type eq PLOT       %then %let plotstmt = series;
176808    +    %if &type eq SCATTER    %then %let plotstmt = scatter;
176809    +    %if &type eq BARPLOT    %then %let plotstmt = vbar;
176810    +    %if &type eq HISTOGRAM  %then %let plotstmt = histogram;
176812    +    %if "&plotstmt" eq "vbar" and "%upcase(&EM_REPORT_KEY_ORIENTATION)" eq
176812   !+"HORIZONTAL"
176813    +    %then %do;
176814    +        %let plotstmt = hbar;
176815    +        %let axisstmt = yaxis;
176816    +    %end;
176817    +    /*--- EM_REPORT_SGPLOT 2. options for plot statements ---*/
176819    +    %let plotopt = ;
176821    +    %if &type eq LINEPLOT %then %do;
176822    +        %if "&EM_REPORT_KEY_GROUP" ne "" %then %let plotopt = %str(&plotopt group =
176822   !+&EM_REPORT_KEY_GROUP);
176823    +    %end;
176824    +    %else %if &type eq PLOT %then %do;
176825    +        %if "&EM_REPORT_KEY_GROUP" ne "" %then %let plotopt = %str(&plotopt group =
176825   !+&EM_REPORT_KEY_GROUP);
176826    +    %end;
176827    +    %else %if &type eq SCATTER %then %do;
176828    +        %if "&EM_REPORT_KEY_GROUP" ne ""     %then %let plotopt = %str(&plotopt
176828   !+group = &EM_REPORT_KEY_GROUP);
176829    +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt
176829   !+freq=&EM_REPORT_KEY_FREQUENCY);
176830    +        %let plotopt = %str(&plotopt markerattrs=(symbol=squarefilled));
176831    +    %end;
176832    +    %else %if &type eq BARPLOT %then %do;
176833    +        %let plotopt = missing;
176834    +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt
176834   !+response=&EM_REPORT_KEY_FREQUENCY);
176835    +        %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %let plotopt = %str(&plotopt
176835   !+group=&EM_REPORT_KEY_SUBGROUP);
176836    +        %else %if "&EM_REPORT_KEY_GROUP" ne ""  %then %let plotopt = %str(&plotopt
176836   !+group=&EM_REPORT_KEY_GROUP);
176837    +    %end;
176838    +    %else %if &type eq HISTOGRAM %then %do;
176839    +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt
176839   !+freq=&EM_REPORT_KEY_FREQUENCY);
176840    +        %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %let plotopt = %str(&plotopt
176840   !+group=&EM_REPORT_KEY_SUBGROUP);
176841    +/*        %if "&EM_REPORT_KEY_Y" ne ""         %then %let plotopt = %str(&plotopt
176841   !+group=&EM_REPORT_KEY_Y);*/
176842    +    %end;
176844    +    %if "&plotopt" ne "" %then %let plotopt = %str(/ &plotopt);
176846    +    /*--- EM_REPORT_SGPLOT 3. handle _ANYNUMERIC_ or BYSET---*/
176848    +    %if &type eq PLOT and "&EM_REPORT_KEY_Y" eq "_ANYNUMERIC_" %then %do;
176850    +         proc contents data=&pdat out=_rptsgplot_temp(keep=name type) noprint;
176851    +         run;
176853    +         /*** For _ANYNUMERIC_, get the first numeric variable that is not X ***/
176854    +         data _null_;
176855    +            set _rptsgplot_temp(where=(type eq 1 and upcase(name) ne
176855   !+"%upcase(&EM_REPORT_KEY_X)"));
176856    +            if _n_=1 then call symput("EM_REPORT_KEY_Y", strip(name));
176857    +         run;
176858    +    %end;
176860    +    /*--- EM_REPORT_SGPLOT 4. call SGPLOT ---*/
176862    +    ods graphics / discretemax=5000;
176864    +    proc sgplot data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
176866    +        %if "&EM_REPORT_KEY_Y" ne "" and "&type" ne "BARPLOT" and "&type" ne
176866   !+"HISTOGRAM" %then %do;
176867    +            %let i = 1;
176868    +            %do %while ("%scan(&EM_REPORT_KEY_Y,&i,' ')" ne "");
176869    +                %let thisY=%scan(&EM_REPORT_KEY_Y,&i,' ');
176870    +                %let i = %eval(&i+1);
176871    +                &plotstmt
176872    +                    x = &EM_REPORT_KEY_X  y = &thisY  &plotopt
176873    +                ;
176874    +            %end;
176875    +        %end;
176876    +        %if "&EM_REPORT_KEY_Y2" ne "" and "&type" ne "BARPLOT" and "&type" ne
176876   !+"HISTOGRAM" %then %do;
176877    +            &plotstmt
176878    +                x = &EM_REPORT_KEY_X  y = &EM_REPORT_KEY_Y2  &plotopt
176879    +            ;
176880    +        %end;
176881    +        %if "&type" eq "BARPLOT" %then %do;
176882    +            &plotstmt
176883    +                &EM_REPORT_KEY_X &plotopt;
176884    +            &axisstmt
176885    +                type=discrete /* discreteorder=data */
176886    +                %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do;
176886   !+display=(NOVALUES NOTICKS) %end;
176887    +            ;
176888    +        %end;
176889    +        %if "&type" eq "HISTOGRAM" and "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do;
176890    +            &plotstmt
176891    +                &EM_REPORT_KEY_X &plotopt;
176892    +            &axisstmt
176893    +                %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do;
176893   !+display=(NOVALUES NOTICKS) %end;
176894    +            ;
176895    +        %end;
176896    +        %if "&type" eq "HISTOGRAM" and "&EM_REPORT_KEY_FREQUENCY" eq "" %then %do;
176897    +            &plotstmt &EM_REPORT_KEY_X;
176898    +        %end;
176899    +        %if "&type" ne "BARPLOT" and "&type" ne "HISTOGRAM" %then %do;
176900    +            %if "&EM_REPORT_KEY_YREF" ne "" %then %do; refline &EM_REPORT_KEY_YREF /
176900   !+ axis = y; %end;
176901    +            %if "&EM_REPORT_KEY_XREF" ne "" %then %do; refline &EM_REPORT_KEY_XREF /
176901   !+ axis = x; %end;
176902    +        %end;
176904    +        keylegend;
176905    +    run; quit;
176907    +    %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do;
176908    +        %EM_REPORT_makeMultiColumn(dat=&pdat.&EM_REPORT_KEY_WHERECLAUSE,
176908   !+vars=effectnum variable classlevel coefficient tvalue pvalue, split=2);
176909    +    %end;
176911    +    ods graphics / discretemax=100;
176912    +    title1; title2; title3;
176914    +%mend EM_REPORT_SGPLOT;
176916    +/*---------------------------------------------------------*/
176917    +* Plots rendered by SGSILK: DTREE, ICICLE, PIE;
MPRINT(EM_REPORT_CREATE):   * Plots rendered by SGSILK: DTREE, ICICLE, PIE;
176918    +/*---------------------------------------------------------*/
176920    +%macro EM_REPORT_SGSILK(type=);
176922    +    %local temp path view datax viewfile dataxfile;
176923    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
176925    +    /*--- EM_REPORT_SGSILK 1. define the XML files for view and data ---*/
176927    +    %let temp      = %nrbquote(%sysfunc(PATHNAME(&EM_REPORT_LIB)));
176928    +    %let path      = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
176929    +    %let view      = view.xml;
176930    +    %let datax     = data.xml;
176931    +    %let viewfile  = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&view);
176932    +    %let dataxfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&datax);
176934    +    /*--- EM_REPORT_SGSILK 2. Call SGRENGER and setup GTL tagsets---*/
176936    +    ods &EM_REPORT_FORMAT exclude SGRENDER; /* disable sgrender output to PDF */
176937    +    ods tagsets.gtl file="&viewfile" data="&dataxfile" encoding="utf-8"
176937   !+style=styles.em_style;
176939    +    %if &type eq DTREE %then %do;   /****** DTREE ******/
176941    +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
176942    +            dynamic var1 = "&EM_REPORT_KEY_ID";
176943    +            dynamic var2 = "&EM_REPORT_KEY_PARENT";
176944    +            dynamic var3 = "&EM_REPORT_KEY_NODETEXT";
176945    +            dynamic var4 = "&EM_REPORT_KEY_NODECOLOR";
176946    +            dynamic var5 = "&EM_REPORT_KEY_ABOVETEXT";
176947    +            dynamic var6 = "&EM_REPORT_KEY_BELOWTEXT";
176948    +            dynamic var7 = "&EM_REPORT_KEY_LINKWIDTH";
176949    +        run;
176951    +        ods tagsets.gtl event=LayoutRegion(start)
176952    +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2"
176952   !+title3="&EM_REPORT_TTL3");
176954    +        ods tagsets.gtl event=DecisionTree
176955    +            options( id        = "&EM_REPORT_KEY_ID"
176956    +                     parent    = "&EM_REPORT_KEY_PARENT"
176957    +                     nodetext  = "&EM_REPORT_KEY_NODETEXT"
176958    +                     abovetext = "&EM_REPORT_KEY_ABOVETEXT"
176959    +                     belowtext = "&EM_REPORT_KEY_BELOWTEXT"
176960    +                     linkwidth = "&EM_REPORT_KEY_LINKWIDTH"
176961    +                     nodecolor = "&EM_REPORT_KEY_NODECOLOR" );
176963    +    %end;
176964    +    %else %if &type eq ICICLE %then %do;      /****** ICICLE ******/
176966    +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
176967    +            dynamic var1="&EM_REPORT_KEY_ID";
176968    +            dynamic var2="&EM_REPORT_KEY_PARENT";
176969    +            dynamic var3="&EM_REPORT_KEY_NODECOLOR";
176970    +            dynamic var4="&EM_REPORT_KEY_NODESIZE";
176971    +        run;
176973    +        ods tagsets.gtl event=LayoutRegion(start)
176974    +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2"
176974   !+title3="&EM_REPORT_TTL3");
176976    +        ods tagsets.gtl event=Icicle
176977    +            options( id        = "&EM_REPORT_KEY_ID"
176978    +                     parent    = "&EM_REPORT_KEY_PARENT"
176979    +                     nodecolor = "&EM_REPORT_KEY_NODECOLOR"
176980    +                     nodesize  = "&EM_REPORT_KEY_NODESIZE" );
176982    +    %end;
176983    +    %else %if &type eq PIE %then %do;      /****** PIE ******/
176985    +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
176986    +            dynamic var1="&EM_REPORT_KEY_X" var2="&EM_REPORT_KEY_Y";
176987    +        run; quit;
176989    +        ods tagsets.gtl event=LayoutRegion(start)
176990    +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2"
176990   !+title3="&EM_REPORT_TTL3");
176992    +        ods tagsets.gtl event=Pie
176993    +            options( category = "&EM_REPORT_KEY_X"
176994    +                     response = "&EM_REPORT_KEY_Y"
176995    +                     pielabeldisplay = "1"         );
176997    +    %end;
176999    +    ods tagsets.gtl event=LayoutRegion(finish);
177000    +    ods tagsets.gtl close;
177002    +    /*--- EM_REPORT_SGSILK 3. Call SGSILK to render the graph---*/
177004    +    ods &EM_REPORT_FORMAT select ALL; /* re-enable sgrender output */
177005    +    proc sgsilk viewxml="&viewfile" dataxml="&dataxfile"; run;
177006    +    title1; title2; title3;
177007    +%mend;
177009    +/*---------------------------------------------------------*/
177010    +* DENDROGRAM <- PROC TREE;
MPRINT(EM_REPORT_CREATE):   * DENDROGRAM <- PROC TREE;
177011    +/*---------------------------------------------------------*/
177013    +%macro EM_REPORT_DENDROGRAM() ;
177015    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177017    +    *goptions device=&EM_REPORT_GDEVICE ;
177018    +    goptions reset=all device=&EM_REPORT_GDEVICE;
177020    +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
177022    +    axis1 minor=none label=(height = &EM_REPORT_TEXT_SIZE pt ) ;
177023    +    axis2 minor=none label=(height = &EM_REPORT_TEXT_SIZE pt angle=90 ) ;
177025    +    ods &EM_REPORT_FORMAT select ALL; /* re-enable sgrender output */
177027    +    proc tree data=&pdat.&EM_REPORT_KEY_WHERECLAUSE horizontal haxis=axis1
177027   !+vaxis=axis2;
177028    +        height &EM_REPORT_KEY_HEIGHT;
177029    +        name   &EM_REPORT_KEY_NAME;
177030    +        parent &EM_REPORT_KEY_PARENT;
177031    +    run; quit;
177033    +    title1; title2; title3 ;
177034    +    axis1; axis2;
177036    +%mend EM_REPORT_DENDROGRAM;
177038    +/*---------------------------------------------------------*/
177039    +* EVENTPLOT <- SGSCATTER;
MPRINT(EM_REPORT_CREATE):   * EVENTPLOT <- SGSCATTER;
177040    +/*---------------------------------------------------------*/
177042    +%macro EM_REPORT_EVENTPLOT();
177044    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177046    +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
177048    +    proc sgscatter data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
177049    +        plot (_cumulative_event_count_ _marginal_event_rate_ _event_count_
177049   !+_cumulative_event_rate_)
177050    +            * _cutoff_score_ / group=datarole join=() markerattrs=(size=0) grid;
177051    +    run; quit;
177053    +    title1; title2; title3 ;
177055    +%mend EM_REPORT_EVENTPLOT;
177057    +/*---------------------------------------------------------*/
177058    + * EM_REPORT_ITERATIONPLOT ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_ITERATIONPLOT ;
177059    + * create plots of iterations: neural, stepwise, tree, etc..;
MPRINT(EM_REPORT_CREATE):   * create plots of iterations: neural, stepwise, tree, etc..;
177060    +/*---------------------------------------------------------*/
177062    +%macro EM_REPORT_ITERATIONPLOT();
177064    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177065    +    %let X    = &EM_REPORT_KEY_X;
177067    +    title1 "&EM_REPORT_TTL1";
177068    +    title2 "&EM_REPORT_TTL2";
177069    +    title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_mdliterationplot_title, NOQUOTE))";
177071    +    %local _misc_ _vmisc_ _ase_ _vase_ ;
177072    +    data _null_ ;
177073    +        set &pdat(obs=2) end=eof;
177074    +        if eof then do ;
177075    +            call symput('_ase_',_ase_);
177076    +            call symput('_vase_',_vase_);
177077    +            call symput('_misc_',_misc_);
177078    +            call symput('_vmisc_',_vmisc_);
177079    +        end;
177080    +    run;
177082    +    %let dsid = %sysfunc(open(&pdat));
177083    +    %if &dsid %then %do;
177084    +        %let _ase_ = %sysfunc(VARNUM(&dsid, _ase_));
177085    +        %let _vase_ = %sysfunc(VARNUM(&dsid, _vase_));
177086    +        %let _misc_ = %sysfunc(VARNUM(&dsid, _misc_));
177087    +        %let _vmisc_ = %sysfunc(VARNUM(&dsid, _vmisc_));
177088    +    %end;
177089    +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
177091    +    %if "&_ase_"   eq "." %then %let _ase_   = 0;
177092    +    %if "&_vase_"  eq "." %then %let _vase_  = 0;
177093    +    %if "&_misc_"  eq "." %then %let _misc_  = 0;
177094    +    %if "&_vmisc_" eq "." %then %let _vmisc_ = 0;
177096    +    %put &_ase_ &_vase_ &_misc_ &_vmisc_;
177098    +    %if &_vmisc_ ne 0 %then %do;
177099    +        proc sql noprint;
177100    +            select count(*) into :nonMiss_vmisc from &pdat where _vmisc_ ne .;
177101    +        quit;
177102    +    %end;
177103    +    %else %do;
177104    +        %let nonMiss_vmisc = 0;
177105    +    %end;
177107    +    ods path(prepend) work.templat(update);
177108    +    proc template;
177109    +        define statgraph em.IterationPlot / store=work.templat;
177110    +            begingraph;
177111    +                entrytitle "&EM_REPORT_TTL1";
177112    +                entrytitle "&EM_REPORT_TTL2";
177113    +                entrytitle "%sysfunc(sasmsg(sashelp.dmine,
177113   !+rpt_mdliterationplot_title, NOQUOTE))";
177115    +              layout lattice / order=columnmajor rows=1 rowdatarange=data
177115   !+columngutter=10;
177117    +                %if &_ase_ ne 0 or &_vase_ ne 0 %then %do;
177118    +                    layout overlay / cycleattrs=true
177119    +                        xaxisopts=(griddisplay=on
177119   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_iteration_vlabel, NOQUOTE))")
177120    +                        yaxisopts=(griddisplay=on
177120   !+label="%sysfunc(sasmsg(sashelp.dmine, stat_ase_vlabel, NOQUOTE))");
177121    +                        %if &_ase_ ne 0 %then %do ;
177122    +                            seriesplot x=&X y=_ASE_ /  markerattrs=(size=0)
177122   !+display=all name='train'
177123    +                                legendlabel="%sysfunc(sasmsg(sashelp.dmine,
177123   !+rpt_roletrain_value, NOQUOTE))";
177124    +                        %end;
177125    +                        %if &_vase_  ne 0 %then %do ;
177126    +                            seriesplot x=&X y=_VASE_ /  markerattrs=(size=0)
177126   !+display=all name='validate'
177127    +                                legendlabel="%sysfunc(sasmsg(sashelp.dmine,
177127   !+rpt_rolevalidate_value, NOQUOTE))";
177128    +                        %end;
177129    +                        %if "&EM_REPORT_KEY_XREF" ne "" %then %do; referenceline
177129   !+x=&EM_REPORT_KEY_XREF; %end;
177130    +                    endlayout;
177131    +                %end;
177133    +                %if &_misc_ ne 0 or ( &_vmisc_ ne 0 and &nonMiss_vmisc ne 0) %then
177133   !+%do;
177134    +                    layout overlay / cycleattrs=true
177135    +                        xaxisopts=(griddisplay=on
177135   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_iteration_vlabel, NOQUOTE))")
177136    +                        yaxisopts=(griddisplay=on
177136   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_misclassrate_vlabel, NOQUOTE))");
177137    +                        %if &_misc_ ne 0 %then %do;
177138    +                            seriesplot x=&X y=_MISC_ /  markerattrs=(size=0)
177138   !+display=all;
177139    +                        %end;
177140    +                        %if &_vmisc_  ne 0 %then %do ;
177141    +                            seriesplot x=&X y=_VMISC_ /  markerattrs=(size=0)
177141   !+display=all;
177142    +                        %end;
177143    +                        %if "&EM_REPORT_KEY_XREF" ne "" %then %do; referenceline
177143   !+x=&EM_REPORT_KEY_XREF; %end;
177144    +                    endlayout;
177145    +                %end;
177147    +                sidebar /  align=bottom;
177148    +                    layout overlay;
177149    +                        discretelegend 'train' 'validate' / down=1 order=columnmajor
177149   !+;
177150    +                    endlayout;
177151    +                endsidebar;
177152    +              endlayout;
177153    +            endgraph;
177154    +        end;
177155    +    run;
177157    +    proc sort data=&pdat.&EM_REPORT_KEY_WHERECLAUSE out=_tmprpt_iterdat;
177158    +        by &X;
177159    +    run;
177161    +    proc sgrender data=_tmprpt_iterdat template='em.IterationPlot';
177162    +    run;
177163    +    title1; title2; title3;
177165    +    proc delete data=_tmprpt_iterdat; run;
177167    +%mend  EM_REPORT_ITERATIONPLOT;
177169    +/* for hpdmassess */
177171    +%macro EM_REPORT_HPDMASSESS();
177173    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177175    +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
177177    +    /*--- EM_REPORT_HPDMASSESS 1. idenfity the variables     ---*/
177179    +    %let dsid = %sysfunc(open(&pdat));
177180    +    %if &dsid %then %do;
177181    +        %let lift     = %sysfunc(VARNUM(&dsid, lift));
177182    +        %let c_lift   = %sysfunc(VARNUM(&dsid, c_lift));
177183    +        %let mean1    = %sysfunc(VARNUM(&dsid, target_mean));
177184    +        %let mean2    = %sysfunc(VARNUM(&dsid, predicted_mean));
177185    +        %let datarole = %sysfunc(VARNUM(&dsid, &EM_REPORT_KEY_GROUP));
177186    +    %end;
177187    +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
177189    +    %if "&lift"     eq "."  %then %let lift     = 0;
177190    +    %if "&c_lift"   eq "."  %then %let c_lift   = 0;
177191    +    %if "&mean1"    eq "."  %then %let mean1   = 0;
177192    +    %if "&mean2"    eq "."  %then %let mean2   = 0;
177193    +    %if "&datarole" eq "."  %then %let datarole = 0;
177195    +    %put &lift &c_lift &mean1 &mean2 &datarole;
177197    +    %if &lift ne 0 and &c_lift ne 0 %then %do;
177198    +        %let hpdm_plot = 1;
177199    +        %let hpdm_var1 = lift;
177200    +        %let hpdm_var2 = c_lift;
177201    +        %let hpdm_lbl1 = assmt_lift_vlabel;
177202    +        %let hpdm_lbl2 = assmt_liftc_vlabel;
177203    +    %end;
177204    +    %else
177205    +    %if &mean1 ne 0 and &mean2 ne 0
177206    +    %then %do;
177207    +        %let hpdm_plot = 1;
177208    +        %let hpdm_var1 = target_mean;
177209    +        %let hpdm_var2 = predicted_mean;
177210    +        %let hpdm_lbl1 = rpt_rpttargetmean_vlabel;
177211    +        %let hpdm_lbl2 = rpt_rptpredmean_vlabel;
177212    +    %end;
177213    +    %else %do;
177214    +        %let hpdm_plot = 0;
177215    +        %let hpdm_var1 = ;
177216    +        %let hpdm_var2 = ;
177217    +        %let hpdm_lbl1 = ;
177218    +        %let hpdm_lbl2 = ;
177219    +    %end;
177220    +    /*--- EM_REPORT_HPDMASSESS 2. call SGPANEL                ---*/
177222    +    %if &hpdm_plot eq 1 %then %do;
177223    +        ods path(prepend) work.templat(update);
177224    +        proc template;
177225    +            define statgraph em.hpdmassess / store=work.templat;
177226    +                begingraph;
177227    +                    entrytitle "&EM_REPORT_TTL1";
177228    +                    entrytitle "&EM_REPORT_TTL2";
177229    +                    entrytitle "&EM_REPORT_TTL3";
177231    +                    layout lattice / order=columnmajor rows=1 rowdatarange=data
177231   !+columngutter=10;
177233    +                        %if &datarole ne 0 %then %do;
177234    +                            layout overlay / cycleattrs=true
177235    +                                             xaxisopts=(griddisplay=on
177235   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
177236    +                                             yaxisopts=(griddisplay=on
177236   !+label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))")
177237    +                            ;
177238    +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var1 /
177238   !+name='var1' markerattrs=(size=0) display=all group=&EM_REPORT_KEY_GROUP;
177239    +                            endlayout;
177240    +                            layout overlay / cycleattrs=true
177241    +                                             xaxisopts=(griddisplay=on
177241   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
177242    +                                             yaxisopts=(griddisplay=on
177242   !+label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl2, NOQUOTE))")
177243    +                            ;
177244    +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var2 /
177244   !+markerattrs=(size=0) display=all group=&EM_REPORT_KEY_GROUP;
177245    +                            endlayout;
177246    +                            sidebar /  align = bottom;
177247    +                                layout overlay;
177248    +                                    discretelegend 'var1' / down=1 order=columnmajor
177248   !+;
177249    +                                endlayout;
177250    +                            endsidebar;
177251    +                        %end;
177252    +                        %else %do;
177253    +                            layout overlay / cycleattrs=true
177254    +                                             xaxisopts=(griddisplay=on
177254   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
177255    +                                             yaxisopts=(griddisplay=on
177255   !+label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))")
177256    +                            ;
177257    +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var1 /
177257   !+markerattrs=(size=0) display=all name='var1'
177258    +                                    legendlabel="%sysfunc(sasmsg(sashelp.dmine,
177258   !+&hpdm_lbl1, NOQUOTE))";
177259    +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var2 /
177259   !+markerattrs=(size=0) display=all name='var2'
177260    +                                    legendlabel="%sysfunc(sasmsg(sashelp.dmine,
177260   !+&hpdm_lbl2, NOQUOTE))";
177261    +                            endlayout;
177262    +                            sidebar /  align=bottom;
177263    +                                layout overlay;
177264    +                                    discretelegend 'var1' 'var2' / down=1
177264   !+order=columnmajor;
177265    +                                endlayout;
177266    +                            endsidebar;
177267    +                        %end;
177268    +                    endlayout;
177269    +                endgraph;
177270    +            end;
177271    +        run;
177273    +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template='em.hpdmassess'
177273   !+; run;
177274    +    %end;
177276    +    title1; title2; title3;
177278    +%mend EM_REPORT_HPDMASSESS;
177280    +/* for heatmap version of histograms */
177282    +%macro EM_REPORT_HEATMAPTEMPLATE();
177284    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177286    +    %if "&EM_REPORT_KEY_FREQUENCY" ne "" "&EM_REPORT_KEY_X" ne "" "&EM_REPORT_KEY_Y"
177286   !+ ne "" %then %do;
177288    +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3"
177288   !+;
177290    +        proc template;
177291    +        define statgraph heatmap;
177292    +        begingraph;
177293    +        entrytitle "&EM_REPORT_TTL1";
177294    +        entrytitle "&EM_REPORT_TTL2";
177295    +        entrytitle "&EM_REPORT_TTL3";
177296    +        layout overlay;
177297    +        heatmapparm x=&EM_REPORT_KEY_X y=&EM_REPORT_KEY_Y
177297   !+colorresponse=&EM_REPORT_KEY_FREQUENCY / name="map" display=all;
177298    +          continuouslegend "map";
177299    +        endlayout;
177300    +        endgraph;
177301    +        end;
177303    +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=heatmap; run;
177305    +    %end;
177307    +    title1; title2; title3;
177309    +%mend EM_REPORT_HEATMAPTEMPLATE;
177312    +/* for assessment plot */
177314    +%macro EM_REPORT_EMRANK(pdat=, lattice=no) ;
177316    +    data _tmp_dat;
177317    +        set &pdat.&EM_REPORT_KEY_WHERECLAUSE;
177318    +    run;
177319    +    %let pdat = _tmp_dat;
177321    +    %let varList = GAIN CAPC LIFTC RESPC _MEANP_ _MINP_ _MAXP_;
177322    +    %let varNum = 7;
177323    +    %let modelVar = model;
177324    +    %do k = 1 %to &varNum;
177325    +        %let thisVar = %scan(&varList,&k,' ');
177326    +        %let var_&thisVar = ;
177327    +    %end;
177329    +/*-----------------------------------------------------------------------------*/
177331    +    proc contents data=&pdat out=_tmp_content(keep=name) noprint;
177332    +    run;
177334    +    %let is_cat = 0;
177335    +    %let has_loop = 0;
177336    +    %let has_where = 0;
177338    +    data _null_;
177339    +        set _tmp_content;
177340    +        name=strip(upcase(name));
177341    +        format _tmp_list $500.;
177342    +        _tmp_list = symget('varList');
177344    +        do k = 1 to &varNum;
177345    +            if name eq scan(_tmp_list,k,' ') then call
177345   !+symput(cats('var_',name),name);
177346    +        end;
177348    +        if name eq '_LOOP_'  then call symput('has_loop','1');
177349    +        if name eq '_WHERE_' then call symput('has_where','1');
177350    +        if name eq 'GAIN'    then call symput('is_cat','1');
177351    +    run;
177353    +    %if &has_loop eq 1 %then %do;
177354    +        %if &has_where eq 1 %then %do;
177355    +            proc sql noprint;
177356    +                select count(*) into :nn1 from &pdat;
177357    +                select count(*) into :nn2 from &pdat where _where_ is missing;
177358    +            quit;
177359    +            %if &nn1 ne &nn2
177360    +                %then %let modelvar = _where_;
177361    +                %else %let modelvar = ;
177362    +        %end;
177363    +        %else %do;
177364    +            %let modelvar = ;
177365    +        %end;
177366    +    %end;
177368    +/*-----------------------------------------------------------------------------*/
177370    +    %if "&lattice" eq "yes" %then %do ;
177372    +        proc sql noprint;
177373    +            select count(distinct datarole)  into :ndataroles from &pdat;
177374    +            select distinct datarole into :drole1-:drole%left(&ndataroles) from
177374   !+&pdat;
177375    +        quit;
177377    +        %do d =1 %to &ndataroles;
177379    +            proc sort data=&pdat(where=(datarole eq "&&&drole&d")) out=_tmp_emrp;
177380    +                by &modelvar decile;
177381    +            run;
177383    +            title1 "&EM_REPORT_TTL1";
177384    +            title2 "&EM_REPORT_TTL2";
177385    +            title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_multiplemdlassess_title,
177385   !+NOQUOTE, &&&drole&d))";
177386    +            %if "&EM_REPORT_KEY_WHERE" ne " " %then %do;
177387    +                title4 "&EM_REPORT_KEY_WHERE";
177388    +            %end;
177390    +            proc sgscatter data=_tmp_emrp;
177391    +                plot
177392    +                    %if &is_cat eq 1 %then %do;
177393    +                        (&var_gain &var_liftc &var_capc &var__meanp_) * decile
177394    +                    %end;
177395    +                    %else %do;
177396    +                        (&var__meanp_ &var__minp_ &var__maxp_) * decile
177397    +                    %end;
177398    +                    / %if &modelvar ne %then %do; group=&modelvar %end;
177399    +                        join=() markerattrs=(size=0) grid
177400    +                ;
177401    +            run; quit;
177402    +            title1; title2; title3; title4;
177403    +        %end;
177404    +    %end;
177405    +    %else %do;
177407    +        proc sort data=&pdat out=_tmp_emrp;
177408    +            by target datarole;
177409    +        run;
177411    +        title1 "&EM_REPORT_TTL1";
177412    +        title2 "&EM_REPORT_TTL2";
177413    +        title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_singlemdlassess_title, NOQUOTE,
177413   !+&em_report_key_where))";
177415    +        %if &is_cat eq 1 %then %do;
177416    +            %if "&var_gain" ne " " %then %do;
177417    +                proc sgpanel data=_tmp_emrp;
177418    +                    panelby datarole;
177419    +                    series x=decile y=gain; series x=decile y=basegain; series
177419   !+x=decile y=bestgain;
177420    +                    rowaxis grid; colaxis grid;
177421    +                run; quit;
177422    +            %end;
177423    +            %if "&var_liftc" ne " " %then %do;
177424    +                proc sgpanel data=_tmp_emrp;
177425    +                    panelby datarole;
177426    +                    series x=decile y=liftc; series x=decile y=baseliftc; series
177426   !+x=decile y=bestliftc;
177427    +                    rowaxis grid; colaxis grid;
177428    +                run; quit;
177429    +            %end;
177430    +            %if "&var_capc" ne " " %then %do;
177431    +                proc sgpanel data=_tmp_emrp;
177432    +                    panelby datarole;
177433    +                    series x=decile y=capc; series x=decile y=basecapc; series
177433   !+x=decile y=bestcapc;
177434    +                    rowaxis grid; colaxis grid;
177435    +                run; quit;
177436    +            %end;
177437    +        %end;
177438    +        %else %do;
177439    +            %if "&var__meanp_" ne " " %then %do ;
177440    +                proc sgpanel data=_tmp_emrp;
177441    +                    panelby datarole;
177442    +                    series x=decile y=_meanp_; series x=decile y=_targetmean_;
177443    +                    rowaxis grid; colaxis grid;
177444    +                run; quit;
177445    +            %end;
177446    +            %if "&var__minp_" ne " " %then %do ;
177447    +                proc sgpanel data=_tmp_emrp;
177448    +                    panelby datarole;
177449    +                    series x=decile y=_minp_; series x=decile y=_targetmin_;
177450    +                    rowaxis grid; colaxis grid;
177451    +                run; quit;
177452    +            %end;
177453    +            %if "&var__maxp_" ne " " %then %do ;
177454    +                proc sgpanel data=_tmp_emrp;
177455    +                    panelby datarole;
177456    +                    series x=decile y=_maxp_; series x=decile y=_targetmax_;
177457    +                    rowaxis grid; colaxis grid;
177458    +                run; quit;
177459    +            %end;
177460    +        %end;
177462    +        title1; title2; title3;
177463    +    %end;
177465    +%mend;
177468    +%macro EM_REPORT_LATTICE();
177470    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177472    +    %let numx = 1;
177473    +    %let numy = 1;
177475    +    proc sql noprint;
177476    +        %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do;
177477    +            select count(distinct &EM_REPORT_KEY_LATTICEX) into :numx from
177477   !+&pdat.&EM_REPORT_KEY_WHERECLAUSE;
177478    +        %end;
177479    +        %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do;
177480    +            select count(distinct &EM_REPORT_KEY_LATTICEY) into :numy from
177480   !+&pdat.&EM_REPORT_KEY_WHERECLAUSE;
177481    +        %end;
177482    +    quit;
177484    +    %let numrows=&numy;
177485    +    %let numcols=&numx;
177486    +    %let totalnum = %eval(&numx * &numy);
177488    +    %if &totalnum gt 6 %then %do;
177489    +        %if &totalnum le 18 %then %let numcols=3;
177490    +        %else %if &totalnum le 24 %then %let numcols=4;
177491    +        %else %if &totalnum le 30 %then %let numcols=5;
177492    +        %else %let numcols=3;
177493    +    %end;
177495    +    %if &totalnum gt 6 %then %do;
177496    +        %let numrows  = %sysevalf(&totalnum / &numcols);
177497    +        %let numrows  = %sysfunc(ceil(&numrows));
177498    +        %if &numrows ge 6 %then %let numrows=6;
177499    +    %end;
177501    +    %if (("&EM_REPORT_KEY_LATTICETYPE" eq "BAR") OR ("&EM_REPORT_KEY_LATTICETYPE" eq
177501   !+ "HISTOGRAM"))
177502    +    %then %do;
177504    +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3"
177504   !+;
177505    +        %if "&em_report_key_whereclause" ne "" %then %do ;
177506    +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE,
177506   !+&em_report_key_where))";
177507    +        %end;
177509    +        proc sgpanel data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
177510    +            panelby
177511    +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do;
177511   !+&EM_REPORT_KEY_LATTICEY %end;
177512    +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do;
177512   !+&EM_REPORT_KEY_LATTICEX %end;
177513    +              /
177514    +                %if &totalnum ge 5 %then %do; columns=&numcols rows=&numrows
177514   !+/*novarname*/ %end;
177515    +                uniscale=column
177516    +            ;
177517    +            /* originally using frequency so keeping this here; */
177518    +            /* eventrate plot in binning sets y var as response so added y as well
177518   !+*/
177520    +            %if "&EM_REPORT_KEY_LATTICETYPE" eq "HISTOGRAM" %then %do;
177521    +                %if "&EM_REPORT_KEY_FREQUENCY" eq "" %then %do;
177522    +                    histogram &EM_REPORT_KEY_X;
177523    +                %end;
177524    +                %else %do;
177525    +                    histogram &EM_REPORT_KEY_X / freq = &EM_REPORT_KEY_FREQUENCY;
177526    +                %end;
177527    +            %end;
177528    +            %else %do;
177529    +                %if "%upcase(&EM_REPORT_KEY_ORIENTATION)" eq "HORIZONTAL"
177530    +                %then %do; hbar %end;
177531    +                %else %do; vbar %end;
177532    +                    &EM_REPORT_KEY_X /
177533    +                    %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do;
177533   !+response=&EM_REPORT_KEY_FREQUENCY %end;
177534    +                    %if "&EM_REPORT_KEY_Y" ne ""         %then %do;
177534   !+response=&EM_REPORT_KEY_Y         %end;
177535    +                    %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %do;
177535   !+group=&EM_REPORT_KEY_SUBGROUP     %end;
177536    +                        %else %if "&EM_REPORT_KEY_GROUP" ne ""  %then %do;
177536   !+group=&EM_REPORT_KEY_GROUP %end;
177537    +                ;
177538    +            %end;
177539    +            colaxis grid fitpolicy=rotatethin /* discreteorder=data */;
177540    +            rowaxis grid ;
177541    +        run; quit;
177543    +        /* special treatments */
177544    +        %if "&EM_REPORT_KEY_DESCRIPTION" eq "EVENTRATE" %then %do ;
177545    +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq
177545   !+"Y")) %then %do;
177547    +                %let wtevexist=0;
177548    +                %let dsid = %sysfunc(open(work.pdl));
177549    +                %if &dsid %then %do;
177550    +                    %let wtevexist = %sysfunc(VARNUM(&dsid, wtev));
177551    +                %end;
177552    +                %if &dsid %then %let dsid = %sysfunc(close(&dsid));
177554    +                %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_desc
177554   !+ription);
177556    +                proc print data=&pdat.&EM_REPORT_KEY_WHERECLAUSE noobs label
177556   !+contents='';
177557    +                    var display_var _label_ _group_ role eventRate
177558    +                        %if &wtevexist ne 0 %then %do; wtev %end;;
177559    +                run;
177560    +            %end;
177561    +        %end;
177562    +    %end;
177563    +    %else %if (("&EM_REPORT_KEY_LATTICETYPE" eq "LINEPLOT") or
177563   !+("&EM_REPORT_KEY_LATTICETYPE" eq "PLOT")) %then %do;
177565    +        proc sort data=&pdat.&EM_REPORT_KEY_WHERECLAUSE out=_tmp_pdl;
177566    +            by
177567    +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do;
177567   !+&EM_REPORT_KEY_LATTICEY %end;
177568    +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do;
177568   !+&EM_REPORT_KEY_LATTICEX %end;
177569    +            ;
177570    +        run;
177572    +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3"
177572   !+;
177573    +        %if "&em_report_key_whereclause" ne "" %then %do ;
177574    +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE,
177574   !+&em_report_key_where))";
177575    +        %end;
177577    +        proc sgpanel data=_tmp_pdl;
177578    +            panelby
177579    +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do;
177579   !+&EM_REPORT_KEY_LATTICEY %end;
177580    +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do;
177580   !+&EM_REPORT_KEY_LATTICEX %end;
177581    +              /
177582    +                %if &totalnum ge 5 %then %do; columns=&numcols rows=&numrows
177582   !+/*novarname*/ %end;
177583    +                uniscale=column
177584    +            ;
177585    +            %let i = 1;
177586    +            %do %while ("%scan(&EM_REPORT_KEY_Y,&i,' ')" ne "");
177587    +                %let thisY=%scan(&EM_REPORT_KEY_Y,&i,' ');
177588    +                %let i = %eval(&i+1);
177589    +                series x=&EM_REPORT_KEY_X y=&thisY
177590    +                    %if "&EM_REPORT_KEY_GROUP" ne "" %then %do; /
177590   !+group=&EM_REPORT_KEY_GROUP %end;
177591    +                ;
177592    +            %end;
177593    +            %if "&EM_REPORT_KEY_Y2" ne "" %then %do;
177594    +                series x=&EM_REPORT_KEY_X y=&EM_REPORT_KEY_Y2
177595    +                    %if "&EM_REPORT_KEY_GROUP" ne "" %then %do; /
177595   !+group=&EM_REPORT_KEY_GROUP %end;
177596    +                ;
177597    +            %end;
177598    +            %if "&EM_REPORT_KEY_YREF" ne "" %then %do; refline &EM_REPORT_KEY_YREF /
177598   !+ axis = y; %end;
177599    +            %if "&EM_REPORT_KEY_XREF" ne "" %then %do; refline &EM_REPORT_KEY_XREF /
177599   !+ axis = x; %end;
177600    +            colaxis grid fitpolicy=rotatethin;
177601    +            rowaxis grid;
177602    +        run; quit;
177603    +    %end;
177605    +%mend EM_REPORT_LATTICE;
177607    +/*---------------------------------------------------------*/
177608    + * EM_REPORT_SCOREDIST2 ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_SCOREDIST2 ;
177609    + *     Score Distribution 2;
MPRINT(EM_REPORT_CREATE):   * Score Distribution 2;
177610    +/*---------------------------------------------------------*/
177612    +%macro EM_REPORT_SCOREDIST2() ;
177614    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177616    +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
177618    +    proc sgpanel data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
177619    +        panelby
177620    +            %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY
177620   !+%end;
177621    +            %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX
177621   !+%end;
177622    +          / rows=1 uniscale=row layout=lattice
177623    +        ;
177624    +        vbar &EM_REPORT_KEY_X
177625    +            %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do; / response=count %end;
177626    +        ;
177627    +        colaxis fitpolicy=rotatethin;
177628    +    run; quit;
177630    +%mend EM_REPORT_SCOREDIST2;
177632    +/*---------------------------------------------------------*/
177633    + * EM_REPORT_SCOREDIST ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_SCOREDIST ;
177634    + *     Score Distribution ;
MPRINT(EM_REPORT_CREATE):   * Score Distribution ;
177635    +/*---------------------------------------------------------*/
177637    +%macro EM_REPORT_SG4SCOREDIST(y1=,y2=,str1=,str2=,rowstr=);
177638    +    proc sgpanel data=_tmpdat;
177639    +        panelby datarole;
177640    +        %if "&y1" ne " " %then %do;
177641    +            series x=score y=&y1 / legendlabel="%sysfunc(sasmsg(sashelp.dmine,
177641   !+&str1, NOQUOTE))";
177642    +        %end;
177643    +        %if "&y2" ne " " %then %do;
177644    +            series x=score y=&y2 / legendlabel="%sysfunc(sasmsg(sashelp.dmine,
177644   !+&str2, NOQUOTE))";
177645    +        %end;
177646    +        rowaxis grid label="%sysfunc(sasmsg(sashelp.dmine, &rowstr, NOQUOTE))";
177647    +        colaxis grid;
177648    +    run; quit;
177649    +%mend;
177651    +%macro EM_REPORT_SCOREDIST(data=) ;
177653    +    data _tmp_scoredist;
177654    +        set &EM_REPORT_LIB..&EM_REPORT_KEY_FILE.&EM_REPORT_KEY_WHERECLAUSE;
177655    +    run;
177657    +    proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum name) noprint;
177658    +    run;
177660    +    /*--------------------------------------------------------------------------*/
177662    +    %let var_targetMean = ;
177663    +    %let var_targetMax = ;
177664    +    %let var_targetMin = ;
177665    +    %let is_cat = 0;
177666    +    %let modeldescnum = 0;
177667    +    %let loopnum = 0;
177668    +    %let has_where = 0;
177669    +    %let has_target = 0;
177671    +    data _null_;
177672    +        set _tmp_content;
177673    +        name=strip(upcase(name));
177674    +        if name eq 'MODELDESCRIPTION'   then call symput('modeldescnum',
177674   !+put(varnum,6.));
177675    +        if name eq '_LOOP_'             then call symput('loopnum',
177675   !+put(varnum,6.));
177676    +        if name eq '_WHERE_'            then call symput('has_where',     '1');
177677    +        if name eq '_TARGET_'           then call symput('has_target',    '1');
177678    +        if name eq '_TARGETMEAN_'       then call symput('var_targetMean',name);
177679    +        if name eq '_TARGETMAX_'        then call symput('var_targetMax', name);
177680    +        if name eq '_TARGETMIN_'        then call symput('var_targetMin', name);
177681    +        if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat',        '1');
177682    +    run;
177684    +    /*--------------------------------------------------------------------------*/
177686    +    %if (&modeldescnum eq 0) and (&loopnum eq 0) %then %do;
177687    +        %let modelvar = ;
177688    +        %let nmodels = 1;
177689    +        %let modeldat1 = _tmp_scoredist;
177690    +    %end;
177691    +    %else %do;
177693    +        %if &loopnum gt 0
177694    +            %then %do;
177695    +                proc sql noprint;
177696    +                    select count(*) into :nn1 from _tmp_scoredist;
177697    +                    select count(*) into :nn2 from _tmp_scoredist where _where_ is
177697   !+missing;
177698    +                quit;
177699    +                %if &nn1 ne &nn2
177700    +                    %then %let modelvar = _where_;
177701    +                    %else %let modelvar = target;
177702    +            %end;
177703    +            %else %let modelvar = model;
177705    +        %let nmodels = 1;
177706    +        proc sql noprint;
177707    +            select count(distinct &modelvar) into :nmodels from _tmp_scoredist;
177708    +            select distinct &modelvar into :cond1-:cond%left(&nmodels) from
177708   !+_tmp_scoredist;
177709    +        quit;
177711    +        %do d = 1 %to &nmodels;
177712    +            %let modeldat&d = %str(_tmp_scoredist(where=(&modelvar eq "&&&cond&d")))
177712   !+;
177713    +        %end;
177714    +    %end;
177716    +    /* --- loop through all models or _where_ for plots---*/
177718    +    %do d = 1 %to &nmodels;
177720    +        proc sort data=&&&modeldat&d out=_tmpdat;
177721    +            by &modelvar target datarole;
177722    +        run;
177724    +        title1 "&EM_REPORT_TTL1";
177725    +        title2 "&EM_REPORT_TTL2";
177726    +        title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistsingle_title, NOQUOTE,
177726   !+&em_report_key_where))";
177727    +        %if &nmodels gt 1 %then %do; title4 "&&&cond&d"; %end;
177729    +        %if &is_cat eq 1 %then %do;
177730    +            %EM_REPORT_SG4SCOREDIST(y1=percentageofevents, y2=percentageofnonevents,
177731    +                str1=rpt_events_vlabel, str2=rpt_nonevents_vlabel,
177731   !+rowstr=assmt_percent_vlabel);
177732    +            %EM_REPORT_SG4SCOREDIST(y1=cumulativepercentageofevents,
177732   !+y2=cumulativepercentageofnonevents,
177733    +                str1=rpt_events_vlabel, str2=rpt_nonevents_vlabel,
177733   !+rowstr=assmt_percentC_vlabel);
177734    +        %end;
177735    +        %else %do;
177736    +            %EM_REPORT_SG4SCOREDIST(y1=_meanP_, y2=&var_targetMean,
177737    +                str1=rpt_predicted_vlabel, str2=rpt_target_vlabel,
177737   !+rowstr=rpt_mean_vlabel);
177738    +            %EM_REPORT_SG4SCOREDIST(y1=_meanP_, y2=&var_targetMax,
177739    +                str1=rpt_predicted_vlabel, str2=rpt_target_vlabel,
177739   !+rowstr=rpt_maximum_vlabel);
177740    +        %end;
177742    +        proc delete data=_tmpdat; run;
177743    +        title1; title2; title3; title4;
177744    +    %end;
177746    +    /* --- loop through all models or _where_ for prints ---*/
177748    +    %do d = 1 %to &nmodels;
177750    +        proc sort data=&&&modeldat&d out=_tmpdat;
177751    +            by &modelvar target datarole;
177752    +        run;
177754    +        title1; title2; title3;
177755    +        %EM_REPORT_TABLETEXT(subtitle=rpt_scoredistnone_title);
177757    +        %if &is_cat eq 1 %then %do;
177758    +            proc print data=_tmpdat noobs label contents='';
177759    +                by &modelvar target datarole;
177760    +                var p_label numberofevents percentageofevents percentageofnonevents
177761    +                    cumulativepercentageofevents cumulativepercentageofnonevents ;
177762    +            run;
177763    +        %end;
177764    +        %else %do;
177765    +            proc print data=_tmpdat noobs label contents='';
177766    +                by &modelvar target datarole;
177767    +                var p_label _meanP_ _maxP_ _minP_ &var_targetMean &var_targetMax
177767   !+&var_targetMin;
177768    +            run;
177769    +        %end;
177770    +    %end;
177772    +%mend EM_REPORT_SCOREDIST;
177775    +%macro EM_REPORT_MULTIPLY2PLOT;
177777    +    data _tmp_dat;
177778    +        set &EM_REPORT_LIB..&EM_REPORT_KEY_FILE.&EM_REPORT_KEY_WHERECLAUSE;
177779    +    run;
177781    +    proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
177782    +    run;
177784    +    %let has_datarole = 0;
177785    +    data _null_;
177786    +        set _tmp_content;
177787    +        name=strip(upcase(name));
177788    +        if name eq "DATEROLE" then call symput('has_datarole','1');
177789    +    run;
177791    +    %if &has_datarole eq 1 %then %do;
177792    +        proc sql noprint;
177793    +            select count(distinct datarole) into :ndataroles from _tmp_dat;
177794    +            select distinct datarole into :drole1-:drole%left(&ndataroles) from
177794   !+_tmp_dat;
177795    +        quit;
177796    +    %end;
177797    +    %else %do;
177798    +        %let ndataroles = 1;
177799    +    %end;
177801    +    %if &ndataroles gt 1 %then %do;
177802    +        %do d=1 %to &ndataroles ;
177804    +            proc sort data=_tmp_dat(where=(datarole eq "&&&drole&d")) out=_tmp_empd;
177805    +                by datarole &EM_REPORT_KEY_X;
177806    +            run;
177808    +            title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3
177808   !+"&EM_REPORT_TTL3";
177809    +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitlethree_title,
177809   !+NOQUOTE, &&&drole&d))";
177811    +            proc sgplot data=_tmp_empd;
177812    +                series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y   ;
177813    +                series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y2 / y2axis ;
177814    +                %if "&EM_REPORT_KEY_YREF"  ne "" %then %do; refline
177814   !+&EM_REPORT_KEY_YREF  / axis = y;  %end;
177815    +                %if "&EM_REPORT_KEY_Y2REF" ne "" %then %do; refline
177815   !+&EM_REPORT_KEY_Y2REF / axis = y2; %end;
177816    +            run; quit;
177817    +        %end;
177818    +    %end;
177819    +    %else %do;
177820    +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3"
177820   !+;
177821    +        proc sgplot data=_tmp_dat;
177822    +            series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y   ;
177823    +            series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y2 / y2axis ;
177824    +            %if "&EM_REPORT_KEY_YREF"  ne "" %then %do; refline &EM_REPORT_KEY_YREF
177824   !+ / axis = y;  %end;
177825    +            %if "&EM_REPORT_KEY_Y2REF" ne "" %then %do; refline &EM_REPORT_KEY_Y2REF
177825   !+ / axis = y2; %end;
177826    +        run; quit;
177827    +    %end;
177829    +    title1; title2; title3; title4;
177831    +%mend EM_REPORT_MULTIPLY2PLOT;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_printmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_PRINTMACROS.SOURCE.
177832    +/*---------------------------------------------------------*/
177833    + * EM_REPORT_NODE_TEXT ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_NODE_TEXT ;
177834    + *      return the text label for a given node ;
MPRINT(EM_REPORT_CREATE):   * return the text label for a given node ;
177835    +/*---------------------------------------------------------*/
177837    +%macro EM_REPORT_NODE_TEXT(nodeid);
177838    +    %global EM_REPORT_NODE_TEXT ;
177839    +    %if not %sysfunc(exist(&em_report_lib..EM_NODEID)) %then %goto skip ;
177840    +    data _null_ ;
177841    +        set &em_report_lib..EM_NODEID ;
177842    +        where upcase(strip(nodeid)) eq upcase(strip("&nodeid")) ;
177843    +        call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
177844    +    run;
177845    +    %skip:
177846    +%mend EM_REPORT_NODE_TEXT;
177848    +/*---------------------------------------------------------*/
177849    + * EM_REPORT_TABLETEXT;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_TABLETEXT;
177850    + *      print the ods texts in front of a table;
MPRINT(EM_REPORT_CREATE):   * print the ods texts in front of a table;
177851    +/*---------------------------------------------------------*/
177853    +%macro EM_REPORT_TABLETEXT(subtitle=);
177854    +%if %substr(%upcase(%sysfunc(strip(&subtitle))), 1, 19) eq VIEWS_DESCRIPTIONS_ %then
177854   !+ %do;
177855    +    ods &EM_REPORT_FORMAT text=" ";
177856    +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
177856   !+rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
177857    +    %let thisDVD = dmine;
177859    +    %let msg0 = views_descriptions_&em_report_key_description;
177860    +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine,
177860   !+views_descriptions_&em_report_key_description, NOQUOTE));
177861    +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
177862    +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine,
177862   !+views_descriptions_&em_report_key_description, NOQUOTE));
177863    +    %end;
177864    +    %else %do;
177865    +        %let msg2=views_descriptions_&em_report_key_description;
177866    +    %end;
177868    +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&msg0))"
177869    +    %then %do;
177870    +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
177870   !+views_descriptions_&em_report_key_description, NOQUOTE))";
177871    +    %end;
177872    +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&msg0))"
177873    +    %then %do;
177874    +        %if %sysfunc(exist(sashelp.tmine)) %then %do;
177875    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.tmine,
177875   !+views_descriptions_&em_report_key_description, NOQUOTE))";
177876    +            %let thisDVD = tmine;
177877    +        %end;
177878    +    %end;
177879    +    %else %do;
177880    +        ods &EM_REPORT_FORMAT text="&em_report_key_description";
177881    +    %end;
177883    +    ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title,
177883   !+NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.&thisDVD,
177883   !+&subtitle, NOQUOTE))";
177884    +%end;
177885    +%else %do;
177886    +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine, &subtitle, NOQUOTE));
177887    +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
177888    +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine, &subtitle, NOQUOTE));
177889    +    %end;
177890    +    %else %do;
177891    +        %let msg2=%sysfunc(sasmsg(sashelp.dmine, &subtitle, NOQUOTE));
177892    +    %end;
177894    +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&subtitle))"
177895    +    %then %do;
177896    +        %let thisDVD = dmine;
177897    +    %end;
177898    +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&subtitle))"
177899    +    %then %do;
177900    +        %let thisDVD = tmine;
177901    +    %end;
177902    +    %else %do;
177903    +        %let thisDVD = dmine;
177904    +    %end;
177906    +    ods &EM_REPORT_FORMAT text=" ";
177907    +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
177907   !+rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
177908    +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.&thisDVD, &subtitle,
177908   !+NOQUOTE))";
177909    +    ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title,
177909   !+NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.&thisDVD,
177909   !+&subtitle, NOQUOTE))";
177910    +%end;
177911    +%mend EM_REPORT_TABLETEXT;
177913    +/*---------------------------------------------------------*/
177914    + *  Print comparison of model fit stats;
MPRINT(EM_REPORT_CREATE):   * Print comparison of model fit stats;
177915    + *      used by EM_REPORT_DATA();
MPRINT(EM_REPORT_CREATE):   * used by EM_REPORT_DATA();
177916    +/*---------------------------------------------------------*/
177918    +%macro EM_REPORT_COMPAREFIT(data=) ;
177919    +    proc sort data=&data out=sd(drop=stat) ;
177920    +        by target datarole ;
177921    +    run ;
177922    +    %EM_REPORT_TABLETEXT(subtitle=rpt_modelfitcomparison_title);
177923    +    proc print data=sd noobs label contents='' ;
177924    +        by target datarole ;
177925    +        label label="%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat,
177925   !+NOQUOTE))";
177926    +    run;
177927    +%mend EM_REPORT_COMPAREFIT;
177929    +/*---------------------------------------------------------*/
177930    + * EM_REPORT_CLASSIFYTABT;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_CLASSIFYTABT;
177931    + *      print the table in a lattice plot of classification charts;
MPRINT(EM_REPORT_CREATE):   * print the table in a lattice plot of classification charts;
177932    +/*---------------------------------------------------------*/
177934    +%macro EM_REPORT_CLASSIFYTAB();
177936    +    %if "&em_report_key_whereclause" eq "" %then %do ;
177937    +        %EM_REPORT_TABLETEXT(subtitle=rpt_eventclassification_title);
177938    +    %end; %else %do;
177939    +        ods &EM_REPORT_FORMAT text=" ";
177940    +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
177940   !+rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
177941    +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
177941   !+rpt_eventclasswhere_title, NOQUOTE, &em_report_key_where))";
177942    +        ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title,
177942   !+NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.dmine,
177942   !+rpt_eventclasswhere_title, NOQUOTE, &em_report_key_where))";
177943    +    %end;
177945    +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
177947    +    proc print data=&pdat.&EM_REPORT_KEY_WHERECLAUSE noobs label contents='';
177948    +        label CORRECTTEXT= "%sysfunc(sasmsg(sashelp.dmine, rpt_state_vlabel,
177948   !+NOQUOTE))" percent="%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE))" ;
177949    +        by target datarole ;
177950    +        var from into correcttext count percent ;
177951    +    run;
177953    +%mend EM_REPORT_CLASSIFYTAB;
177955    +/*---------------------------------------------------------*/
177956    + * EM_REPORT_PROPERTIES;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_PROPERTIES;
177957    + *     print the properties table;
MPRINT(EM_REPORT_CREATE):   * print the properties table;
177958    +/*---------------------------------------------------------*/
177960    +%macro EM_REPORT_PROPERTIES(catalog=, dsname=work.properties);
177961    +    %if %sysfunc(cexist(&catalog)) %then %do;
177962    +        proc display cat=sashelp.emutil.prop2Ds.scl;
177963    +        run;
177964    +        %EM_REPORT_TABLETEXT(subtitle=rpt_props_title);
177965    +        %EM_REPORT_makeMultiColumn(dat=work.properties, vars=name value default,
177965   !+split=3);
177966    +        proc delete data=work.properties; run; quit;
177967    +    %end;
177968    +%mend EM_REPORT_PROPERTIES;
177970    +/*---------------------------------------------------------*/
177971    + * EM_REPORT_DATASOURCE ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_DATASOURCE ;
177972    + *     Report on data set starting a flow ;
MPRINT(EM_REPORT_CREATE):   * Report on data set starting a flow ;
177973    +/*--------------------------------------------------------*/
177974    +%macro EM_REPORT_DATASOURCE();
177976    +    proc transpose data=&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTMETADEFAULT
177976   !+out=temp_source;
177977    +        var _all_;
177978    +        format crdate NLDATM24.0 modate NLDATM24.0;
177979    +    run;
177981    +    /* prepare the data source table */
177982    +    data temp_source;
177983    +        set temp_source;
177984    +        rename col1 = value;
177985    +        col1 = right(col1);
177986    +        format label $64.;
177987    +        label
177988    +            col1  = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel, NOQUOTE))"
177989    +            label = "%sysfunc(sasmsg(sashelp.dmine, rpt_attribute_vlabel, NOQUOTE))"
177990    +        ;
177991    +        *** get the localized label column;
177992    +        _name_=upcase(_name_) ;
177993    +        if _name_ eq "MEMNAME"         then label="%sysfunc(sasmsg(sashelp.dmine,
177993   !+rpt_dataname_vlabel, NOQUOTE))" ;
177994    +        if _name_ eq "MEMTYPE"         then label="%sysfunc(sasmsg(sashelp.dmine,
177994   !+rpt_datatype_vlabel, NOQUOTE))" ;
177995    +        if _name_ eq "MEMLABEL"        then label="%sysfunc(sasmsg(sashelp.dmine,
177995   !+rpt_datalabel_vlabel, NOQUOTE))" ;
177996    +        if _name_ eq "TYPEMEM"         then delete ;
177997    +        if _name_ eq "ENGINE"          then label="%sysfunc(sasmsg(sashelp.dmine,
177997   !+rpt_engine_vlabel, NOQUOTE))" ;
177998    +        if _name_ eq "CRDATE"          then label="%sysfunc(sasmsg(sashelp.dmine,
177998   !+rpt_crdate_vlabel, NOQUOTE))" ;
177999    +        if _name_ eq "MODATE"          then label="%sysfunc(sasmsg(sashelp.dmine,
177999   !+rpt_datemode_vlabel, NOQUOTE))" ;
178000    +        if _name_ eq "NOBS"            then label="%sysfunc(sasmsg(sashelp.dmine,
178000   !+rpt_numrows_vlabel, NOQUOTE))" ;
178001    +        if _name_ eq "NCOLS"           then label="%sysfunc(sasmsg(sashelp.dmine,
178001   !+rpt_numcols_vlabel, NOQUOTE))" ;
178002    +        if _name_ eq "NBYTES"          then label="%sysfunc(sasmsg(sashelp.dmine,
178002   !+rpt_datasize_vlabel, NOQUOTE))" ;
178003    +        if _name_ eq "ROLE"            then label="%sysfunc(sasmsg(sashelp.dmine,
178003   !+meta_role_vlabel, NOQUOTE))" ;
178004    +        if _name_ eq "USEEXTERNALDATA" then delete ;
178005    +        if _name_ eq "SAMPLINGRATE"    then delete ;
178006    +        if _name_ eq "SEGMENT"         then label="%sysfunc(sasmsg(sashelp.dmine,
178006   !+rpt_segment_vlabel, NOQUOTE))" ;
178007    +        if _name_ eq "LIBNAME"         then label="%sysfunc(sasmsg(sashelp.dmine,
178007   !+rpt_datalib_vlabel, NOQUOTE))" ;
178008    +    run;
178010    +    %EM_REPORT_TABLETEXT(subtitle=rpt_dataattributes_title);
178011    +    %EM_REPORT_makeMultiColumn(dat=temp_source, vars=label value, split=3);
178012    +    proc delete data=temp_source; run; quit;
178014    +%mend EM_REPORT_DATASOURCE ;
178016    +*---------------------------------------------------------*/
178017    + *  a utility macro for split table into multiple columns ;
MPRINT(EM_REPORT_CREATE):   *---------------------------------------------------------*/ * a
utility macro for split table into multiple columns ;
178018    +/*---------------------------------------------------------*/
178020    +%macro em_report_makeMultiColumn(dat=,vars=,split=2);
178022    +    %let vars = %upcase(&vars);
178024    +    /*--- check if the variable existing in the table ---*/
178025    +    proc contents data=&dat out=_tmpms_content(keep=name) noprint;
178026    +    run;
178028    +    %let k = 1;
178029    +    %let vars2 = ;
178030    +    %do %while("%scan(&vars,&k,' ')" ne "");
178031    +        data _null_;
178032    +            set _tmpms_content;
178033    +            name=strip(upcase(name));
178034    +            if name eq "%scan(&vars,&k,' ')"
178035    +                then call symput('vars2',catx(' ',symget('vars2'),name));
178036    +        run;
178037    +        %let k = %eval(&k+1);
178038    +    %end;
178040    +    /*--- count the valid variables ---*/
178041    +    %let k = 1;
178042    +    %do %while("%scan(&vars2,&k,' ')" ne "");
178043    +        %let var&k = %scan(&vars2,&k,' ');
178044    +        %let k = %eval(&k+1);
178045    +    %end;
178046    +    %let numvars = %eval(&k-1);
178048    +    /* --- split the table ---*/
178049    +    %let dsid = %sysfunc(open(&dat));
178050    +    %let numobs = %sysfunc(attrn(&dsid, NOBS));
178051    +    %let numrows = %sysfunc(round(%sysevalf(&numobs/&split)));
178052    +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
178054    +    data %do d = 1 %to &split; _tmpms_dat&d.(rename=(%do k = 1 %to &numvars;
178054   !+&&&var&k=&&&var&k..&d %end;)) %end;;
178055    +        set &dat;
178056    +        keep &vars2 numrow;
178057    +        %do d = 1 %to &split;
178058    +            if _n_ gt %eval(&numrows*(&d-1)) and _n_ le %eval(&numrows*&d)
178059    +                then do; numrow = _n_-&numrows*(&d-1); output _tmpms_dat&d; end;
178060    +        %end;
178061    +    run;
178063    +    %do d = 1 %to &split;
178064    +        proc sort data=_tmpms_dat&d; by numrow; run;
178065    +    %end;
178067    +    /*--- merge and print ---*/
178068    +    data _tmpms_alldat;
178069    +        merge %do d = 1 %to &split; _tmpms_dat&d %end;;
178070    +        by numrow;
178071    +    run;
178073    +    proc print data=_tmpms_alldat noobs label contents='';
178074    +        var %do d = 1 %to &split; %do k = 1 %to &numvars; &&&var&k..&d %end; %end;;
178075    +    run;
178077    +    proc datasets lib=work nolist;
178078    +        delete _tmpms_:;
178079    +    run; quit;
178081    +%mend em_report_makeMultiColumn;
178083    +*---------------------------------------------------------*/
178084    + *  basic print a data table ;
MPRINT(EM_REPORT_CREATE):   *---------------------------------------------------------*/ *
basic print a data table ;
178085    +/*---------------------------------------------------------*/
178086    +%macro EM_REPORT_DATA(maxobs=100);
178088    +%local pd desc ;
178089    +%let pd=&em_report_lib..&EM_REPORT_KEY_FILE ;
178090    +%IF not %SYSFUNC(EXIST(&pd)) %then %goto skip;
178092    +%if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then
178092   !+%do;
178094    +    %let desc= %upcase(&em_report_key_description) ;
178096    +    %if "&desc" eq "VARIABLES" %then %do;
178097    +        /*--- NOOP: handled globally by EM_REPORT_NODE --*/
178098    +        %goto skip ;
178099    +    %end;
178100    +    %else %if (("&desc" eq "ITEMS") OR ("&desc" eq "OUTAOV16") OR ("&desc" eq
178100   !+"OUTGINT") OR ("&desc" eq "OUTGVAR")
178101    +              OR ("&desc" eq "HISTWEIGHT") OR ("&desc" eq "EMSTAT")) %then %do;;
178102    +        %goto skip;
178103    +    %end;
178104    +    %if (("&desc" eq "SAMPLE") AND (%substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7)
178104   !+ eq GRFEXPL)) %then %do;;
178105    +        %goto skip;
178106    +    %end;
178107    +    %else %if "&desc" eq "MODELDIAGNOSTICS" %then %do;
178109    +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description)
178109   !+;
178111    +        proc print data=&pd(obs=&maxobs) noobs label contents='';
178112    +            by datarole;
178113    +            var cutoff sensitivity_tpr specificity_tnr one_specificity_fpr
178113   !+precision_event
178114    +                precision_non_event ovl_class_rate precision_overall;
178115    +        run ;
178116    +    %end;
178117    +    %else
178118    +    %if "&desc" eq "REPORTFITSTAT" %then %do ;
178120    +        /*--- should switch to proc tabulate ---*/
178121    +        /*--- often there is only one value of the by variable 'target', but there
178121   !+may be several ---*/
178122    +        data pd; set &pd ;
178123    +            where train ne . ;
178124    +            label _NOBS_  = "%sysfunc(sasmsg(sashelp.dmine, stat_nobs_vlabel,
178124   !+NOQUOTE))"
178125    +                  _MISC_  = "%sysfunc(sasmsg(sashelp.dmine, stat_misc_vlabel,
178125   !+NOQUOTE))"
178126    +                  _MAX_   = "%sysfunc(sasmsg(sashelp.dmine, stat_max_vlabel,
178126   !+NOQUOTE))"
178127    +                  _SSE_   = "%sysfunc(sasmsg(sashelp.dmine, stat_sse_vlabel,
178127   !+NOQUOTE))"
178128    +                  _ASE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_ase,
178128   !+NOQUOTE))"
178129    +                  _RASE_  = "%sysfunc(sasmsg(sashelp.dmine, stat_rase_vlabel,
178129   !+NOQUOTE))"
178130    +                  _DIV_   = "%sysfunc(sasmsg(sashelp.dmine, stat_div_vlabel,
178130   !+NOQUOTE))"
178131    +                  _DFT_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dft,
178131   !+NOQUOTE))"
178132    +                  _AIC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_aic,
178132   !+NOQUOTE))"
178133    +                  _MSE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_mse,
178133   !+NOQUOTE))"
178134    +                  _RMSE_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rmse,
178134   !+NOQUOTE))"
178135    +                  _AVERR_ = "%sysfunc(sasmsg(sashelp.dmine, stat_averr_vlabel,
178135   !+NOQUOTE))"
178136    +                  _DFE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfe,
178136   !+NOQUOTE))"
178137    +                  _DFM_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfm,
178137   !+NOQUOTE))"
178138    +                  _ERR_   = "%sysfunc(sasmsg(sashelp.dmine, stat_err_vlabel,
178138   !+NOQUOTE))"
178139    +                  _FPE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_fpe,
178139   !+NOQUOTE))"
178140    +                  _NW_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_nw,
178140   !+NOQUOTE))"
178141    +                  _RFPE_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rfpe,
178141   !+NOQUOTE))"
178142    +                  _SBC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_sbc,
178142   !+NOQUOTE))"
178143    +            ;
178144    +            drop stat ;
178145    +        run;
178147    +        %EM_REPORT_TABLETEXT(subtitle=rpt_modelfitstat_title);
178149    +        proc sort data=pd;
178150    +            by target targetlabel;
178151    +        proc print data=pd noobs label contents='';
178152    +            label label="%sysfunc(sasmsg(sashelp.dmine,
178152   !+rpt_dmneural_label_statlabel, NOQUOTE))" ;
178153    +            by target targetlabel;
178154    +        run;
178156    +    %end ;
178157    +    %else %if "&desc" eq "CLUSMEAN" %then %do;
178159    +        /* determine number of segments to process */
178160    +        %let dsid = %sysfunc(open(&pd));
178161    +        %if &dsid %then %do;
178162    +            %let numseg = %sysfunc(ATTRN(&dsid, NOBS));
178163    +        %end;
178164    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
178166    +        /* transpose data to have a row per segment value */
178167    +        proc transpose data=&pd out=clusmean name=VARIABLE;
178168    +        run;
178170    +        data clusmean;
178171    +            set clusmean;
178172    +            label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,
178172   !+NOQUOTE))"
178173    +                %do i=1 %to &numseg;
178174    +                    %let colname = COL&i;
178175    +                    &colname = "%sysfunc(sasmsg(sashelp.dmine,
178175   !+rpt_segcolname_vlabel, NOQUOTE, &i))"
178176    +                %end;
178177    +            ;
178178    +            if missing(_LABEL_) then _LABEL_ = VARIABLE;
178179    +            if VARIABLE="_SEGMENT_" then delete;
178180    +            drop VARIABLE;
178181    +       run;
178183    +       %EM_REPORT_TABLETEXT(subtitle=rpt_meanstats_title);
178184    +       proc print data=clusmean noobs label contents='' ;  run ;
178186    +    %end;
178187    +    %else %if "&desc" eq "COMPAREFIT" %then %do;
178189    +        %EM_REPORT_COMPAREFIT(data=&pd);
178191    +    %end;
178192    +    %else %if "&desc" eq "FITSTAT" %then %do;
178194    +        /*** only print the fitstat table for MDLCOMP nodes ***/
178195    +        %if %substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq MDLCOMP %then %do;
178197    +            data _null_ ;
178198    +                set &pd (obs=2) end=eof ;
178199    +                if eof then do ;
178200    +                    call symput("_misc_"      , strip(put(_misc_,best.))) ;
178201    +                    call symput("_vmisc_"     , strip(put(_vmisc_,best.))) ;
178202    +                    call symput("_aur_"       , strip(put(_aur_, best.)));
178203    +                    call symput("_gini_"      , strip(put(_gini_, best.)));
178204    +                end;
178205    +            run;
178207    +            %let loopflag  = 0; %let validflag = 0;
178208    +            %let ASEflag   = 0; %let VASEflag  = 0; %let MISCflag  = 0; %let
178208   !+VMISCflag = 0;
178209    +            %let KSflag    = 0; %let VKSflag   = 0; %let AURflag   = 0; %let
178209   !+GINIflag  = 0;
178210    +            %let dsid = %sysfunc(open(&pd));
178211    +            %if &dsid %then %do;
178212    +                %let loopflag  = %sysfunc(VARNUM(&dsid, _LOOP_));
178213    +                %let validflag = %sysfunc(VARNUM(&dsid, VKS));
178214    +                %let ASEflag   = %sysfunc(VARNUM(&dsid, _ASE_));
178215    +                %let MISCflag  = %sysfunc(VARNUM(&dsid, _MISC_));
178216    +                %let KSflag    = %sysfunc(VARNUM(&dsid, KS));
178217    +                %let VASEflag  = %sysfunc(VARNUM(&dsid, _VASE_));
178218    +                %let VMISCflag = %sysfunc(VARNUM(&dsid, _VMISC_));
178219    +                %let VKSflag   = %sysfunc(VARNUM(&dsid, VKS));
178220    +                %let AURflag   = %sysfunc(VARNUM(&dsid, _AUR_));
178221    +                %let GINIflag  = %sysfunc(VARNUM(&dsid, _GINI_));
178222    +            %end;
178223    +            %if &dsid %then %let dsid=%sysfunc(close(&dsid));
178225    +            %EM_REPORT_TABLETEXT(subtitle=rpt_fittable_title);
178227    +            proc print data=&pd(obs=&maxobs) noobs label contents='';
178228    +                id
178229    +                    %if &loopflag ne 0 %then %do; _LOOP_ _WHERE_ %end;
178230    +                    USE PARENT MODEL MODELDESCRIPTION TARGET TARGETLABEL _CRITERION_
178231    +                ;
178232    +                var
178233    +                %if &validflag ne 0 %then %do;
178234    +                    %if &ASEflag ne 0                         %then %do; _ASE_
178234   !+%end;
178235    +                    %if &MISCflag ne 0  and "&_misc_" ne "."  %then %do; _MISC_
178235   !+%end;
178236    +                    %if &KSflag ne 0                          %then %do; KS
178236   !+%end;
178237    +                    %if &VASEflag ne 0                        %then %do; _VASE_
178237   !+%end;
178238    +                    %if &VMISCflag ne 0 and "&_vmisc_" ne "." %then %do; _VMISC_
178238   !+%end;
178239    +                    %if &VKSflag ne 0                         %then %do; VKS
178239   !+%end;
178240    +                %end;
178241    +                %else %do;
178242    +                    %if &ASEflag ne 0                         %then %do; _ASE_
178242   !+%end;
178243    +                    %if &MISCflag ne 0  and "&_misc_" ne "."  %then %do; _MISC_
178243   !+%end;
178244    +                    %if &KSflag ne 0                          %then %do; KS
178244   !+%end;
178245    +                    %if &AURflag ne 0   and "&_aur_" ne "."   %then %do; _AUR_  %end
178245   !+;
178246    +                    %if &GINIflag ne 0  and "&_gini_" ne "."  %then %do; _GINI_
178246   !+%end;
178247    +                %end;
178248    +               ;
178249    +            run;
178250    +        %end;
178251    +        %else %do;
178252    +            %goto skip;
178253    +        %end;
178254    +    %end;
178255    +    %else %if "&desc" eq "RULETABLE" %then %do;
178257    +        %let dsid = %sysfunc(open(&pd));
178258    +        %let printflag = 0;
178259    +        %if &dsid %then %do;
178260    +          %let printflag = %sysfunc(VARNUM(&dsid, EXP_CONF));
178261    +          %let lhandflag = %sysfunc(VARNUM(&dsid, _lhand));
178262    +          %let rhandflag = %sysfunc(VARNUM(&dsid, _rhand));
178263    +        %end;
178264    +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
178266    +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description)
178266   !+;
178268    +        proc print data=&pd(obs=&maxobs) noobs label contents='';
178269    +            %if &printflag ne 0 %then %do;
178270    +                var rule exp_conf support lift count
178271    +                %if &lhandflag ne 0 %then %do; _lhand %end;
178272    +                %if &rhandflag ne 0 %then %do; _rhand %end;
178273    +                ;
178274    +            %end;
178275    +            %else %do;
178276    +                var rule conf support count
178277    +                %if &lhandflag ne 0 %then %do; _lhand %end;
178278    +                %if &rhandflag ne 0 %then %do; _rhand %end;
178279    +                ;
178280    +            %end;
178281    +        run;
178282    +    %end;
178283    +    %else %do ;
178284    +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description)
178284   !+;
178285    +        proc print data=&pd(obs=&maxobs) noobs label contents=''; run ;
178286    +    %end ;
178287    +    %end;
178288    +%skip:
178289    +%mend EM_REPORT_DATA;
178291    +/*---------------------------------------------------------*/
178292    + * EM_REPORT_VARS ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_VARS ;
178293    + * EM_REPORT_VARS_FLIP ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_VARS_FLIP ;
178294    + *     Report on variables used by the node ;
MPRINT(EM_REPORT_CREATE):   * Report on variables used by the node ;
178295    +/*---------------------------------------------------------*/
178296    +%macro EM_REPORT_VARS_FLIP(data=,out=);
178298    +    proc sort data=&data;
178299    +        by descending role level name;
178300    +    run;
178302    +    data &out(keep=role level count names ) ;
178303    +        length role level $16 ;
178304    +        set &data end=eof ;
178305    +        length xrole role $32 count 8 names $200 ;
178306    +        krole= strip(role) !!' * ' !! strip(level) ;
178307    +        retain xrole ; if _n_ eq 1 then xrole=krole ;
178308    +        retain names ; if _n_ eq 1 then names=name ;
178309    +        retain count 0 ending 0 ;
178310    +        count+1 ;
178311    +        role=scan(xrole,1,'*') ;
178312    +        level=scan(xrole,2,'*') ;
178313    +        if xrole ne krole then do ;
178314    +            count=count-1 ;
178315    +            put _n_ "OUTPUT;" ;
178316    +            output ;
178317    +            xrole=krole ; names= strip(name) ;
178318    +            count=1  ; ending=0 ;
178319    +        end ;
178320    +        else if _n_ gt 1 then do ;
178321    +            if length(names) + length(name) lt 196 then
178322    +                names= strip(names) !! ' '  !! strip(name) ;
178323    +            else
178324    +            if not ending then do ;
178325    +                names= strip(names) !! ' ...' ;
178326    +                ending=1 ;
178327    +            end;
178328    +        end;
178329    +        role=scan(xrole,1,'*') ;
178330    +        level=scan(xrole,2,'*') ;
178331    +        if eof and count gt 0 then output ;
178332    +        label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE)) "
178333    +              names = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name,
178333   !+NOQUOTE))"
178334    +              level = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
178335    +              role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))";
178336    +    run ;
178337    +%mend EM_REPORT_VARS_FLIP ;
178339    +%macro EM_REPORT_VARS(varlist=0);
178341    +    %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE))
178342    +        %then %goto skip ;
178344    +    proc sql noprint;
178345    +        select count(*) into :tmp_numvar from
178345   !+&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE;
178346    +    quit;
178348    +    %if &tmp_numvar lt 1 %then %goto skip;
178349    +/*--- 1. get minimal set of vars -----------------------------------------*/
178351    +    data _tmpvl_pdv(drop=use newuse count) ;
178352    +        set &EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE end=eof;
178353    +        length use newuse $1;
178354    +        label
178355    +            name   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name,
178355   !+NOQUOTE))"
178356    +            level  = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
178357    +            role   = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
178358    +            length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel, NOQUOTE))"
178359    +        ;
178360    +        if use eq "" then use="Y";
178361    +        newuse=use;
178362    +        if use eq "D" then do;
178363    +            if role="REJECT" then newuse="N";
178364    +            else if role="INPUT"    then newuse="Y";
178365    +            else if role="CROSSID"  then newuse="Y";
178366    +            else if role="TEXT"     then newuse="Y";
178367    +        end ;
178368    +        if newuse eq "Y" then do ;
178369    +            count+1 ;
178370    +            output;
178371    +        end;
178372    +        if eof then call symput("varcount",put(count,6.)) ;
178373    +    run;
178375    +    proc sort data=_tmpvl_pdv; by name; run ;
178377    +/*--- 2. Summarize the variables -----------------------------------------*/
178379    +    %if &varlist ne 1 or &varcount gt &EM_REPORT_PRINT_MAXVARS %then %do;
178381    +        /* why not update pdv here? mxx */
178382    +        %EM_REPORT_VARS_FLIP(data=_tmpvl_pdv,out=_tmpvl_pds);
178383    +        %EM_REPORT_TABLETEXT(subtitle=rpt_varsummary_title);
178384    +        proc print data=_tmpvl_pds noobs label contents=''; run;
178386    +    %end;
178387    +    %else %do;
178389    +        %if %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._variableset)) %then
178389   !+%do;
178390    +            proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._variableset
178390   !+out=_tmpvl_vs;
178391    +                by name;
178392    +            data _tmpvl_pdv;
178393    +                update _tmpvl_pdv _tmpvl_vs;
178394    +                by name;
178395    +                label
178396    +                    type    = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel,
178396   !+NOQUOTE))"
178397    +                    format  = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel,
178397   !+NOQUOTE))"
178398    +                    creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel,
178398   !+NOQUOTE))"
178399    +                    family  = "%sysfunc(sasmsg(sashelp.dmine, rpt_family_vlabel,
178399   !+NOQUOTE))"
178400    +                    label   = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,
178400   !+NOQUOTE))"
178401    +                ;
178402    +            run;
178403    +        %end;
178405    +        %EM_REPORT_TABLETEXT(subtitle=rpt_varlist_title);
178406    +        proc print data=_tmpvl_pdv noobs label contents='';
178407    +            var name label role level type length format creator;
178408    +        run;
178409    +    %end;
178411    +/*--- 3. for SVM node with EMSTAT table ----------------------------------*/
178413    +    %let emstat_exist = 0;
178414    +    %if %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._emstat)) %then %do;
178415    +        proc sql noprint;
178416    +            select count(*) into :emstat_use from &em_report_lib..&nodeid._emreport
178417    +                where key="DESCRIPTION" and value="EMSTAT" ;
178418    +        quit;
178419    +        %if &emstat_use gt 0 %then %let emstat_exist = 1;
178420    +    %end;
178422    +    %if &emstat_exist eq 1 %then %do;
178424    +        /* check newname column */
178425    +        %let newname_exist = 0;
178426    +        %let newobs = 0;
178427    +        %let tsdsid = %sysfunc(open(work.pdv));
178428    +        %if &tsdsid %then %do;
178429    +            %let tsobs = %sysfunc(ATTRN(&tsdsid, NOBS));
178430    +            %let newobs = %sysfunc(varnum(&tsdsid, NEWNAME));
178431    +            %if &tsobs > 0 AND  &newobs > 0 %then %let newname_exist =1;
178432    +        %end;
178433    +        %if &tsdsid %then %let tsdsid = %sysfunc(close(&tsdsid));
178435    +        %if &newname_exist eq 1 %then %do;
178436    +            data _tmpvl_pdv; set _tmpvl_pdv(drop=name); run;
178437    +            proc sort data=_tmpvl_pdv(rename=(newname=NAME)); by name; run;
178438    +        %end;
178439    +        %else %do;
178440    +            proc sort data=_tmpvl_pdv; by name; run;
178441    +        %end;
178443    +        proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._VARIABLESET out=_tmpvl_v;
178443   !+by name; run;
178445    +        data _tmpvl_pdv ;
178446    +            update _tmpvl_pdv _tmpvl_v;
178447    +            by name;
178448    +            label label="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel,
178448   !+NOQUOTE))";
178449    +        run;
178451    +        proc sort data=_tmpvl_pdv; by name; run;
178452    +        proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._EMSTAT out=_tmpvl_tempsort
178452   !+; by name; run;
178454    +        data _tmpvl_pdv;
178455    +            merge _tmpvl_pdv(keep=name label role level type length format creator
178455   !+family) _tmpvl_tempsort;
178456    +            by name;
178457    +            label type    = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel,
178457   !+NOQUOTE))"
178458    +                  format  = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel,
178458   !+NOQUOTE))"
178459    +                  creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel,
178459   !+NOQUOTE))"
178460    +                  family  = "%sysfunc(sasmsg(sashelp.dmine, rpt_family_vlabel,
178460   !+NOQUOTE))";
178461    +        run;
178463    +        proc sort data=_tmpvl_pdv; by descending role name; run;
178465    +        %EM_REPORT_TABLETEXT(subtitle=rpt_variable_interval_title);
178466    +        proc print data=_tmpvl_pdv(where=(LEVEL="INTERVAL")) noobs label contents=''
178466   !+;
178467    +            var name label role level type length format creator pctmiss min max
178467   !+mean std skewness kurtosis;
178468    +        run;
178470    +        %EM_REPORT_TABLETEXT(subtitle=rpt_variable_class_title);
178471    +        proc print data=_tmpvl_pdv(where=(LEVEL^="INTERVAL")) noobs label
178471   !+contents='';
178472    +            var name label role level type length format creator nlevel pctmiss;
178473    +        run;
178474    +    %end;
178476    +/*--- 4. now get vars created by this node -------------------------------*/
178478    +    %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._CMETA_TRAIN))
178479    +        %then %goto skip;
178481    +    %let pdvxnum = 0;
178483    +    data _tmpvl_pdvx;
178484    +        set &EM_REPORT_LIB..&EM_REPORT_NODEID._CMETA_TRAIN end=eof ;
178485    +        where upcase(creator) eq "&EM_REPORT_NODEID" ;
178486    +        if eof then call symput('pdvxnum',put(_N_,6.));
178487    +        label
178488    +            name   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name,
178488   !+NOQUOTE))"
178489    +            label  = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))"
178490    +            role   = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
178491    +            level  = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
178492    +            type   = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel, NOQUOTE))"
178493    +            length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel, NOQUOTE))";
178494    +    run;
178496    +    %if pdvxnum gt 0 %then %do;
178497    +        %if &varlist ne 1 or &pdvxnum gt &EM_REPORT_PRINT_MAXVARS %then %do ;
178499    +            %EM_REPORT_VARS_FLIP(data=_tmpvl_pdvx,out=_tmpvl_pdvxp) ;
178501    +            proc sql noprint;
178502    +                select count(*) into :nobs from _tmpvl_pdvxp;
178503    +            quit;
178505    +            %if &nobs > 0 %then %do;
178506    +                %EM_REPORT_TABLETEXT(subtitle=rpt_createvarsummary_title);
178507    +                proc print data=_tmpvl_pdvxp noobs label contents=''; run ;
178508    +            %end;
178509    +        %end;
178510    +        %else %do ;
178512    +            %EM_REPORT_TABLETEXT(subtitle=rpt_createvarslist_title);
178513    +            proc print data=_tmpvl_pdvx noobs label contents='';
178514    +                var name label role type length ;
178515    +            run;
178516    +        %end;
178517    +    %end;
178519    +/*------------------------------------------------------------------------*/
178521    +    proc datasets lib=work nolist;
178522    +        delete _tmpvl_:;
178523    +    run; quit;
178524    +    %skip:
178526    +%mend EM_REPORT_VARS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_rpmmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_RPMMACROS.SOURCE.
178528    +%macro EM_REPORT_validSummaryPath(startNodeID =);
178529    +/*--- purpose: detect whether a flow is valid as a summary path ---*/
178531    +    %global EM_REPORT_NODES EM_REPORT_LIB RPM_REPORT_MODELNODE  RPM_REPORT_SCORENODE
178531   !+ RPM_REPORT_MDLCOMP RPM_REPORT_VALIDSUMMARY;
178532    +    %local prednode em_report_mdlOutfit;
178533    +    %let RPM_REPORT_MODELNODE    = ;
178534    +    %let RPM_REPORT_SCORENODE    = ;
178535    +    %let RPM_REPORT_MDLCOMP      = ;
178536    +    %let RPM_REPORT_VALIDSUMMARY = 0;
178538    +    %if &EM_REPORT_NODES eq SUMMARY %then %do;
178540    +        %let predNode=;
178541    +        data _null_ ;
178542    +            set &EM_REPORT_LIB..em_dgraph(where=(to="&startNodeID"));
178543    +            call symput('predNode', strip(from));
178544    +        run;
178545    +        %let predNode = &predNode;
178547    +        /* if predecessor is MDLCOMP, RPM report is valid */
178548    +        /* or if predecessor is SCORE and MODEL node is fed into score, RPM report
178548   !+is valid */
178549    +        /* or if MDLCOMP to SCORE to REPORTER, RPM report is valid, commented xxm */
178550    +        /* or if predecessor is MODEL node, RPM report is valid */
178552    +        %if %upcase(%substr(&prednode,1,7)) eq MDLCOMP %then %do;
178553    +            %let RPM_REPORT_MDLCOMP = &predNode;
178554    +            %let RPM_REPORT_VALIDSUMMARY=1;
178555    +            data _null_;
178556    +                set &EM_REPORT_LIB..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
178557    +                call symput('RPM_REPORT_MODELNODE',strip(model));
178558    +            run;
178559    +        %end;
178560    +        %else %if %upcase(%substr(&prednode,1,5)) eq SCORE %then %do;
178561    +            %let RPM_REPORT_SCORENODE = &prednode;
178562    +            %let prednode = ;
178563    +            data _null_ ;
178564    +                set &EM_REPORT_LIB..em_dgraph(where=(to="&RPM_REPORT_SCORENODE"));
178565    +                call symput('predNode', strip(from));
178566    +            run;
178567    +            %let predNode = &predNode;
178569    +            %if &prednode ne %then %do;
178570    +                %if %upcase(%substr(&prednode,1,7)) eq MDLCOMP %then %do;
178571    +                    %let RPM_REPORT_MDLCOMP = &prednode;
178572    +                    %let RPM_REPORT_VALIDSUMMARY=1;
178573    +                    data _null_;
178574    +                        set
178574   !+&EM_REPORT_LIB..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
178575    +                        call symput('RPM_REPORT_MODELNODE',strip(model));
178576    +                    run;
178577    +                %end;
178578    +                %else %do;
178579    +                    %let em_report_mdlOutfit = &EM_REPORT_LIB..&prednode._emoutfit;
178580    +                    %if %sysfunc(exist(&em_report_mdlOutfit))
178581    +                    %then %do;
178582    +                        %let RPM_REPORT_MODELNODE = &prednode;
178583    +                        %let RPM_REPORT_VALIDSUMMARY=1;
178584    +                    %end;
178585    +                %end;
178586    +            %end;
178587    +        %end;
178588    +        %else %do;
178589    +            %let em_report_mdlOutfit = &em_lib..&prednode._emoutfit;
178590    +            %if %sysfunc(exist(&em_report_mdlOutfit))
178591    +            %then %do;
178592    +                %let RPM_REPORT_MODELNODE = &prednode;
178593    +                %let RPM_REPORT_VALIDSUMMARY=1;
178594    +            %end;
178595    +        %end;
178596    +    %end;
178598    +    %let RPM_REPORT_MODELNODE = &RPM_REPORT_MODELNODE;
178599    +    %let RPM_REPORT_SCORENODE = &RPM_REPORT_SCORENODE;
178600    +    %let RPM_REPORT_MDLCOMP   = &RPM_REPORT_MDLCOMP;
178602    +%mend EM_REPORT_validSummaryPath;
178604    +%macro em_report_summary(runHP=0);
178606    +%global EM_REPORT_SUMMARY_TARGET RPM_REPORT_MDLCOMP RPM_REPORT_MODELNODE;
178607    +%local  IDSNode freqvar;
178609    +%if not %sysfunc(exist(emreportpath)) %then %goto skip ;
178611    +/*--- RPM-1. Identify the modeling node -------------------------------------*/
178613    +%let em_report_modelID = ;
178614    +%let em_report_modeldesc= ;
178616    +%if &RPM_REPORT_MDLCOMP ne %then %do;
178617    +    %let em_report_mdloutfit = &em_lib..&RPM_REPORT_MDLCOMP._emoutfit;
178618    +    %if %sysfunc(exist(&em_report_mdloutfit)) %then %do;
178619    +        data _null_;
178620    +           set &em_lib..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
178621    +           call symput('em_report_modelID',   strip(model));
178622    +           call symput('em_report_modeldesc', strip(modeldescription));
178623    +        run;
178624    +    %end;
178625    +%end;
178626    +%else %if &RPM_REPORT_MODELNODE ne %then %do;
178627    +    %let em_report_mdloutfit = &em_lib..&RPM_REPORT_MODELNODE._emoutfit;
178628    +    %if %sysfunc(exist(&em_report_mdloutfit)) %then %do;
178629    +        %let em_report_modelID   = &RPM_REPORT_MODELNODE;
178630    +        %let em_report_modeldesc = ;
178631    +    %end;
178632    +%end;
178634    +/*--- RPM-2. Retrieve necessary information for the model--------------------*/
178636    +%if &em_report_modelId ne %then %do;
178638    +    /* RPM-2.1 save model information */
178640    +    %EM_GETNAME(key=MODELINFO, type=DATA);
178641    +    data &EM_USER_MODELINFO;
178642    +        format modelID $100. modeldesc $200.;
178643    +        modelid = "&em_report_modelID";
178644    +        modeldesc="&em_report_modeldesc";
178645    +    run;
178647    +    /* RPM-2.2 retrieve warning file if it exists */
178649    +    %let temp = %nrbquote(%sysfunc(PATHNAME(&em_report_lib)));
178650    +    %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
178651    +    %let file = EMWARN.sas;
178652    +    %let warnfile = %nrbquote(&path&em_dsep&em_report_modelId&em_dsep&file);
178654    +    %if "&warnfile" ne "" %then %do;
178655    +        filename x "&warnfile" encoding='utf-8' NOBOM;
178656    +        data _null_;
178657    +            length string $1000;
178658    +            file PRINT;
178659    +            fid = fopen('x');
178660    +            do while (^fread(fid));
178661    +                rc= fget(fid, string, frlen(fid));
178662    +                string = tranwrd(string, "'", "''");
178663    +                if string eq '' then string = ' ';
178664    +                put string;
178665    +            end;
178666    +            fid = fclose(fid);
178667    +            put " ";
178668    +        run;
178669    +        filename x;
178670    +    %end;
178672    +    /* RPM-2.3 retrieve ID nodeid */
178674    +    data _null_;
178675    +        set emreportpath(where=(substr(upcase(strip(nodeid)),1,3) eq "IDS"));
178676    +        call symput("idsnode",strip(nodeid)) ;
178677    +    run;
178679    +    %let idstmeta = &em_lib..&idsnode._emtmetadefault;
178680    +    %let idscmeta = &em_lib..&idsnode._emcmetadefault;
178682    +    %if %sysfunc(exist(&idstmeta)) %then %do;
178683    +        data _null_;
178684    +            set  &em_lib..&idsnode._emtmetadefault;
178685    +            call symput('rpt_rpm_data',    strip(MEMNAME));
178686    +            call symput('rpt_rpm_datalib', strip(LIBNAME));
178687    +            call symput('rpt_rpm_nobs',    strip(NOBS));
178688    +            call symput('rpt_rpm_ncols',   strip(NCOLS));
178689    +        run;
178690    +    %end;
178692    +    /* RPM-2.4 retrieve name of target to use in presense of multiple targets */
178693    +    /* prefer to use the target given by &EM_REPORT_SUMMARY_TARGET        */
178694    +    /* otherwise the last target modelled (by name) will be used          */
178696    +    %let mdlTarget = ;
178698    +    %if "&EM_REPORT_SUMMARY_TARGET" ne "" %then %do;
178699    +        proc sql noprint;
178700    +            select count(*) into :tmpn
178701    +            from &em_lib..&em_report_modelid._variableset;
178702    +                where name eq "&EM_REPORT_SUMMARY_TARGET" and upcase(role) eq
178702   !+"TARGET";
178703    +        quit;
178704    +        %if &tmpn eq 1 %then %let mdlTarget = &EM_REPORT_SUMMARY_TARGET;
178705    +    %end;
178707    +    %if "&mdlTarget" eq "" %then %do;
178708    +        data _null_;
178709    +            set &em_lib..&em_report_modelid._variableset(where=(role="TARGET" and
178709   !+use="Y"));
178710    +            call symput('mdlTarget', strip(name));
178711    +        run;
178712    +    %end;
178714    +    /* RPM-2.5 retrieve name of decmeta from eminfo of the chosen model */
178716    +    data _null_;
178717    +        set &em_lib..&em_report_modelid._eminfo;
178718    +        if KEY="DECMETA" %if "&mdlTarget" ne "" %then %do; and target="&mdlTarget"
178718   !+%end;
178719    +            then  call symput('rpt_rpm_mdldecmeta', strip(data));
178720    +        if KEY="DECDATA" %if "&mdlTarget" ne "" %then %do; and target="&mdlTarget"
178720   !+%end;
178721    +            then  call symput('rpt_rpm_mdldecdata', strip(data));
178722    +    run;
178724    +    /* RPM-2.6 retrieve name of DECISION variable if it exists      */
178725    +    /*       - use this as target var for categorical target        */
178726    +    /*       - otherwise use INTO variable as class target var      */
178727    +    /* RPM-2.7 retrieve target event level, save TARGETINFO table   */
178728    +    /* RPM-2.8 retrieve name of the PREDICTED variable from decmeta */
178729    +    /*       - INTERVAL TARGET ONLY                                 */
178731    +    %let catTarget = ;
178733    +    data _null_;
178734    +        set &rpt_rpm_mdldecmeta;
178735    +        if _type_ eq "INTO"          then call symput('catTarget', strip(variable));
178736    +        if _type_ eq "MODELDECISION" then call symput('catTarget', strip(variable));
178738    +        if _type_ eq "TARGET" then do;
178739    +            call symput('rpt_rpm_eventlvl',    strip(event));
178740    +            call symput('rpt_rpm_targetName',  strip(variable));
178741    +            call symput('rpt_rpm_targetLevel', strip(level));
178742    +            call symput('rpt_rpm_targetLabel', strip(label));
178743    +        end;
178744    +    data _null_;
178745    +        set &rpt_rpm_mdldecmeta;
178746    +        %if "&rpt_rpm_targetLevel" eq "INTERVAL" %then %do;
178747    +            if _type_ eq "PREDICTED"
178748    +                then call symput('rpt_rpm_predvar', strip(variable));
178749    +        %end;
178750    +    run;
178752    +    %EM_GETNAME(key=TARGETINFO, type=DATA);
178753    +    data &EM_USER_TARGETINFO;
178754    +        set &rpt_rpm_mdldecmeta;
178755    +    run;
178757    +    /* RPM-2.9 retrieve freq variable name if it exists */
178759    +    %let freqvar=;
178760    +    data _null_;
178761    +        set &em_lib..&em_report_modelid._variableset(where=(role eq "FREQ"));
178762    +        call symput('freqvar', strip(name));
178763    +    run;
178765    +    /* RPM-2.10 retrieve listing of all inputs into the model */
178766    +    /*     process only when SCORENODE exists                 */
178768    +    %if &RPM_REPORT_SCORENODE ne %then %do;
178770    +        %EM_REGISTER(key=tempvar,  type=DATA);
178771    +        %EM_REGISTER(key=tempmeta, type=DATA);
178772    +        %EM_GETNAME( key=tempvar,  type=DATA);
178773    +        %EM_GETNAME( key=tempmeta, type=DATA);
178775    +        data &EM_USER_tempvar;
178776    +            %if %sysfunc(exist(&em_lib..&rpm_report_scorenode._eminputvars)) %then
178776   !+%do;
178777    +                set
178777   !+&em_lib..&rpm_report_scorenode._eminputvars(where=(scorevar="Y"));
178778    +            %end;
178779    +            %else %do;
178780    +                set &em_lib..&idsnode._variableset(where=(upcase(role)='INPUT')
178780   !+keep=role name);
178781    +            %end;
178782    +        run;
178784    +        proc sql noprint;
178785    +            select count(distinct name) into :n_svars from &EM_USER_tempvar;
178786    +        quit;
178788    +        proc sort data=&EM_USER_tempvar;       by name;
178789    +        proc sort data=&idscmeta out=tempmeta; by name;
178791    +        data &EM_USER_tempmeta;
178792    +            merge &EM_USER_tempvar(in=_a) tempmeta;
178793    +            by name;
178794    +            if _a;
178795    +        run;
178797    +        proc delete data=tempmeta; run;
178798    +    %end;
178800    +    /* RPM-2.11 is HPRPM or not */
178802    +    proc sql noprint;
178803    +        select count(*) into :rpt_rpm_isHP from &em_lib..&idsnode._eminfo
178804    +            where upcase(key) eq 'HPDMSAMPLE';
178805    +    quit;
178807    +    %if &rpt_rpm_isHP ne 0 %then %let rpt_rpm_isHP = 1;
178809    +    /* RPM-2.12 determine if vvn variables are present in ids node */
178811    +    %let vvnflag = 0;
178812    +    %let cmdsid = %sysfunc(open(&idscmeta));
178813    +    %if &cmdsid %then %do;
178814    +        %let newnum = %sysfunc(varnum(&cmdsid, newname));
178815    +        %if &newnum gt 0 %then %let vvnflag = 1;
178816    +    %end;
178817    +    %if &cmdsid %then %let cmdsid = %sysfunc(close(&cmdsid));
178819    +    %if &vvnflag eq 0
178820    +        %then %let name_to_use = name;
178821    +        %else %let name_to_use = newname;
178823    +/* end of 2. Retrieve necessary information for the model */
178824    +%end;
178826    +/***********************************************************************************
178826   !+********/
178828    +%if &em_report_modelId ne  and %sysfunc(exist(&idstmeta)) %then %do;
178830    +    %if &EM_PROPERTY_SUMMARIZATION eq Y %then %do;
178832    +        %EM_GETNAME(key=DATASUM,   type=DATA);
178833    +        %EM_GETNAME(key=TARGETSUM, type=DATA);
178834    +        %EM_GETNAME(key=VARSUM,    type=DATA);
178835    +        %let rpt_rpm_eventlvl = %nrbquote(&rpt_rpm_eventlvl);
178837    +        /* RPM-3.1 - output data summary
178837   !+------------------------------------------------------------------*/
178839    +        data &EM_USER_DATASUM;
178840    +            length stat $200 value $200;
178841    +            label stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel,
178841   !+NOQUOTE))"
178842    +                  value = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel,
178842   !+NOQUOTE))";
178844    +            stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptinputdatasource_vlabel,
178844   !+NOQUOTE))";
178845    +            value = "&rpt_rpm_datalib..&rpt_rpm_data";
178846    +            output;
178848    +            stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetvariable_vlabel,
178848   !+NOQUOTE))";
178849    +            %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
178850    +                value = "%nrbquote(&rpt_rpm_targetLabel)";
178851    +            %end;
178852    +            %else %do;
178853    +                value = "&rpt_rpm_targetName";
178854    +            %end;
178855    +            output;
178857    +            %if "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
178858    +                stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpteventlevel_vlabel,
178858   !+NOQUOTE))";
178859    +                value = "&rpt_rpm_eventlvl";
178860    +                output;
178861    +            %end;
178863    +            stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptobservations_vlabel,
178863   !+NOQUOTE))";
178864    +            value = "&rpt_rpm_nobs";
178865    +            output;
178867    +            stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptorigvars_vlabel,
178867   !+NOQUOTE))";
178868    +            value = "&rpt_rpm_ncols";
178869    +            output;
178871    +            %if &RPM_REPORT_SCORENODE ne %then %do;
178872    +                %if &n_svars ne %then %do;
178873    +                    stat="%sysfunc(sasmsg(sashelp.dmine, rpt_rptselectedvars_vlabel,
178873   !+ NOQUOTE))";
178874    +                    value="&n_svars";
178875    +                    output;
178876    +                %end;
178877    +            %end;
178878    +        run;
178880    +        ods &EM_REPORT_FORMAT text=" ";
178881    +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
178881   !+rpt_rptmodelsummarization_title, NOQUOTE))";
178882    +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
178882   !+rpt_rptdata_title, NOQUOTE))";
178883    +        ods proclabel ="%sysfunc(sasmsg(sashelp.dmine,
178883   !+rpt_rptmodelsummarization_title, NOQUOTE)) %sysfunc(sasmsg(sashelp.dmine,
178883   !+rpt_rptdata_title, NOQUOTE))";
178885    +        proc print data=&EM_USER_DATASUM noobs label style=[outputwidth=50%]; run;
178887    +        /* RPM-3.2 - output target summary
178887   !+-----------------------------------------------------------------*/
178889    +       ods &EM_REPORT_FORMAT text=" ";
178890    +       %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
178891    +           ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
178891   !+rpt_rpttarget_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
178892    +           ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title,
178892   !+NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
178893    +       %end;
178894    +       %else %do;
178895    +           ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
178895   !+rpt_rpttarget_title, NOQUOTE, &rpt_rpm_targetName))";
178896    +           ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title,
178896   !+NOQUOTE, &rpt_rpm_targetName))";
178897    +       %end;
178899    +        %if "&rpt_rpm_targetLevel" ne "INTERVAL"
178900    +        %then %do;
178901    +            /* target summary for for non-interval target */
178903    +            %let useD = N;
178904    +            data _null_;
178905    +                set &rpt_rpm_mdldecmeta(where=(_type_ in ('MATRIX'))) end=eof;
178906    +                if eof then call symput('useD', USE);
178907    +            run;
178909    +            %let useP = N;
178910    +            data _null_;
178911    +                set &rpt_rpm_mdldecmeta(where=(_type_ in ('DECPRIOR'))) end=eof;
178912    +                if eof then call symput('useP', USE);
178913    +            run;
178915    +            data &EM_USER_TARGETSUM;
178916    +                set &rpt_rpm_mdldecdata;
178917    +                label
178918    +                    &rpt_rpm_targetName = "%sysfunc(sasmsg(sashelp.dmine,
178918   !+rpt_rptvalue_vlabel, NOQUOTE))"
178919    +                    count      = "%sysfunc(sasmsg(sashelp.dmine,
178919   !+rpt_rptcount_vlabel, NOQUOTE))"
178920    +                    trainprior = "%sysfunc(sasmsg(sashelp.dmine,
178920   !+rpt_rptdatapercentage_vlabel, NOQUOTE))"
178921    +                    decprior   = "%sysfunc(sasmsg(sashelp.dmine,
178921   !+rpt_rptadjustedperc_vlabel, NOQUOTE))";
178922    +                ;
178923    +                %if &useD eq Y and &useP eq Y %then %do; drop dataprior;
178923   !+%end;
178924    +                %if &useD eq Y and &useP eq N %then %do; drop decprior dataprior;
178924   !+%end;
178925    +                %if &useD eq N and &useP eq Y %then %do; keep &rpt_rpm_targetName
178925   !+count trainprior decprior; %end;
178926    +                %if &useD eq N and &useP eq N %then %do; keep &rpt_rpm_targetName
178926   !+count trainprior;          %end;
178927    +            run;
178929    +            proc print data=&EM_USER_TARGETSUM noobs label style=[outputwidth=50%];
178929   !+run;
178930    +        %end;
178931    +        %else %do;
178932    +            /* target summary for interval target */
178934    +            data _null_;
178935    +                set  &em_lib..&idsnode._cmeta_data(where=(ROLE='TARGET'));
178936    +                call symput('rpt_rpm_ids_target',    strip(name));
178937    +            run;
178939    +            %if &rpt_rpm_isHP eq 1 %then %do;
178940    +                ods &EM_REPORT_FORMAT exclude all;
178941    +                ods listing;
178942    +                proc hpdmdb data=&em_lib..&idsnode._data varout=temp1;
178943    +                    var &rpt_rpm_ids_target;
178944    +                proc transpose data=temp1
178945    +                    out=&EM_USER_TARGETSUM(rename=(col1=&rpt_rpm_ids_target
178945   !+_name_=_stat_));
178946    +                    by name notsorted;
178947    +                    var n min max mean std;
178948    +                run;
178949    +                ods listing close;
178950    +                ods &EM_REPORT_FORMAT select all;
178951    +                proc delete data=temp1; run;
178952    +            %end;
178953    +            %else %do;
178954    +                proc means data=&em_lib..&idsnode._data noprint;
178955    +                    var &rpt_rpm_ids_target;
178956    +                    output out=&EM_USER_TARGETSUM;
178957    +                run;
178959    +                data &EM_USER_TARGETSUM;
178960    +                    format _stat_ $50.;
178961    +                    set &EM_USER_TARGETSUM;
178962    +                    if strip(upcase(_stat_)) eq "MIN"  then _stat_ =
178962   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
178963    +                    if strip(upcase(_stat_)) eq "MAX"  then _stat_ =
178963   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
178964    +                    if strip(upcase(_stat_)) eq "N"    then _stat_ =
178964   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_numObs_vlabel, NOQUOTE))";
178965    +                    if strip(upcase(_stat_)) eq "MEAN" then _stat_ =
178965   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel, NOQUOTE))";
178966    +                    if strip(upcase(_stat_)) eq "STD"  then _stat_ =
178966   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel, NOQUOTE))";
178967    +                run;
178968    +            %end;
178970    +            proc print data=&EM_USER_TARGETSUM noobs label style=[outputwidth=50%];
178971    +                var _stat_ &rpt_rpm_ids_target;
178972    +                label _stat_        = "%sysfunc(sasmsg(sashelp.dmine,
178972   !+rpt_rptstatistic_vlabel, NOQUOTE))"
178973    +                &rpt_rpm_ids_target = "%sysfunc(sasmsg(sashelp.dmine,
178973   !+rpt_rptvalue_vlabel, NOQUOTE))";
178974    +            run;
178975    +        %end;
178977    +        /* RPM-3.3 - output variable summary
178977   !+---------------------------------------------------------------*/
178979    +        %if &RPM_REPORT_SCORENODE ne %then %do;
178981    +            proc sql noprint;
178982    +                create table tempselected as
178983    +                    select a.*, b.name as selected
178984    +                    from &em_lib..&idsnode._variableset as a left join
178984   !+&EM_USER_tempmeta as b
178985    +                        on a.name eq b.name
178986    +                ;
178987    +                create table &EM_USER_VARSUM as
178988    +                    select role,level, count(distinct name) as count, sum(selected
178988   !+ne ' ') as sel_count
178989    +                    from tempselected
178990    +                    group by role, level
178991    +                    order by role, level
178992    +                ;
178993    +            quit;
178995    +            ods &EM_REPORT_FORMAT text=" ";
178996    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
178996   !+rpt_rptvarsummary_title, NOQUOTE))";
178997    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarsummary_title,
178997   !+NOQUOTE))";
178999    +            data &EM_USER_VARSUM;
179000    +                format role $50. level $50.;
179001    +                set &EM_USER_VARSUM;
179003    +                role  = upcase(strip(role));
179004    +                level = upcase(strip(level));
179006    +                     if role eq 'ASSESS'         then role=
179006   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_assess_vlabel, NOQUOTE))";
179007    +                else if role eq 'COST'           then role=
179007   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_cost_vlabel, NOQUOTE))";
179008    +                else if role eq 'CENSOR'         then role=
179008   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_censor_vlabel, NOQUOTE))";
179009    +                else if role eq 'CROSSID'        then role=
179009   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_crossid_vlabel, NOQUOTE))";
179010    +                else if role eq 'FREQ'           then role=
179010   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_freq_vlabel, NOQUOTE))";
179011    +                else if role eq 'GROUP'          then role=
179011   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel, NOQUOTE))";
179012    +                else if role eq 'DECISION'       then role=
179012   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_decision_vlabel, NOQUOTE))";
179013    +                else if role eq 'CLASSIFICATION' then role=
179013   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_classification_vlabel, NOQUOTE))";
179014    +                else if role eq 'KEY'            then role=
179014   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_key_vlabel, NOQUOTE))";
179015    +                else if role eq 'MISSING'        then role=
179015   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
179016    +                else if role eq 'PREDICT'        then role=
179016   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_predict_vlabel, NOQUOTE))";
179017    +                else if role eq 'REFERRER'       then role=
179017   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_referrer_vlabel, NOQUOTE))";
179018    +                else if role eq 'REJECTED'       then role=
179018   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_rejected_vlabel, NOQUOTE))";
179019    +                else if role eq 'SEGMENT'        then role=
179019   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_segment_vlabel, NOQUOTE))";
179020    +                else if role eq 'SEQUENCE'       then role=
179020   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_sequence_vlabel, NOQUOTE))";
179021    +                else if role eq 'TEXT'           then role=
179021   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_text_vlabel, NOQUOTE))";
179022    +                else if role eq 'TIMEID'         then role=
179022   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_timeid_vlabel, NOQUOTE))";
179023    +                else if role eq 'TRIAL'          then role=
179023   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_trial_vlabel, NOQUOTE))";
179024    +                else if role eq 'ID'             then role=
179024   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_id_vlabel, NOQUOTE))";
179025    +                else if role eq 'INPUT'          then role=
179025   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel, NOQUOTE))";
179026    +                else if role eq 'TARGET'         then role=
179026   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel, NOQUOTE))";
179027    +                else if role eq 'TREATMENT'      then role=
179027   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_treatment_vlabel, NOQUOTE))";
179028    +                else if role eq 'RESIDUAL '      then role=
179028   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_residual_vlabel, NOQUOTE))";
179029    +                else if role eq 'LABEL'          then role=
179029   !+"%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
179031    +                     if level eq 'INTERVAL'  then level =
179031   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_interval_vlabel , NOQUOTE))";
179032    +                else if level eq 'NOMINAL'   then level =
179032   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_nominal_vlabel , NOQUOTE))";
179033    +                else if level eq 'ORDINAL'   then level =
179033   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_ordinal_vlabel , NOQUOTE))";
179034    +                else if level eq 'BINARY'    then level =
179034   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_binary_vlabel , NOQUOTE))";
179035    +                else if level eq 'UNARY'     then level =
179035   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_unary_vlabel , NOQUOTE))";
179037    +                role  = strip(role);
179038    +                level = strip(level);
179039    +            run;
179041    +            proc print data=&EM_USER_VARSUM label noobs style=[outputwidth=50%];
179042    +                var role level count sel_count;
179043    +                label role      = "%sysfunc(sasmsg(sashelp.dmine,
179043   !+rpt_rptrole_vlabel, NOQUOTE))"
179044    +                      level     = "%sysfunc(sasmsg(sashelp.dmine,
179044   !+rpt_rptlevel_vlabel, NOQUOTE))"
179045    +                      count     = "%sysfunc(sasmsg(sashelp.dmine,
179045   !+rpt_rptorigcount_vlabel, NOQUOTE))"
179046    +                      sel_count = "%sysfunc(sasmsg(sashelp.dmine,
179046   !+rpt_rptselcount_vlabel, NOQUOTE))";
179047    +            run;
179049    +            proc delete data=tempselected; run;
179050    +        %end;
179051    +    %end;  /* end of --&EM_PROPERTY_SUMMARIZATION eq Y           --*/
179052    +/* three output in this section: datasum, targetsum, varsum      --*/
179053    +%end; /* end of &em_report_modelId ne - end of block 3.1,3.2,3.3 --*/
179056    +/***** RPM-4. varRank and Scorecard
179056   !+************************************************************************/
179058    +%if &em_report_modelId ne  and %sysfunc(exist(&idstmeta)) and &RPM_REPORT_SCORENODE
179058   !+ne  %then %do;
179060    +    %EM_GETNAME(key=VARRANK,   type=DATA);
179061    +    %EM_GETNAME(key=SCORECARD, type=DATA);
179063    +    %if "&rpt_rpm_targetLevel" ne "INTERVAL"
179064    +        %then %let scorecard_target = &catTarget;
179065    +        %else %let scorecard_target = &rpt_rpm_predvar;
179067    +    %if &runHP eq 0 %then %do;
179069    +        %global EM_SUMMARY_REPORT_MAXOBS  EM_SUMMARY_REPORT_SAMPLEMETHOD ;
179071    +        %if &EM_SUMMARY_REPORT_MAXOBS ne  %then %do;
179072    +            %let maxobs = &EM_SUMMARY_REPORT_MAXOBS;
179073    +        %end;
179074    +        %else %do;
179075    +            %exploreObs(data=&em_lib..&em_report_modelid._train);
179076    +            %let maxobs = &_EXPLOREOBS_MAX;
179077    +        %end;
179079    +        %if "&EM_SUMMARY_REPORT_SAMPLEMETHOD" ne ""
179080    +            %then  %let sampleMethod = &EM_SUMMARY_REPORT_SAMPLEMETHOD;
179081    +            %else  %let sampleMethod = RANDOM;
179083    +        %exploreSample(
179084    +            data     = &em_lib..&em_report_modelid._train,
179085    +            seed     = 12345,
179086    +            output   = &em_report_modelid._trainsample,
179087    +            method   = &sampleMethod,
179088    +            size     = &maxobs,
179089    +            sizetype = obs,
179090    +            metaData = &em_lib..&em_report_modelid._cmeta_train
179091    +        );
179093    +        %em_reporter_scorecard(
179094    +            indata        = %str(&em_report_modelid._trainsample),
179095    +            indata2       = %str(&em_lib..&em_report_modelid._train),
179096    +            inVariableSet = &EM_USER_tempmeta,
179097    +            name          = &name_to_use,
179098    +            libname       = work,
179099    +            crosstab      = &EM_PROPERTY_CROSSTABS,
179100    +            targetVar     = &scorecard_target,
179101    +            targetVar2    = &rpt_rpm_targetName,
179102    +            targetLevel   = &rpt_rpm_targetLevel,
179103    +            freqVar       = &freqVar,
179104    +            outVarRank    = &EM_USER_VarRank,
179105    +            outScoreCard  = &EM_USER_ScoreCard
179106    +        );
179108    +        proc sort data=&em_lib..&idsnode._variableset
179109    +            out=templabel(keep=&name_to_use label %if &vvnflag eq 1 %then %do; name
179109   !+%end;);
179110    +            by &name_to_use;
179111    +        run;
179113    +        %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 %then %do;
179115    +            proc sort data=&EM_USER_ScoreCard;
179116    +                by displayVar;
179117    +            data &EM_USER_ScoreCard;
179118    +                merge &EM_USER_ScoreCard(in=_a)
179118   !+templabel(rename=(&name_to_use=displayVar label=emrpmtmp_lbael));
179119    +                by displayVar;
179120    +                if _a;
179121    +                %if &vvnflag eq 1 %then %do;
179122    +                    if ^missing(name)  then displayvar=name;
179123    +                %end;
179124    +                if ^missing(emrpmtmp_lbael) then displayvar=emrpmtmp_lbael;
179125    +                drop emrpmtmp_lbael name;
179126    +            run;
179128    +        %end;
179130    +        %if %sysfunc(exist(&EM_USER_VarRank)) ne 0 %then %do;
179132    +            proc sort data=&EM_USER_VarRank;
179133    +                by variable;
179134    +            data &EM_USER_VarRank;
179135    +                merge &EM_USER_VarRank(in=_a)
179135   !+templabel(rename=(&name_to_use=variable));
179136    +                by variable;
179137    +                if _a;
179138    +                if missing(label) then do;
179139    +                    label = variable;
179140    +                    %if &vvnflag eq 1 %then %do;
179141    +                        if ^missing(name) then label=name;
179142    +                    %end;
179143    +                end;
179144    +            proc sort data=&EM_USER_VarRank;
179145    +                by descending rank;
179146    +            run;
179148    +        %end;
179150    +        %if %sysfunc(exist(&EM_USER_VarRank)) ne 0 and &EM_PROPERTY_VARRANKING eq Y
179150   !+%then %do;
179151    +            /* generate gtable like listing of variable importance */
179152    +            ods path(prepend) work.templat(update);
179153    +            proc template;
179154    +                define statgraph Rules / store=work.templat ;
179155    +                    begingraph / designheight=470px;
179156    +                        %if "&EM_REPORT_TITLE" ne ""
179157    +                            %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
179158    +                            %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179158   !+rpt_reporttitleone_title, NOQUOTE))"; %end;
179159    +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179159   !+rpt_rptvarranking_title, NOQUOTE))";
179160    +                        layout lattice / columns=2 rowdatarange=union
179160   !+columnweights=(0.9 0.1) columngutter=0;
179161    +                            rowaxes; rowaxis; endrowaxes;
179162    +                            layout overlay / xaxisopts=(display=(line));
179163    +                                barchart x=label y=worth / orient=horizontal;
179164    +                            endlayout;
179165    +                        endlayout;
179166    +                    endgraph;
179167    +                end;
179168    +            run;
179169    +            proc sgrender data=&EM_USER_VARRANK template=Rules; run;
179170    +        %end;
179171    +    %end;
179172    +    %else %do;
179174    +        %if &rpt_rpm_isHP eq 1
179175    +            %then %let scorecard_lib = &rpt_rpm_datalib;
179176    +            %else %let scorecard_lib = work;
179178    +        ods &EM_REPORT_FORMAT exclude all;
179179    +        ods listing;
179180    +        %hpdm_scorecard(
179181    +            indata        = %str(&em_lib..&em_report_modelID._train),
179182    +            inVariableSet = &EM_USER_tempmeta,
179183    +            name          = &name_to_use,
179184    +            libname       = &scorecard_lib,
179185    +            crosstab      = &EM_PROPERTY_CROSSTABS,
179186    +            targetVar     = &scorecard_target,
179187    +            targetVar2    = &rpt_rpm_targetName,
179188    +            targetLevel   = &rpt_rpm_targetLevel,
179189    +            freqVar       = &freqVar,
179190    +            outVarRank    = &EM_USER_VarRank,
179191    +            outScoreCard  = &EM_USER_ScoreCard
179192    +        );
179193    +        ods listing close;
179194    +        ods &EM_REPORT_FORMAT select all;
179196    +        /* 3.4 - Variable Ranking from PROC HPREDUCE */
179198    +        %if &EM_PROPERTY_VARRANKING eq Y %then %do;
179199    +            ods &EM_REPORT_FORMAT text=" ";
179200    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179200   !+rpt_rptvarranking_title, NOQUOTE))";
179201    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarranking_title,
179201   !+NOQUOTE))";
179202    +            proc print data=&EM_USER_VARRANK noobs;
179203    +                var number variable;
179204    +            run;
179205    +        %end;
179206    +    %end;
179207    + %end;
179210    +/* RPM-5. Cumulative Lift chart
179210   !+*********************************************************************/
179212    +%if &EM_PROPERTY_LIFTCHART eq Y %then %do;
179214    +    %let em_rank = &em_lib..%sysfunc(trim(&em_report_modelid))_emrank;
179216    +    %if %sysfunc(exist(&em_rank)) %then %do;
179218    +        %EM_GETNAME(key=LIFT, type=DATA);
179219    +        data &EM_USER_LIFT;
179220    +            set &em_rank end=eof;
179221    +            if eof then call symput("_tarexists_", strip(target));
179223    +                 if upcase(strip(datarole)) eq 'TRAIN'    then datarole =
179223   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_roletrain_value,    NOQUOTE))";
179224    +            else if upcase(strip(datarole)) eq 'RAW'      then datarole =
179224   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_roleraw_value,      NOQUOTE))";
179225    +            else if upcase(strip(datarole)) eq 'VALIDATE' then datarole =
179225   !+"%sysfunc(sasmsg(sashelp.dmine, rpt_rolevalidate_value, NOQUOTE))";
179226    +            datarole = strip(datarole);
179227    +        run;
179229    +        %let em_class=&em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
179231    +        %if (%sysfunc(exist(&em_class)) and "&rpt_rpm_targetLevel" ne "INTERVAL" )
179232    +        %then %do;
179233    +            %let this_title = rpt_rptcumliftchart_title;
179234    +            %let this_plotY = liftc;
179235    +        %end;
179236    +        %else %do;
179237    +            %let this_title = rpt_rptmeanpredresp_title;
179238    +            %let this_plotY = _MEANP_;
179239    +        %end;
179241    +        ods path(prepend) work.templat(update);
179242    +        proc template;
179243    +            define statgraph liftplot / store=work.templat;
179244    +                begingraph / designheight=470px;
179245    +                    %if "&EM_REPORT_TITLE" ne ""
179246    +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
179247    +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179247   !+rpt_reporttitleone_title, NOQUOTE))"; %end;
179248    +                    entrytitle "%sysfunc(sasmsg(sashelp.dmine, &this_title,
179248   !+NOQUOTE))";
179249    +                    layout overlay;
179250    +                        seriesplot x=decile y=&this_plotY
179251    +                            / group =datarole lineattrs=(pattern=solid) name='lift';
179252    +                        discretelegend 'lift' ;
179253    +                    endlayout;
179254    +                endgraph;
179255    +            end;
179256    +        run;
179258    +        proc sgrender data=&EM_USER_LIFT
179259    +            %if "&_tarexists_" ne "." %then %do;
179259   !+(where=(target="&rpt_rpm_targetName")) %end;
179260    +            template=liftplot;
179261    +        run;
179262    +    %end;
179263    +%end;
179265    +/* RPM-6. Cumulative captured response chart
179265   !+*********************************************************/
179267    +%if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
179269    +    %EM_GETNAME(key=CAPRESPONSE, type=DATA);
179271    +    %let em_report_rank = &em_lib..%sysfunc(trim(&em_report_modelid))_emrank;
179273    +    %if %sysfunc(exist(&em_report_rank)) %then %do;
179275    +        %let em_report_class =
179275   !+&em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
179277    +        %if (%sysfunc(exist(&em_report_class)) and "&rpt_rpm_targetLevel" ne
179277   !+"INTERVAL" ) %then %do;
179279    +            /* generate % values and create categorical x values for plotting
179279   !+purposes */
179280    +            data &EM_USER_CAPRESPONSE;
179281    +                set &em_report_rank end=eof;
179282    +                length baseCat bestCat capCat decCat liftCat liftCCat $5;
179283    +                format basecapcp bestcapcp capcp decilep PERCENT6.0;
179284    +                basecapcp = basecapc / 100;  baseCat= put(basecapcp, PERCENT6.0 -L);
179285    +                bestcapcp = bestcapc / 100;  bestCat= put(bestcapcp, PERCENT6.0 -L);
179286    +                capcp     = capc / 100;      capCat = put(capcp, PERCENT6.0 -L);
179287    +                decilep   = decile / 100;    decCat = put(decilep, PERCENT6.0 -L);
179288    +                liftCat = lift;
179289    +                liftCCat= liftC;
179290    +                if eof then call symput("_tarexists_", strip(target));
179291    +            run;
179293    +            /* create template for Captured Response Plot */
179295    +            ods path(prepend) work.templat(update);
179296    +            proc template;
179297    +                define statgraph reg_emrank / store=work.templat;
179298    +                    begingraph / designheight=470px;
179299    +                    %if "&EM_REPORT_TITLE" ne ""
179300    +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
179301    +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179301   !+rpt_reporttitleone_title, NOQUOTE))"; %end;
179302    +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179302   !+rpt_rptmodelgains_title, NOQUOTE))";
179303    +                        layout overlay / cycleattrs=true xaxisopts=(display=(LINE))
179303   !+yaxisopts=(label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumcaptresponse_vlabel,
179303   !+NOQUOTE))");
179304    +                            seriesplot x=deccat y=basecapcp /
179304   !+lineattrs=(pattern=solid) name='base'  legendlabel="%sysfunc(sasmsg(sashelp.dmine,
179304   !+rpt_rptbase_vlabel, NOQUOTE))";
179305    +                            seriesplot x=deccat y=bestcapcp /
179305   !+lineattrs=(pattern=solid) name='best'  legendlabel="%sysfunc(sasmsg(sashelp.dmine,
179305   !+rpt_rptbest_vlabel, NOQUOTE))";
179306    +                            seriesplot x=deccat y=capcp     /
179306   !+lineattrs=(pattern=solid) name='model' legendlabel="%sysfunc(sasmsg(sashelp.dmine,
179306   !+rpt_rptmodel_vlabel, NOQUOTE))";
179307    +                            innermargin / align=bottom;
179308    +                                blockplot x=deccat block=liftCcat /
179308   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumlift_vlabel, NOQUOTE))"
179308   !+valuehalign=center filltype=alternate
179309    +                                                                    repeatedvalues=t
179309   !+rue valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5
179309   !+altfillattrs=graphdata5;
179310    +                                blockplot x=deccat block=liftcat  /
179310   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptlift_vlabel, NOQUOTE))"
179310   !+valuehalign=center filltype=alternate
179311    +                                                                    repeatedvalues=t
179311   !+rue valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4
179311   !+altfillattrs=graphdata4;
179312    +                                blockplot x=deccat block=capcat   /
179312   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))"
179312   !+valuehalign=center filltype=alternate
179313    +                                                                    repeatedvalues=t
179313   !+rue valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3
179313   !+altfillattrs=graphdata3;
179314    +                                blockplot x=deccat block=bestcat  /
179314   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptbest_vlabel, NOQUOTE))"
179314   !+valuehalign=center filltype=alternate
179315    +                                                                    repeatedvalues=t
179315   !+rue valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata2
179315   !+altfillattrs=graphdata2;
179316    +                                blockplot x=deccat block=deccat   /
179316   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdecile_vlabel, NOQUOTE))"
179316   !+valuehalign=center filltype=alternate
179317    +                                                                    repeatedvalues=t
179317   !+rue valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdatadefault
179317   !+altfillattrs=graphdatadefault;
179318    +                            endinnermargin;
179319    +                            * discretelegend "base" "best" "model" / across=1
179319   !+location=inside halign=right valign=bottom;
179320    +                        endlayout;
179321    +                    endgraph;
179322    +                end;
179323    +            run;
179324    +        %end;
179325    +        %else %do;
179327    +            /* generate % values and create categorical x values for plotting
179327   !+purposes */
179328    +            data &EM_USER_CAPRESPONSE;
179329    +                set &em_report_rank end=eof;
179330    +                length decCat $5;
179331    +                format  decilep PERCENT6.0;
179332    +                decilep = decile / 100;
179333    +                decCat = put(decilep, PERCENT6.0 -L);
179334    +                if eof then call symput("_tarexists_", strip(target));
179335    +            run;
179337    +            /* create template for Captured Response Plot */
179338    +            ods path(prepend) work.templat(update);
179339    +            proc template;
179340    +                define statgraph reg_emrank / store=work.templat;
179341    +                    begingraph / designheight=470px ;
179342    +                    %if "&EM_REPORT_TITLE" ne ""
179343    +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
179344    +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179344   !+rpt_reporttitleone_title, NOQUOTE))"; %end;
179345    +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179345   !+rpt_rptmodelgainspred_title, NOQUOTE))";
179346    +                        layout overlay / cycleattrs=true xaxisopts=(display=(LINE))
179346   !+yaxisopts=(label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredresp_vlabel, NOQUOTE))")
179346   !+;
179347    +                            seriesplot x=deccat y=_meanp_ /
179347   !+lineattrs=(pattern=solid) name='mean' legendlabel="%sysfunc(sasmsg(sashelp.dmine,
179347   !+rpt_mean_vlabel, NOQUOTE))";
179348    +                            seriesplot x=deccat y=_minp_ / lineattrs=(pattern=solid)
179348   !+ name='min' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel,
179348   !+NOQUOTE))";
179349    +                            seriesplot x=deccat y=_maxp_     /
179349   !+lineattrs=(pattern=solid) name='max' legendlabel="%sysfunc(sasmsg(sashelp.dmine,
179349   !+rpt_maximum_vlabel, NOQUOTE))";
179350    +                            innermargin / align=bottom;
179351    +                                blockplot x=deccat block=_targetmean_  /
179351   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmean_vlabel, NOQUOTE))"
179351   !+valuehalign=center filltype=alternate
179352    +                                                                         repeatedval
179352   !+ues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5
179352   !+altfillattrs=graphdata5;
179353    +                                blockplot x=deccat block=_targetmin_   /
179353   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmin_vlabel, NOQUOTE))"
179353   !+valuehalign=center filltype=alternate
179354    +                                                                         repeatedval
179354   !+ues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4
179354   !+altfillattrs=graphdata4;
179355    +                                blockplot x=deccat block=_targetmax_   /
179355   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmax_vlabel, NOQUOTE))"
179355   !+valuehalign=center filltype=alternate
179356    +                                                                         repeatedval
179356   !+ues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3
179356   !+altfillattrs=graphdata3;
179357    +                                blockplot x=deccat block=_meanp_       /
179357   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmean_vlabel, NOQUOTE))"
179357   !+valuehalign=center filltype=alternate
179358    +                                                                         repeatedval
179358   !+ues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5
179358   !+altfillattrs=graphdata5;
179359    +                                blockplot x=deccat block=_minp_        /
179359   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmin_vlabel, NOQUOTE))"
179359   !+valuehalign=center filltype=alternate
179360    +                                                                         repeatedval
179360   !+ues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4
179360   !+altfillattrs=graphdata4;
179361    +                                blockplot x=deccat block=_maxp_        /
179361   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmax_vlabel, NOQUOTE))"
179361   !+valuehalign=center filltype=alternate
179362    +                                                                         repeatedval
179362   !+ues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3
179362   !+altfillattrs=graphdata3;
179363    +                                blockplot x=deccat block=deccat        /
179363   !+label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdecile_vlabel, NOQUOTE))"
179363   !+valuehalign=center filltype=alternate
179364    +                                                                         repeatedval
179364   !+ues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdatadefault
179364   !+altfillattrs=graphdatadefault;
179365    +                            endinnermargin;
179366    +                            * discretelegend "mean" "min" "max" / across=1
179366   !+location=inside halign=left valign=bottom;
179367    +                        endlayout;
179368    +                    endgraph;
179369    +                end;
179370    +            run;
179371    +        %end;
179373    +        /* render plot */
179375    +        %let validflag=0;
179376    +        data tempvalid;
179377    +            set &EM_USER_CAPRESPONSE(where=(datarole="VALIDATE"));
179378    +        run;
179380    +        %let dsid = %sysfunc(open(work.tempvalid));
179381    +        %if &dsid %then %do;
179382    +            %let validobs = %sysfunc(attrn(&dsid, NOBS));
179383    +            %if &validobs gt 0 %then %let validflag = 1;
179384    +        %end;
179385    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
179387    +        proc sgrender data=&EM_USER_CAPRESPONSE
179388    +            %if "&_tarexists_" ne "." %then %do;
179388   !+(where=(target="&rpt_rpm_targetName"))%end;
179389    +            template=reg_emrank;
179390    +            %if &validflag eq 1
179391    +                %then %do; where datarole="VALIDATE"; %end;
179392    +                %else %do; where datarole="TRAIN";    %end;
179393    +        run;
179394    +    %end;
179395    +%end;
179398    +/* RPM-7. ROC CHART
179398   !+************************************************************************************
179398   !+******/
179400    +%if ((&RPM_REPORT_MDLCOMP ne ) or (&em_report_modelid ne )) and
179400   !+(&EM_PROPERTY_BASICOUTPUT eq Y) %then %do;
179402    +    %let em_report_roc = &em_lib..&RPM_REPORT_MDLCOMP._emroc;
179403    +    %let em_report_hpassess = &em_lib..%sysfunc(trim(&em_report_modelid))_hpassess;
179404    +    %let em_report_hpstats  =
179404   !+&em_lib..%sysfunc(trim(&em_report_modelid))_hpreportstats;
179406    +    %EM_GETNAME(key=ROC, type=DATA);
179407    +    %let plot_KS  = 0;
179408    +    %let plot_ROC = 0;
179409    +    %let train_X  = 0; %let train_Y  = 0; %let train_KS = 0;
179410    +    %let valid_X  = 0; %let valid_Y  = 0; %let valid_KS = 0;
179412    +    %if %sysfunc(exist(&em_report_roc)) %then %do;
179414    +        proc sql noprint;
179415    +            select count(*) into :validroc from &em_report_roc where datarole eq
179415   !+"VALIDATE";
179416    +        quit;
179418    +        /* make the ROC table */
179419    +        data &EM_USER_ROC;
179420    +            length group $32 diff 8;
179421    +            label group="&em_report_modeldesc %sysfunc(sasmsg(sashelp.dmine,
179421   !+rpt_rptmodel_vlabel, NOQUOTE))";
179422    +            set &em_report_roc;
179423    +            if strip(model)='_Baseline_'
179424    +                then group='Baseline';
179425    +                else group=Datarole;
179426    +            where (strip(model) ='_Baseline_' and DataRole='TRAIN') or
179426   !+(strip(model)= "&em_report_modelid" and DataRole in('TRAIN','VALIDATE'));
179427    +            diff = sensitivity-oneminusspecificity;
179428    +        run;
179430    +        /* get KS statistics */
179432    +        proc sql noprint;
179433    +            create table ks_stat as
179434    +                select distinct datarole, max(diff) as ks from &EM_USER_ROC group by
179434   !+ datarole;
179435    +            select round(ks, 0.00001) into :train_ks
179436    +                from ks_stat where datarole eq 'TRAIN';
179437    +            select round(ks, 0.00001) into :valid_ks
179438    +                from ks_stat where datarole eq 'VALIDATE';
179439    +            select oneMinusSpecificity, sensitivity into :train_x, :train_y
179440    +                from &EM_USER_ROC where datarole eq 'TRAIN' and round(diff, 0.00001)
179440   !+ eq &train_ks;
179441    +            select oneMinusSpecificity, sensitivity into :valid_x, :valid_y
179442    +                from &EM_USER_ROC where datarole eq 'VALIDATE' and round(diff,
179442   !+0.00001) eq &valid_ks;
179443    +        quit;
179445    +        %let plot_KS = 1;
179446    +        %let plot_ROC = 1;
179447    +    %end;
179448    +    %else %if %sysfunc(exist(&em_report_hpassess)) and "&rpt_rpm_targetLevel" ne
179448   !+"INTERVAL" %then %do;
179450    +        /* make the ROC table */
179452    +        proc sql noprint;
179453    +            select count(*) into :validroc from &em_report_hpassess where datarole
179453   !+eq "VALIDATE";
179454    +        quit;
179456    +        data &EM_USER_ROC;
179457    +            length group $32;
179458    +            group='Baseline';
179459    +            sensitivity = 0; oneminusspecificity = 0; output;
179460    +            sensitivity = 1; oneminusspecificity = 1; output;
179461    +        run;
179463    +        data &EM_USER_ROC;
179464    +            length group $32;
179465    +            set &em_report_hpassess(in=in1
179465   !+rename=(one_minus_specificity=oneminusspecificity)) &EM_USER_ROC;
179466    +            if in1 then group=datarole;
179467    +            label group="&em_report_modeldesc %sysfunc(sasmsg(sashelp.dmine,
179467   !+rpt_rptmodel_vlabel, NOQUOTE))";
179468    +        run;
179470    +        /* get KS statistics */
179472    +        %if %sysfunc(exist(&em_report_hpstats)) %then %do;
179474    +             data _null_;
179475    +                set &em_report_hpstats;
179476    +                if upcase(stat) eq 'KSREF' then call symput('train_X',
179476   !+put(train,best24.));
179477    +                if upcase(stat) eq 'KSR'   then call
179477   !+symput('train_KS',round(train,0.00001));
179478    +                %if &validroc ge 1 %then %do;
179479    +                    if upcase(stat) eq 'KSREF' then call symput('valid_X',
179479   !+put(validate,best24.));
179480    +                    if upcase(stat) eq 'KSR'   then call
179480   !+symput('valid_KS',round(validate,0.00001));
179481    +                %end;
179482    +            run;
179484    +            data _null_;
179485    +                tmp=&train_X+&train_KS/100; call symput('train_Y',put(tmp,best24.));
179486    +                tmp=&valid_X+&valid_KS/100; call symput('valid_Y',put(tmp,best24.));
179487    +            run;
179489    +            %if &train_Y gt 0 %then %let plot_KS = 1;
179490    +            %let plot_ROC = 1;
179491    +        %end;
179492    +    %end;
179494    +    %if &plot_ROC eq 1 %then %do;
179496    +        /* add coordinates for ref lines */
179497    +        data refline;
179498    +            length oneminusspecificity sensitivity x y 8 datarole $8 group $32 text
179498   !+$60;
179499    +            %if &train_Y gt 0 %then %do;
179500    +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_Y; datarole='TRAIN'
179500   !+; group='TRAIN';
179501    +                text=""; x=.; y=.; output;
179502    +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_X; datarole='TRAIN'
179502   !+; group='TRAIN';
179503    +                text=catx(' = ',"%sysfunc(sasmsg(sashelp.dmine, rpt_trainks_vlabel,
179503   !+NOQUOTE))","&train_KS"); x=&TRAIN_X; y=&TRAIN_X - 0.05; output;
179504    +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_Y; datarole='TRAIN'
179504   !+; group='TRAIN';
179505    +                text=""; x=.; y=.; output;
179506    +            %end;
179507    +            %if &validroc ge 1 and &valid_Y gt 0 %then %do;
179508    +                oneminusspecificity=&VALID_X; sensitivity=&VALID_Y;
179508   !+datarole='VALIDATE'; group='VALIDATE';
179509    +                text=""; x=.; y=.; output;
179510    +                oneminusspecificity=&VALID_X; sensitivity=&VALID_X;
179510   !+datarole='VALIDATE'; group='VALIDATE';
179511    +                text=catx(' = ',"%sysfunc(sasmsg(sashelp.dmine, rpt_validks_vlabel,
179511   !+NOQUOTE))","&valid_KS"); x=&VALID_X; y=&VALID_X - 0.05; output;
179512    +                oneminusspecificity=&VALID_X; sensitivity=&VALID_Y;
179512   !+datarole='VALIDATE'; group='VALIDATE';
179513    +                text=""; x=.; y=.; output;
179514    +            %end;
179515    +        data &EM_USER_ROC;
179516    +           set &EM_USER_ROC refline;
179517    +           if group eq 'TRAIN'    then group = "%sysfunc(sasmsg(sashelp.dmine,
179517   !+rpt_train_vlabel, NOQUOTE))";
179518    +           if group eq 'VALIDATE' then group = "%sysfunc(sasmsg(sashelp.dmine,
179518   !+rpt_validate_vlabel, NOQUOTE))";
179519    +           if group eq 'Baseline' then group = "%sysfunc(sasmsg(sashelp.dmine,
179519   !+rpt_baselineroc_value, NOQUOTE))";
179520    +        run;
179522    +        /* plot ROC chart */
179523    +        ods path(prepend) work.templat(update);
179524    +        proc template;
179525    +            define statgraph rocplot / store=work.templat;
179526    +                begingraph / designheight=470px;
179527    +                    %if "&EM_REPORT_TITLE" ne ""
179528    +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
179529    +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine,
179529   !+rpt_reporttitleone_title, NOQUOTE))"; %end;
179530    +                    entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptroc_title,
179530   !+NOQUOTE))";
179531    +                    layout overlay;
179532    +                        seriesplot x=oneminusspecificity y=sensitivity / group
179532   !+=group lineattrs=(pattern=solid) name='series';
179533    +                        %if &plot_ks eq 1 %then %do;
179534    +                            scatterplot x=x y=y / group=group datalabel=text
179534   !+datalabelattrs=(weight=bold) markerattrs=(size=0px);
179535    +                        %end;
179536    +                        discretelegend 'series' / title="&em_report_modeldesc
179536   !+%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
179537    +                    endlayout;
179538    +                endgraph;
179539    +            end;
179540    +        run;
179542    +        proc sort data=&EM_USER_ROC; by group oneminusspecificity; run;
179543    +        proc sgrender data=&EM_USER_ROC template=rocplot; run;
179544    +        title1; title2;
179545    +    %end;
179546    +%end;
179548    +/* RPM-8. Scorecard
179548   !+************************************************************************************
179548   !+*****/
179550    +%if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
179552    +    %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 and &runHP eq 0 %then %do;
179554    +        %let ColPercNum = 0;
179555    +        %let sdsid = %sysfunc(open(&EM_USER_SCORECARD));
179556    +        %let colPercnum = %sysfunc(varnum(&sdsid, colPercent));
179557    +        %if &sdsid %then %let sdsid = %sysfunc(close(&sdsid));
179559    +        %let tmpstr1 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_scpoints,
179559   !+NOQUOTE));
179560    +        %let tmpstr2 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_overall,
179560   !+NOQUOTE));
179561    +        %let tmpstr3 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_singleN,
179561   !+NOQUOTE));
179563    +        %if &EM_PROPERTY_CROSSTABS eq Y and "&rpt_rpm_targetLevel" ne "INTERVAL" and
179563   !+ &colPercnum gt 0
179564    +        %then %do;
179566    +            ods &EM_REPORT_FORMAT text=" ";
179567    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179567   !+rpt_rptscorecard_crosstab_title, NOQUOTE))";
179568    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine,
179568   !+rpt_rptscorecard_crosstab_title, NOQUOTE))";
179570    +            proc tabulate data=&EM_USER_SCORECARD order=data noseps;
179571    +                class displayvar rowVariable varvalue &rpt_rpm_targetName / missing;
179572    +                var allfreq allPercent scorepoints colpercent frequency;
179573    +                keylabel sum=" ";
179574    +                table displayvar*varvalue,
179575    +                    (scorepoints="&tmpstr1" allfreq="&tmpstr2 &tmpstr3"
179575   !+allpercent="&tmpstr2 %" )
179576    +                    &rpt_rpm_targetName*(frequency="&tmpstr3" colPercent="%" )
179577    +                    / indent=3 rtspace=32 style=[outputwidth=100%];
179578    +            run; quit;
179579    +        %end;
179580    +        %else %do;
179582    +            ods &EM_REPORT_FORMAT text=" ";
179583    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179583   !+rpt_rptrpmscorecard_title, NOQUOTE))";
179584    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine,
179584   !+rpt_rptrmpscorecard_title, NOQUOTE))";
179586    +            proc tabulate data = &EM_USER_SCORECARD order=data noseps;
179587    +                class displayvar / missing;
179588    +                keylabel sum=" ";
179589    +                class varvalue / missing;
179590    +                var scorepoints;
179591    +                table displayvar*varvalue, (scorepoints="&tmpstr1")*sum
179592    +                    / misstext = " " indent = 3 rtspace=32;
179593    +            run; quit;
179594    +         %end;
179595    +    %end;
179597    +    /* this part definitely need review mxx*/
179598    +    %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 and &runHP eq 1 %then %do;
179600    +        %if &EM_PROPERTY_CROSSTABS eq Y and "&rpt_rpm_targetLevel" ne "INTERVAL"
179600   !+%then %do;
179601    +            ods &EM_REPORT_FORMAT text=" ";
179602    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179602   !+rpt_rptscorecard_crosstab_title, NOQUOTE))";
179603    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine,
179603   !+rpt_rptscorecard_crosstab_title, NOQUOTE))";
179604    +            proc tabulate data=&EM_USER_SCORECARD order=data noseps;
179605    +                class displayvar rowVariable displayLvl &rpt_rpm_targetName /
179605   !+MISSING;
179606    +                var allfreq allPercent scorepoints colpercent frequency;
179607    +                keylabel sum=" ";
179608    +                table displayvar * displayLvl, (scorepoints="Scorecard Points"
179608   !+allfreq="Overall N" allpercent="Overall %" )
179609    +                    &rpt_rpm_targetName*(frequency="N" colPercent="%" )
179610    +                    / indent=3 rtspace=32 style=[outputwidth=100%];
179611    +            run; quit;
179612    +        %end;
179613    +        %else %do;
179614    +            ods &EM_REPORT_FORMAT text=" ";
179615    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179615   !+rpt_rptrpmscorecard_title, NOQUOTE))";
179616    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine,
179616   !+rpt_rptrpmscorecard_title, NOQUOTE))";
179617    +            proc tabulate data = &EM_USER_SCORECARD order=data noseps;
179618    +                class displayvar / MISSING;
179619    +                keylabel sum=" ";
179620    +                class displayLvl / missing;
179621    +                var SCOREPOINTS;
179622    +                table displayvar * displayLvl, (scorepoints="Scorecard Points")  *
179622   !+sum / misstext = " "
179623    +                      indent = 3 rtspace=32 style=[outputwidth=50%];
179624    +            run; quit;
179625    +        %end;
179626    +    %end;
179627    +%end;
179629    +%if &RPM_REPORT_SCORENODE ne %then %do;
179631    +    /* RPM-9. Classification matrix
179631   !+*********************************************************************/
179633    +    %if &EM_PROPERTY_CLASSIFICATION eq Y %then %do;
179635    +        %let em_report_class =
179635   !+&em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
179637    +        %if %sysfunc(exist(&em_report_class)) %then %do;
179639    +            %EM_GETNAME(key=MISCLASS, type=DATA);
179640    +            data &EM_USER_MISCLASS;
179641    +                set &em_report_class;
179642    +                where _TYPE_="PREDICTION" AND TARGET="&rpt_rpm_targetName";
179643    +            run;
179645    +            %let numobs=0;
179646    +            %let dsid = %sysfunc(open(&EM_USER_MISCLASS));
179647    +            %let numobs = %sysfunc(attrn(&dsid, NOBS));
179648    +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
179650    +            %if (%sysfunc(exist(&em_USER_MISCLASS)) and &numobs gt 0) %then %do;
179652    +                ods &EM_REPORT_FORMAT text=" ";
179653    +                %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
179654    +                    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179654   !+rpt_rptclassmatrix_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
179655    +                    ods proclabel ="%sysfunc(sasmsg(sashelp.dmine,
179655   !+rpt_rptclassmatrix_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
179656    +                %end;
179657    +                %else %do;
179658    +                    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179658   !+rpt_rptclassmatrix_title, NOQUOTE, &rpt_rpm_targetName))";
179659    +                    ods proclabel ="%sysfunc(sasmsg(sashelp.dmine,
179659   !+rpt_rptclassmatrix_title, NOQUOTE, &rpt_rpm_targetName))";
179660    +                %end;
179662    +                proc tabulate data=&EM_USER_MISCLASS order=data noseps;
179663    +                    keylabel sum=" ";
179664    +                    class from into datarole;
179665    +                    var pct_col;
179666    +                    table from , (datarole*into='Predicted') * pct_col="" /
179666   !+style=[outputwidth=50%];
179667    +                run; quit;
179668    +            %end;
179669    +        %end;
179670    +    %end;
179672    +    /* RPM-10. Fit Statistics
179672   !+**************************************************************************/
179674    +    %if &EM_PROPERTY_FITSTAT eq Y %then %do;
179676    +        %let fitdat1 =&em_lib..&RPM_REPORT_MDLCOMP._emreportfit;
179677    +        %let fitdat2 =&em_lib..&em_report_modelid._emreportfit;
179679    +        /* prefer to use HPREPORTSTATS table from the modeling nodel */
179681    +        %if %sysfunc(exist(&em_lib..&em_report_modelid._hpreportstats)) %then %do;
179683    +            %EM_GETNAME(key=REPORTFIT, type=DATA);
179685    +            data &EM_USER_REPORTFIT;
179686    +                set &em_lib..&em_report_modelid._hpreportstats;
179687    +            run;
179689    +            %let validfit=0;
179690    +            %let dsid = %sysfunc(open(&EM_USER_REPORTFIT));
179691    +            %if &dsid %then %do;
179692    +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
179693    +                %if &validnum %then %let validfit = 1;
179694    +            %end;
179695    +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
179697    +            ods &EM_REPORT_FORMAT text=" ";
179698    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179698   !+rpt_modelfitstat_title, NOQUOTE))";
179699    +            ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title,
179699   !+NOQUOTE))";
179701    +            proc print data=&EM_USER_REPORTFIT label noobs style=[outputwidth=50%];
179702    +                %if &validfit eq 1 %then %do;
179703    +                    var Label Train Validate;
179704    +                    format Train 12.4 Validate 12.4;
179705    +                %end;
179706    +                %else %do;
179707    +                    var Label Train;
179708    +                    format Train 12.4;
179709    +                %end;
179710    +            run;
179711    +        %end;
179712    +        %else %if %sysfunc(exist(&fitdat1)) or %sysfunc(exist(&fitdat2)) %then %do;
179714    +            %EM_GETNAME(key=REPORTFIT, type=DATA);
179716    +            data &EM_USER_REPORTFIT;
179717    +                length Label $40;
179718    +                label Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel,
179718   !+ NOQUOTE))";
179719    +                %if %sysfunc(exist(&fitdat1)) eq 1
179720    +                    %then %do; set &fitdat1; %end;
179721    +                    %else %do; set &fitdat2.(rename=(stat=fitstat)); %end;
179723    +                if FitStat='_LIFT_'  then Label="%sysfunc(sasmsg(sashelp.dmine,
179723   !+rpt_rptlift10_vlabel, NOQUOTE))";
179724    +                if FitStat='_LIFTC_' then Label="%sysfunc(sasmsg(sashelp.dmine,
179724   !+rpt_rptcumlift10_vlabel, NOQUOTE))";
179725    +                if FitStat='_CAP_'  then Label="%sysfunc(sasmsg(sashelp.dmine,
179725   !+rpt_rptcaptresp10_vlabel, NOQUOTE))";
179726    +                if FitSTat='_CAPC_' then Label="%sysfunc(sasmsg(sashelp.dmine,
179726   !+rpt_rptcumcaptresp10_vlabel, NOQUOTE))";
179727    +                if FitSTat='_NOBS_' then Label="%sysfunc(sasmsg(sashelp.dmine,
179727   !+stat_nobs_vlabel, NOQUOTE))";
179728    +                if FitSTat='_MISC_' then Label= "%sysfunc(sasmsg(sashelp.dmine,
179728   !+stat_misc_vlabel, NOQUOTE))";
179729    +                if FitSTat='_MAX_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179729   !+stat_max_vlabel, NOQUOTE))";
179730    +                if FitSTat='_SSE_'  then Label= "%sysfunc(sasmsg(sashelp.dmine,
179730   !+stat_sse_vlabel, NOQUOTE))";
179731    +                if FitSTat='_ASE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179731   !+rpt_fitstat_label_ase, NOQUOTE))";
179732    +                if FitSTat='_RASE_' then Label = "%sysfunc(sasmsg(sashelp.dmine,
179732   !+stat_rase_vlabel, NOQUOTE))";
179733    +                if FitSTat='_DIV_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179733   !+stat_div_vlabel, NOQUOTE))";
179734    +                if FitSTat='_DFT_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179734   !+rpt_fitstat_label_dft, NOQUOTE))";
179735    +                if FitSTat='_AIC_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179735   !+rpt_fitstat_label_aic, NOQUOTE))";
179736    +                if FitSTat='_MSE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179736   !+rpt_fitstat_label_mse, NOQUOTE))";
179737    +                if FitSTat='_RMSE_' then Label = "%sysfunc(sasmsg(sashelp.dmine,
179737   !+rpt_fitstat_label_rmse, NOQUOTE))";
179738    +                if FitSTat='_AVERR_' then Label = "%sysfunc(sasmsg(sashelp.dmine,
179738   !+stat_averr_vlabel, NOQUOTE))";
179739    +                if FitSTat='_DFE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179739   !+rpt_fitstat_label_dfe, NOQUOTE))";
179740    +                if FitSTat='_DFM_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179740   !+rpt_fitstat_label_dfm, NOQUOTE))";
179741    +                if FitSTat='_ERR_'  then Label= "%sysfunc(sasmsg(sashelp.dmine,
179741   !+stat_err_vlabel, NOQUOTE))";
179742    +                if FitSTat='_FPE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179742   !+rpt_fitstat_label_fpe, NOQUOTE))";
179743    +                if FitSTat='_NW_'   then Label = "%sysfunc(sasmsg(sashelp.dmine,
179743   !+rpt_fitstat_label_nw, NOQUOTE))";
179744    +                if FitSTat='_RFPE_' then Label = "%sysfunc(sasmsg(sashelp.dmine,
179744   !+rpt_fitstat_label_rfpe, NOQUOTE))";
179745    +                if FitSTat='_SBC_'  then Label = "%sysfunc(sasmsg(sashelp.dmine,
179745   !+rpt_fitstat_label_sbc, NOQUOTE))";
179746    +            run;
179748    +            %let validfit=0;
179749    +            %let dsid = %sysfunc(open(&EM_USER_REPORTFIT));
179750    +            %if &dsid %then %do;
179751    +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
179752    +                %if &validnum %then %let validfit = 1;
179753    +            %end;
179754    +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
179756    +            ods &EM_REPORT_FORMAT text=" ";
179757    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179757   !+rpt_modelfitstat_title, NOQUOTE))";
179758    +            ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title,
179758   !+NOQUOTE))";
179760    +            proc print data=
179761    +                %if %sysfunc(exist(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit)) eq 1
179762    +                %then %do;
179763    +                    &EM_USER_REPORTFIT(where=(MODEL="&em_report_modelId" AND
179763   !+TARGET="&rpt_rpm_targetName"))
179764    +                %end;
179765    +                %else %do;
179766    +                    &EM_USER_REPORTFIT(where=(TARGET="&rpt_rpm_targetName"))
179767    +                %end;
179768    +                label noobs style=[outputwidth=50%];
179769    +                %if &validfit eq 1 %then %do;
179770    +                    var Label Train Validate;
179771    +                    format Train 12.4 Validate 12.4;
179772    +                    label
179773    +                        train = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel ,
179773   !+NOQUOTE))"
179774    +                        validate = "%sysfunc(sasmsg(sashelp.dmine,
179774   !+rpt_validate_vlabel , NOQUOTE))"
179775    +                    ;
179776    +                %end;
179777    +                %else %do;
179778    +                    var Label Train;
179779    +                    format Train 12.4;
179780    +                    label train = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel ,
179780   !+ NOQUOTE))";
179781    +                %end;
179782    +                %if %sysfunc(exist(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit)) eq 1
179783    +                %then %do;
179784    +                    where FitStat in ('_NOBS_', '_MISC_', '_LOSS_', '_ALOSS_',
179784   !+'_ASE_', '_AUR_', '_GINI_', 'KS',
179785    +                                      '_KS_PROB_CUTOFF', '_LIFT_', '_LIFTC_',
179785   !+'_CAP_', '_CAPC_', '_AIC_', '_AVERR_',
179786    +                                      '_MAX_','_MSE_', '_RASE_', '_RMSE_', '_SBC_',
179786   !+'_SSE_') and TRAIN ne .;
179787    +                %end;
179788    +                %else %do;
179789    +                    where FitStat in ('_NOBS_', '_MISC_', '_LOSS_', '_ALOSS_',
179789   !+'_ASE_', '_AIC_', '_AVERR_', '_MAX_',
179790    +                                      '_MSE_', '_RASE_', '_RMSE_', '_SBC_', '_SSE_')
179790   !+ and TRAIN ne .;
179791    +                %end;
179792    +            run;
179793    +        %end;
179794    +    %end;
179796    +    /* RPM-11. Model Comparison Table */
179798    +    %if &EM_PROPERTY_COMPAREMDL eq Y and RPM_REPORT_MDLCOMP ne %then %do;
179800    +        %EM_GETNAME(KEY=COMPAREMDL, TYPE=DATA);
179802    +        %let em_report_mdlOutfit = &em_lib..&RPM_REPORT_MDLCOMP._emoutfit;
179804    +        %if %sysfunc(exist(&em_report_mdlOutfit)) %then %do;
179806    +            /* determine model selection criterion - to included in print */
179807    +            %em_modelprops(dgmid=&em_lib, modelid=&RPM_REPORT_MDLCOMP,
179807   !+output=%nrbquote(work.modelprop));
179809    +            %let selectcrit = ;
179810    +            data _null_;
179811    +                set work.modelprop(where=(NAME="ModelCriteria")) end=eof;
179812    +                if eof then call symput('selectcrit', VALUE);
179813    +            run;
179815    +            %let selectstat=;
179816    +            %let choice = USE="Y";
179817    +            %let dsid = %sysfunc(open(&em_report_mdlOutfit(where=(&choice))));
179818    +            %if &dsid %then %do;
179819    +                %let obs = %sysfunc(fetchobs(&dsid, 1));
179820    +                %let selectstat = %sysfunc(VARNAME(&dsid, 6));
179821    +            %end;
179822    +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
179824    +            %let validflag=0;
179825    +            %let dsid = %sysfunc(open(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit));
179826    +            %if &dsid %then %do;
179827    +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
179828    +                %if &validnum %then %let validflag = 1;
179829    +            %end;
179830    +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
179832    +            data &EM_USER_COMPAREMDL;
179833    +                set &em_report_mdlOutfit;
179834    +                keep use model modelDescription &selectstat
179835    +                %if "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
179836    +                    %if &selectstat ne _LIFT_ %then %do; _LIFT_ %end;
179837    +                    %if &validflag eq 1 %then %do;
179838    +                        %if &selectstat ne _VLIFT_ %then %do; _VLIFT_ %end;
179839    +                    %end;
179840    +                    %if &selectstat ne _AIC_ %then %do; _AIC_  %end;
179841    +                %end;
179842    +                %else %do;
179843    +                    %if &selectstat ne _ASE_ %then %do; _ASE_ %end;
179844    +                    %if &validflag eq 1 %then %do;
179845    +                        %if &selectstat ne _VASE_ %then %do; _VASE_ %end;
179846    +                    %end;
179847    +                %end;
179848    +                ;
179849    +            run;
179851    +            ods &EM_REPORT_FORMAT text=" ";
179852    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179852   !+rpt_rptcomparemdl_title, NOQUOTE, &selectcrit))";
179853    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcomparemdl_title,
179853   !+NOQUOTE, &selectcrit))";
179855    +            proc print data=&EM_USER_COMPAREMDL label noobs style=[outputwidth=50%];
179855   !+ run;
179856    +        %end;
179857    +    %end;
179859    +    /* RPM-12. Project Info */
179861    +    %if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
179863    +        %let pos = %index(&em_nodedir, Workspaces);
179864    +        %if &pos %then %do;
179866    +            %let projpath = %nrbquote(%sysfunc(trim(%sysfunc(substr(&em_nodedir, 1,
179866   !+%eval(&pos-2))))));
179867    +            %let reverse = %nrbquote(%sysfunc(reverse(&projpath)));
179868    +            %let pos2 = %index(&reverse, &em_dsep);
179869    +            %let len = %length(&projpath);
179870    +            %let projname = %nrbquote(%substr(&projpath, %eval(2+ &len-&pos2)));
179871    +            %let projname =%nrbquote(%sysfunc(tranwrd(%nrstr(&projname),
179871   !+%str(%"),"")));
179872    +            %let wsname  = %nrbquote(%sysfunc(tranwrd(%nrstr(&em_wsname),
179872   !+%str(%"),"")));
179874    +            %EM_GETNAME(key=PROJINFO, type=DATA);
179875    +            data &EM_USER_PROJINFO;
179876    +                length stat $200 value $200;
179877    +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name,
179877   !+NOQUOTE))";
179878    +                value="&projname";
179879    +                output;
179881    +                stat="%sysfunc(sasmsg(sashelp.dmine, views_descriptions_diagram,
179881   !+NOQUOTE))";
179882    +                value="&wsname";
179883    +                output;
179885    +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpath_title, NOQUOTE))";
179886    +                value="&projpath";
179887    +                output;
179889    +                %let createTime = %sysfunc(left(%sysfunc(putn(%sysfunc(dateTime()),
179889   !+NLDATM24.0))));
179890    +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_crdate_vlabel, NOQUOTE))";
179891    +                value="&createTime";
179892    +                output;
179894    +                label stat="%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel,
179894   !+NOQUOTE))"
179895    +                      value="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel,
179895   !+NOQUOTE))";
179897    +            run;
179899    +            ods &EM_REPORT_FORMAT text=" ";
179900    +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine,
179900   !+rpt_rptprojinfo_title, NOQUOTE))";
179901    +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptprojinfo_title,
179901   !+NOQUOTE))";
179903    +            proc print data=&EM_USER_PROJINFO noobs label style=[outputwidth=50%];
179903   !+run;
179904    +        %end;
179905    +    %end;
179906    +%end;
179908    +%skip:
179910    +%mend em_report_summary;
179913    +%macro em_reporter_scorecard(
179914    +/**----------------------------------------------------------------------**/
179915    +/*  EM_REPORTER_SCORECARD                                                 */
179916    +/*    generate scorecard report for EM RPM flows. currently this is an    */
179917    +/*    interval macro for RPM and does not perform any argument checking.  */
179918    +/**----------------------------------------------------------------------**/
179919    +inData           = ,     /* input training data set                       */
179920    +inData2          = ,
179921    +inVariableSet    = ,     /* input variable metadata, must have the three  */
179922    +                         /* columns: level, role and &name                */
179923    +name             = name, /* variable name column in the metadata          */
179924    +libname          = work, /* libname to save the temporary binned data     */
179925    +crosstab         = Y,    /* create cross-tabulation or not. Default = Y   */
179926    +targetVar        = ,     /* target variable for regressions and scores    */
179927    +targetVar2       = ,     /* target variable for cross-tabulations         */
179928    +targetLevel      = ,     /* target level                                  */
179929    +freqVar          = ,     /* frequency variable                            */
179930    +outVarRank       = ,     /* output dataset for variable ranking (HPREDUCE)*/
179931    +outScorecard     =       /* output dataset for scorecard report           */
179932    +/**----------------------------------------------------------------------**/
179933    +/* Created: 08/20/2012, XXM                                               */
179934    +/**----------------------------------------------------------------------**/
179935    +);
179937    +/**---------------------------------------------------------------------------------
179937   !+-----**/
179938    +/** 0. Configurations
179938   !+     **/
179939    +/**---------------------------------------------------------------------------------
179939   !+-----**/
179941    +** get target level;
179942    +%let targetVar   = &targetVar;
179943    +%let targetVar2  = &targetVar2;
179944    +%let targetLevel = &targetLevel;
179946    +** check valid target name and level;    /* TBA */
179948    +** check VariableSet has LEVEL and NAME; /* TBA */
179950    +/**---------------------------------------------------------------------------------
179950   !+-----**/
179951    +/** 1. Get the input variables from variable set
179951   !+     **/
179952    +/**---------------------------------------------------------------------------------
179952   !+-----**/
179954    +%let nom_vars = ;
179955    +%let ord_vars = ;
179956    +%let int_vars = ;
179957    +%let n_nomvars = 0;
179958    +%let n_ordvars = 0;
179959    +%let n_intvars = 0;
179961    +data _null_;
179962    +    set &inVariableSet(where=(LEVEL in ('NOMINAL', 'BINARY') and upcase(&name) ne
179962   !+"&targetVar")) end=eof;
179963    +    call symput('nom_vars'!!strip(put(_N_,BEST.)), strip(&name));
179964    +    if eof then call symput('n_nomvars', strip(put(_N_,BEST.)));
179965    +data _null_;
179966    +    set &inVariableSet(where=(LEVEL='ORDINAL' and upcase(&name) ne "&targetVar"))
179966   !+end=eof;
179967    +    call symput('ord_vars'!!strip(put(_N_,BEST.)), strip(&name));
179968    +    if eof then call symput('n_ordvars', strip(put(_N_,BEST.)));
179969    +data _null_;
179970    +    set &inVariableSet(where=(LEVEL='INTERVAL' and upcase(&name) ne "&targetVar"))
179970   !+end=eof;
179971    +    call symput('int_vars'!!strip(put(_N_,BEST.)), strip(&name));
179972    +    if eof then call symput('n_intvars', strip(put(_N_,BEST.)));
179973    +run;
179975    +%let n_svars = %eval(&n_nomvars+&n_ordvars+&n_intvars);
179977    +%if ((&n_nomvars gt 0) OR (&n_ordvars gt 0) OR (&n_intvars gt 0)) %then %do;
179979    +    /**-----------------------------------------------------------------------------
179979   !+-----**/
179980    +    /** 2. PROC ARBOR
179980   !+     **/
179981    +    /**-----------------------------------------------------------------------------
179981   !+-----**/
179983    +    proc arbor data=&indata
179984    +        alpha=1 leafsize=5 mincatsize=5 maxbranch=8 maxdepth=1 NORULELIMIT
179985    +        maxrules=&n_svars maxsurrs=0 missing=USEINSEARCH exhaustive=5000
179986    +    ;
179987    +        %if &n_nomvars gt 0 %then %do;
179988    +            input %do i=1 %to &n_nomvars; &&nom_vars&i %end; / level = nominal;
179989    +        %end;
179990    +        %if &n_ordvars gt 0 %then %do;
179991    +            input %do i=1 %to &n_ordvars; &&ord_vars&i %end; / level = ordinal;
179992    +        %end;
179993    +        %if &n_intvars gt 0 %then %do;
179994    +            input %do i=1 %to &n_intvars; &&int_vars&i %end; / level = interval;
179995    +        %end;
179996    +        %if &freqvar ne %then %do; freq &freqvar; %end;
179997    +        target &targetVar / level=&targetLevel;
179998    +        save importance=importance rules=rules;
179999    +    run;
180001    +    /**-----------------------------------------------------------------------------
180001   !+-----**/
180002    +    /** 2. get VarRank output table
180002   !+     **/
180003    +    /**-----------------------------------------------------------------------------
180003   !+-----**/
180005    +    /* keep only the top 50 input variables - based on rank */
180007    +    data &outVarRank(where=(rank le 50));
180008    +        length variable $32 worth 8;
180009    +        set rules;
180010    +        by rank;
180011    +        retain variable worth;
180012    +        label variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,
180012   !+NOQUOTE))";
180013    +        keep variable rank worth;
180015    +        if STAT="VARIABLE" then variable=Character_value;
180016    +        if STAT="WORTH" then worth=Numeric_value;
180017    +        if last.rank then output;
180018    +    run;
180020    +    data &outVarRank;
180021    +        set &outVarRank;
180022    +        if worth=. then do;
180023    +            worth = 0.00;
180024    +            rank  = _N_;
180025    +        end;
180026    +    run;
180028    +    /* selected interval and class input variables */
180029    +    proc sql noprint;
180030    +        create table tempclass(drop=&name) as
180031    +            select a.*, b.*  from &outVarRank as a left join &inVariableSet as b
180032    +                on upcase(a.variable) eq upcase(b.&name)
180033    +            where level ne "INTERVAL"
180034    +            order by a.variable
180035    +        ;
180036    +        create table tempinterval(drop=&name) as
180037    +            select a.*, b.*  from &outVarRank as a left join &inVariableSet as b
180038    +                on upcase(a.variable) eq upcase(b.&name)
180039    +            where level eq "INTERVAL"
180040    +            order by a.variable
180041    +        ;
180042    +    quit;
180044    +    /* create array of class variables names */
180045    +    %let class_vars=;
180046    +    %let n_classvars=0;
180047    +    data _null_;
180048    +        set tempclass end=eof;
180049    +        call symput('class_vars'!!strip(put(_N_,BEST.)), strip(variable));
180050    +        if eof then call symput('n_classvars', strip(put(_N_,BEST.)));
180051    +    run;
180053    +    /**-----------------------------------------------------------------------------
180053   !+-----**/
180054    +    /** 3. Get Bining information
180054   !+     **/
180055    +    /**-----------------------------------------------------------------------------
180055   !+-----**/
180057    +    %let dsid = %sysfunc(open(work.rules));
180058    +    %let numobs = %sysfunc(attrn(&dsid, NOBS));
180059    +    %let numvars = %sysfunc(attrn(&dsid, NVARS));
180060    +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
180062    +    %if %sysfunc(exist(&outVarRank)) and (&numobs gt 0) and (&numvars gt 0) %then
180062   !+%do;
180064    +        data rules;
180065    +            set rules;
180066    +            where STAT in ('VARIABLE', 'INTERVAL', 'MISSING');
180067    +            numeric_value = round(numeric_value, 0.001);
180068    +        proc sort data=rules;
180069    +            by rank numeric_value;
180070    +        run;
180072    +        data binning_rules;
180073    +            length origVar $32;
180074    +            set rules;
180075    +            by rank;
180076    +            retain origVar oldLB;
180077    +            keep origVar LB UB;
180079    +            if STAT="VARIABLE" then origVar = Character_value;
180080    +            if first.rank then oldLB=.;
180081    +            if STAT="INTERVAL" then do;
180082    +                LB = oldLB;
180083    +                UB = Numeric_value;
180084    +                oldLB=UB;
180085    +                output;
180086    +            end;
180087    +            if last.rank then do;
180088    +                LB=oldLB;
180089    +                UB = .;
180090    +                output;
180091    +            end;
180092    +        run;
180094    +        /* names for binning */
180095    +        proc sql noprint;
180096    +            create table tempbinnames(drop=variable) as
180097    +                select distinct origVar, role from binning_rules as a inner join
180097   !+tempinterval as b
180098    +                  on a.OrigVar eq b.variable;
180099    +        quit;
180101    +        /* get name server */
180102    +        proc dmdb data=tempbinnames outtable=tempbinnames nameserver;
180103    +            names origVar;
180104    +            prefix BIN_;
180105    +        run;
180107    +        /* merge binned names back to temp */
180108    +        proc sql noprint;
180109    +            create table binning_rules_names as
180110    +                select a.*, b.bin as binVar from binning_rules as a right join
180110   !+tempbinnames as b
180111    +                    on a.origVar eq b.origVar
180112    +                order by a.origVar, a.LB, a.UB;
180113    +        quit;
180115    +        /* create array of bin variables names */
180116    +        %let bin_vars=;
180117    +        %let n_binvars=0;
180118    +        data _null_;
180119    +            set tempbinnames end=eof;
180120    +            call symput('bin_vars'!!strip(put(_N_,BEST.)), strip(bin));
180121    +            if eof then call symput('n_binvars', strip(put(_N_,BEST.)));
180122    +        run;
180124    +    /**-----------------------------------------------------------------------------
180124   !+-----**/
180125    +    /** 4. Bin the interval variables
180125   !+     **/
180126    +    /**    note that binned is used for DMREG, binned_full is used for CROSSTAB
180126   !+     **/
180127    +    /**-----------------------------------------------------------------------------
180127   !+-----**/
180129    +    data binned;
180130    +        set &indata;
180132    +        %if &n_binvars gt 0 %then %do;
180133    +            length %do i=1 %to &n_binvars; &&bin_vars&i %end; $50;
180134    +        %end;
180136    +        %let dsid = %sysfunc(open(binning_rules_names));
180137    +        %if &dsid %then %do;
180138    +            %let orignum = %sysfunc(VARNUM(&dsid, origVar));
180139    +            %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
180140    +            %let lbnum   = %sysfunc(VARNUM(&dsid, LB));
180141    +            %let ubnum   = %sysfunc(VARNUM(&dsid, UB));
180143    +            %let obs     = %sysfunc(fetch(&dsid));
180144    +            %do %while(&obs=0);
180145    +                %let origvar = %sysfunc(getvarc(&dsid, &orignum));
180146    +                %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
180147    +                %let lb   = %sysfunc(getvarn(&dsid, &lbnum));
180148    +                %let ub   = %sysfunc(getvarn(&dsid, &ubnum));
180150    +                %if "&lb" eq "." AND "&ub" ne "." %then %do;
180151    +                    %let count = 1;
180152    +                    if &origvar < &ub then &binvar = "&count: low - &ub";
180153    +                %end;
180154    +                %else %if "&lb" ne "." AND "&ub" eq "." %then %do;
180155    +                    %let count = %eval(&count+1);
180156    +                    else if &origvar >= &lb then &binvar = "&count: &lb - high";
180157    +                %end;
180158    +                %else %if "&lb" eq "." AND "&ub" eq "." %then %do;
180159    +                    %let count = 1;
180160    +                    &binvar = "&count: low - high";
180161    +                %end;
180162    +                %else %do;
180163    +                    %let count = %eval(&count+1);
180164    +                    else if &origvar < &ub AND &origvar >= &lb then &binvar =
The SAS System
 
180164   !+"&count: &lb - &ub";
180165    +                %end;
180167    +                %let obs = %sysfunc(fetch(&dsid));
180168    +            %end;
180169    +        %end;
180170    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
180171    +    run;
180173    +    data binned_full;
180174    +        set &indata2;
180176    +        %if &n_binvars gt 0 %then %do;
180177    +            length %do i=1 %to &n_binvars; &&bin_vars&i %end; $50;
180178    +        %end;
180180    +        %let dsid = %sysfunc(open(binning_rules_names));
180181    +        %if &dsid %then %do;
180182    +            %let orignum = %sysfunc(VARNUM(&dsid, origVar));
180183    +            %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
180184    +            %let lbnum   = %sysfunc(VARNUM(&dsid, LB));
180185    +            %let ubnum   = %sysfunc(VARNUM(&dsid, UB));
180187    +            %let obs     = %sysfunc(fetch(&dsid));
180188    +            %do %while(&obs=0);
180189    +                %let origvar = %sysfunc(getvarc(&dsid, &orignum));
180190    +                %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
180191    +                %let lb   = %sysfunc(getvarn(&dsid, &lbnum));
180192    +                %let ub   = %sysfunc(getvarn(&dsid, &ubnum));
180194    +                %if "&lb" eq "." AND "&ub" ne "." %then %do;
180195    +                    %let count = 1;
180196    +                    if &origvar < &ub then &binvar = "&count: low - &ub";
180197    +                %end;
180198    +                %else %if "&lb" ne "." AND "&ub" eq "." %then %do;
180199    +                    %let count = %eval(&count+1);
180200    +                    else if &origvar >= &lb then &binvar = "&count: &lb - high";
180201    +                %end;
180202    +                %else %if "&lb" eq "." AND "&ub" eq "." %then %do;
180203    +                    %let count = 1;
180204    +                    &binvar = "&count: low - high";
180205    +                %end;
180206    +                %else %do;
180207    +                    %let count = %eval(&count+1);
180208    +                    else if &origvar < &ub AND &origvar >= &lb then &binvar =
180208   !+"&count: &lb - &ub";
180209    +                %end;
180211    +                %let obs     = %sysfunc(fetch(&dsid));
180212    +            %end;
180213    +        %end;
180214    +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
180215    +    run;
180217    +    /**-----------------------------------------------------------------------------
180217   !+-----**/
180218    +    /** 5. Generate scores
180218   !+     **/
180219    +    /**-----------------------------------------------------------------------------
180219   !+-----**/
180221    +    proc dmdb batch data=binned dmdbcat=score_dmdb maxlevel=513 classout=_classout;
180222    +        class
180223    +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars;
180223   !+&&class_vars&i %end; %end;
180224    +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i
180224   !+  %end; %end;
180225    +            %if "&targetLevel" ne "INTERVAL" %then %do; &targetVar %end;
180226    +        ;
180227    +        %if &freqvar ne %then %do; freq &freqvar; %end;
180228    +        %if "&targetLevel" eq  "INTERVAL" %then %do; var &targetVar; %end;
180229    +        target &targetVar;
180230    +    run; quit;
180232    +    proc dmreg data=binned dmdbcat=score_dmdb outest=coeff_est outterms=outterms
180232   !+noprint descending;
180233    +        class
180234    +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars;
180234   !+&&class_vars&i %end; %end;
180235    +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i
180235   !+  %end; %end;
180236    +            %if "&targetLevel" ne "INTERVAL" %then %do; &targetVar %end;
180237    +        ;
180238    +        %if &freqvar ne %then %do; freq &freqvar; %end;
180239    +        model &targetVar =
180240    +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars;
180240   !+&&class_vars&i %end; %end;
180241    +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i
180241   !+  %end; %end;
180242    +            / coding=glm
180243    +        ;
180244    +    run;
180246    +    proc sql noprint;
180247    +        create table _score_tmp1 as
180248    +            select *, min(coefficient) as min_est,
180249    +                case when calculated min_est = coefficient then 0
180250    +                     else coefficient-calculated min_est
180251    +                end as est1
180252    +            from outterms
180253    +            where variable ne 'Intercept'
180254    +            group by variable
180255    +        ;
180256    +        create table _score_tmp2 as
180257    +            select *, max(est1) as max_est1, count(*) as counter
180258    +            from _score_tmp1
180259    +            group by variable
180260    +        ;
180261    +        create table &outScorecard(rename=(classlevel=value)) as
180262    +            select *, sum(max_est1/counter) as sum_max,
180263    +                case when est1=max_est1 then 1 else 0 end as max_cat,
180264    +                round(1000*((est1) / calculated sum_max)) as score
180265    +            from _score_tmp2
180266    +            order by variable, classlevel
180267    +        ;
180268    +        create table _classout2(rename=(name=variable level=value)) as
180269    +            select a.*, b.format
180270    +                from _classout as a left join &inVariableSet(keep=&name format) as b
180271    +                on a.name eq b.&name
180272    +            order by a.name, a.level
180273    +        ;
180274    +    quit;
180276    +    data &outScorecard;
180277    +        merge &outScorecard(in=_a) _classout2;
180278    +        by variable value;
180279    +        if _a;
180280    +        value = tranwrd(value, "'", "''");
180281    +        rename frequency   = AllFreq
180282    +               freqpercent = AllPercent;
180283    +        label  score       = "%sysfunc(sasmsg(sashelp.dmine,
180283   !+rpt_scorecardpoints_vlabel, NOQUOTE))"
180284    +               frequency   = "%sysfunc(sasmsg(sashelp.dmine, rpt_numObs_vlabel,
180284   !+NOQUOTE))"
180285    +               freqpercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptperctobs_vlabel,
180285   !+ NOQUOTE))";
180286    +    run;
180288    +    /* replace binned named with original var name instead */
180290    +    proc sort data=tempbinnames; by bin; run;
180292    +    data &outScorecard;
180293    +        merge &outScorecard(in=_a) tempbinnames(rename=(bin=variable
180293   !+origvar=displayVar)) ;
180294    +        by variable;
180295    +        if _a;
180296    +        if displayVar="" then displayVar=variable;
180297    +    run;
180299    +    /**-----------------------------------------------------------------------------
180299   !+-----**/
180300    +    /** 6. Generate crosstabs
180300   !+     **/
180301    +    /**-----------------------------------------------------------------------------
180301   !+-----**/
180303    +    %if "&targetLevel" ne "INTERVAL" %then %do;
180305    +        ods &EM_REPORT_FORMAT exclude all;
180306    +        ods listing;
180308    +        data _null_;
180309    +            set &outScorecard end=eof;
180310    +            by variable;
180311    +            if _n_=1          then call execute("proc freq data=work.binned_full
180311   !+order=formatted addnames;");
180312    +            if first.variable then call execute("table "||variable||" * &targetVar2
180312   !+/ missing;");
180313    +            if eof then do;
180314    +                %if &freqvar ne %then %do; call execute("weight &freqvar;"); %end;
180315    +                call execute("ods output crosstabfreqs=tempfreq;");
180316    +                call execute("run;");
180317    +            end;
180318    +        run;
180320    +        data _null_;
180321    +            set &outScorecard end=eof;
180322    +            by variable value;
180324    +            if _n_=1 then do;
180325    +                call execute("data crosstabs;");
180326    +                call execute("  length varvalue $200 displayVar $32;");
180327    +                call execute("  set tempfreq(where=(_type_='11'));");
180328    +            end;
180330    +            if type="N" AND format eq "" then do;
180331    +                call execute("if "||Variable||" = "||value||" then do;");
180332    +            end;
180333    +            else do;
180334    +                if format ne ""
180335    +                    then call execute("%DMNORMCP(put("||variable||","||format||"),
180335   !+_normvar);");
180336    +                    else call execute("%DMNORMCP("||variable||", _normvar);");
180337    +                call execute("if strip(_normvar) = '"||strip(value)||"' then do;");
180338    +            end;
180340    +            call execute("  varvalue='"||strip(value)||"';");
180341    +            call execute("  scorepoints="||score||";");
180342    +            call execute("  allfreq="||allfreq||";");
180343    +            call execute("  allpercent="||allpercent||";");
180344    +            call execute("  displayVar='"||displayVar||"';");
180345    +            call execute("end;");
180347    +            if eof then call execute("run;");
180348    +        run;
180350    +        ods &EM_REPORT_FORMAT select all;
180351    +        ods listing close;
180353    +        proc sort data=crosstabs; by rowVariable varvalue; run;
180355    +        data &outScoreCard;
180356    +            set crosstabs;
180357    +            by rowVariable varvalue;
180358    +            if missing(scorepoints) then delete;
180359    +            if ^first.varvalue then do;
180360    +                 scorepoints=.;
180361    +                 allfreq=.;
180362    +                 allpercent=.;
180363    +            end;
180364    +            keep displayvar rowVariable varValue &targetVar2 scorepoints frequency
180364   !+colPercent allfreq allpercent ;
180365    +        run;
180366    +    %end;
180367    +    %else %do;
180368    +        data &outScoreCard;
180369    +            set &outScoreCard;
180370    +            rename value=varvalue score=scorepoints;
180371    +        run;
180372    +    %end;
180373    +%end;
180375    +/*    proc datasets lib=work nolist;*/
180376    +/*    run; quit;*/
180377    +%end;
180379    +%mend em_reporter_scorecard;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source' ;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
180380    +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
180381    +   proc display c=sashelp.emcore.pathscorecode.scl;
180382    +   run;
180383    +%mend EM_GETTRAINPATH;
180384    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog
'sashelp.emutil.reporter_tagset_template.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TAGSET_TEMPLATE.SOURCE.
180385    +Ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_CREATE):   Ods path(prepend) work.templat(update);
180386    +
180387    +/* emgraph.tpl */
180388    +proc template;
MPRINT(EM_REPORT_CREATE):   proc template;
180389    +define tagset tagsets.gtl / store=work.templat;
MPRINT(EM_REPORT_CREATE):   define tagset tagsets.gtl / store=work.templat;
180390    +parent=tagsets.odsgraph;
MPRINT(EM_REPORT_CREATE):   parent=tagsets.odsgraph;
180391    +%let  map =<>%nrstr(&)%str(%')%str(%");
180392    +map="&map";
MPRINT(EM_REPORT_CREATE):   map="<>&'"";
180393    +mapsub = '/&lt;/&gt;/&amp;/&#39;/&quot;/';
MPRINT(EM_REPORT_CREATE):   mapsub = '/&lt;/&gt;/&amp;/&#39;/&quot;/';
180394    +nobreakspace = ' ' no_byte_order_mark = yes;
MPRINT(EM_REPORT_CREATE):   nobreakspace = ' ' no_byte_order_mark = yes;
180395    +split = '<br/>';
MPRINT(EM_REPORT_CREATE):   split = '<br/>';
180396    +output_type = 'xml';
MPRINT(EM_REPORT_CREATE):   output_type = 'xml';
180397    +indent=2;
MPRINT(EM_REPORT_CREATE):   indent=2;
180398    +
180399    +define event options_set;
MPRINT(EM_REPORT_CREATE):   define event options_set;
180400    +    do / if $options['X'];
MPRINT(EM_REPORT_CREATE):   do / if $options['X'];
180401    +         set $xvar $options['X'];
MPRINT(EM_REPORT_CREATE):   set $xvar $options['X'];
180402    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180403    +         unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
180404    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180405    +
180406    +    do / if $options['Y'];
MPRINT(EM_REPORT_CREATE):   do / if $options['Y'];
180407    +         set $yvar $options['Y'];
MPRINT(EM_REPORT_CREATE):   set $yvar $options['Y'];
180408    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180409    +         unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
180410    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180411    +
180412    +    do / if $options['CATEGORY'];
MPRINT(EM_REPORT_CREATE):   do / if $options['CATEGORY'];
180413    +         set $category $options['CATEGORY'];
MPRINT(EM_REPORT_CREATE):   set $category $options['CATEGORY'];
180414    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180415    +         unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
180416    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180417    +
180418    +    do / if $options['RESPONSE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['RESPONSE'];
180419    +         set $response $options['RESPONSE'];
MPRINT(EM_REPORT_CREATE):   set $response $options['RESPONSE'];
180420    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180421    +         unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
180422    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180423    +
180424    +    do / if $options['LIMITUPPER'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LIMITUPPER'];
180425    +         set $limitupper $options['LIMITUPPER'];
MPRINT(EM_REPORT_CREATE):   set $limitupper $options['LIMITUPPER'];
180426    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180427    +         unset $limitupper;
MPRINT(EM_REPORT_CREATE):   unset $limitupper;
180428    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180429    +
180430    +    do / if $options['LIMITLOWER'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LIMITLOWER'];
180431    +         set $limitlower $options['LIMITLOWER'];
MPRINT(EM_REPORT_CREATE):   set $limitlower $options['LIMITLOWER'];
180432    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180433    +         unset $limitlower;
MPRINT(EM_REPORT_CREATE):   unset $limitlower;
180434    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180435    +
180436    +    do / if $options['WIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['WIDTH'];
180437    +         set $graphwidth $options['WIDTH'];
MPRINT(EM_REPORT_CREATE):   set $graphwidth $options['WIDTH'];
180438    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180439    +         unset $graphwidth;
MPRINT(EM_REPORT_CREATE):   unset $graphwidth;
180440    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180441    +
180442    +    do / if $options['HEIGHT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['HEIGHT'];
180443    +         set $graphheight $options['HEIGHT'];
MPRINT(EM_REPORT_CREATE):   set $graphheight $options['HEIGHT'];
180444    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180445    +         unset $graphheight;
MPRINT(EM_REPORT_CREATE):   unset $graphheight;
180446    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180447    +
180448    +    do / if $options['ROWS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ROWS'];
180449    +         set $rows $options['ROWS'];
MPRINT(EM_REPORT_CREATE):   set $rows $options['ROWS'];
180450    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180451    +         unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
180452    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180453    +
180454    +    do / if $options['COLUMNS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLUMNS'];
180455    +         set $columns $options['COLUMNS'];
MPRINT(EM_REPORT_CREATE):   set $columns $options['COLUMNS'];
180456    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180457    +         unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
180458    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180459    +
180460    +    do / if $options['TITLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE'];
180461    +         set $title $options['TITLE'];
MPRINT(EM_REPORT_CREATE):   set $title $options['TITLE'];
180462    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180463    +         unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title;
180464    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180465    +
180466    +    do / if $options['TITLE2'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE2'];
180467    +         set $title2 $options['TITLE2'];
MPRINT(EM_REPORT_CREATE):   set $title2 $options['TITLE2'];
180468    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180469    +         unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title2;
180470    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180471    +
180472    +do / if $options['TITLE3'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE3'];
180473    +         set $title3 $options['TITLE3'];
MPRINT(EM_REPORT_CREATE):   set $title3 $options['TITLE3'];
180474    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180475    +         unset $title3;
MPRINT(EM_REPORT_CREATE):   unset $title3;
180476    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180477    +
180478    +do / if $options['TITLE4'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE4'];
180479    +         set $title4 $options['TITLE4'];
MPRINT(EM_REPORT_CREATE):   set $title4 $options['TITLE4'];
180480    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180481    +         unset $title4;
MPRINT(EM_REPORT_CREATE):   unset $title4;
180482    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180483    +
180484    +    do / if $options['ID'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ID'];
180485    +         set $id $options['ID'];
MPRINT(EM_REPORT_CREATE):   set $id $options['ID'];
180486    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180487    +         unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
180488    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180489    +
180490    +    do / if $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PARENT'];
180491    +         set $parent $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   set $parent $options['PARENT'];
180492    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180493    +         unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
180494    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180495    +
180496    +    do / if $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PARENT'];
180497    +         set $parent $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   set $parent $options['PARENT'];
180498    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180499    +         unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
180500    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180501    +
180502    +    do / if $options['ABOVETEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ABOVETEXT'];
180503    +         set $abovetext $options['ABOVETEXT'];
MPRINT(EM_REPORT_CREATE):   set $abovetext $options['ABOVETEXT'];
180504    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180505    +         unset $abovetext;
MPRINT(EM_REPORT_CREATE):   unset $abovetext;
180506    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180507    +
180508    +    do / if $options['BELOWTEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['BELOWTEXT'];
180509    +         set $belowtext $options['BELOWTEXT'];
MPRINT(EM_REPORT_CREATE):   set $belowtext $options['BELOWTEXT'];
180510    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180511    +         unset $belowtext;
MPRINT(EM_REPORT_CREATE):   unset $belowtext;
180512    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180513    +
180514    +    do / if $options['LINKWIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LINKWIDTH'];
180515    +         set $linkwidth $options['LINKWIDTH'];
MPRINT(EM_REPORT_CREATE):   set $linkwidth $options['LINKWIDTH'];
180516    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180517    +         unset $linkwidth;
MPRINT(EM_REPORT_CREATE):   unset $linkwidth;
180518    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180519    +
180520    +    do / if $options['NODECOLOR'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODECOLOR'];
180521    +         set $nodecolor $options['NODECOLOR'];
MPRINT(EM_REPORT_CREATE):   set $nodecolor $options['NODECOLOR'];
180522    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180523    +         unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
180524    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180525    +
180526    +    do / if $options['NODESIZE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODESIZE'];
180527    +         set $nodesize $options['NODESIZE'];
MPRINT(EM_REPORT_CREATE):   set $nodesize $options['NODESIZE'];
180528    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180529    +         unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
180530    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180531    +
180532    +    do / if $options['NODETEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODETEXT'];
180533    +         set $nodetext $options['NODETEXT'];
MPRINT(EM_REPORT_CREATE):   set $nodetext $options['NODETEXT'];
180534    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180535    +         unset $nodetext;
MPRINT(EM_REPORT_CREATE):   unset $nodetext;
180536    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180537    +
180538    +    do / if $options['PFDITEMS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PFDITEMS'];
180539    +         set $pfditems $options['PFDITEMS'];
MPRINT(EM_REPORT_CREATE):   set $pfditems $options['PFDITEMS'];
180540    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180541    +         unset $pfditems;
MPRINT(EM_REPORT_CREATE):   unset $pfditems;
180542    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180543    +
180544    +    do / if $options['GRIDSTYLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDSTYLE'];
180545    +         set $gridstyle $options['GRIDSTYLE'];
MPRINT(EM_REPORT_CREATE):   set $gridstyle $options['GRIDSTYLE'];
180546    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180547    +         unset $gridstyle;
MPRINT(EM_REPORT_CREATE):   unset $gridstyle;
180548    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180549    +
180550    +    do / if $options['GRIDHEIGHT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDHEIGHT'];
180551    +         set $gridheight $options['GRIDHEIGHT'];
MPRINT(EM_REPORT_CREATE):   set $gridheight $options['GRIDHEIGHT'];
180552    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180553    +         unset $gridheight;
MPRINT(EM_REPORT_CREATE):   unset $gridheight;
180554    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180555    +
180556    +    do / if $options['GRIDWIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDWIDTH'];
180557    +         set $gridwidth $options['GRIDWIDTH'];
MPRINT(EM_REPORT_CREATE):   set $gridwidth $options['GRIDWIDTH'];
180558    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180559    +         unset $gridwidth;
MPRINT(EM_REPORT_CREATE):   unset $gridwidth;
180560    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180561    +
180562    +    do / if $options['ISGRIDVISIBLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ISGRIDVISIBLE'];
180563    +         set $isGridVisible $options['ISGRIDVISIBLE'];
MPRINT(EM_REPORT_CREATE):   set $isGridVisible $options['ISGRIDVISIBLE'];
180564    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180565    +         unset $isGridVisible;
MPRINT(EM_REPORT_CREATE):   unset $isGridVisible;
180566    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180567    +
180568    +    do / if $options['LAYOUTACTIVATED'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LAYOUTACTIVATED'];
180569    +         set $layoutActivated $options['LAYOUTACTIVATED'];
MPRINT(EM_REPORT_CREATE):   set $layoutActivated $options['LAYOUTACTIVATED'];
180570    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180571    +         unset $layoutActivated;
MPRINT(EM_REPORT_CREATE):   unset $layoutActivated;
180572    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180573    +
180574    +    do / if $options['PIELABELDISPLAY'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PIELABELDISPLAY'];
180575    +         set $pieLabelDisplay $options['PIELABELDISPLAY'];
MPRINT(EM_REPORT_CREATE):   set $pieLabelDisplay $options['PIELABELDISPLAY'];
180576    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180577    +         unset $pieLabelDisplay;
MPRINT(EM_REPORT_CREATE):   unset $pieLabelDisplay;
180578    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180579    +
180580    +    do / if $options['COLORLIST'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLORLIST'];
180581    +         set $colorlist $options['COLORLIST'];
MPRINT(EM_REPORT_CREATE):   set $colorlist $options['COLORLIST'];
180582    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180583    +         unset $colorlist;
MPRINT(EM_REPORT_CREATE):   unset $colorlist;
180584    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180585    +
180586    +    do / if $options['COLORINDEX'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLORINDEX'];
180587    +         set $colorindex $options['COLORINDEX'];
MPRINT(EM_REPORT_CREATE):   set $colorindex $options['COLORINDEX'];
180588    +    else;
MPRINT(EM_REPORT_CREATE):   else;
180589    +         unset $colorindex;
MPRINT(EM_REPORT_CREATE):   unset $colorindex;
180590    +    done;
MPRINT(EM_REPORT_CREATE):   done;
180591    +
180592    +end;
MPRINT(EM_REPORT_CREATE):   end;
180593    +
180594    +define event doc;
MPRINT(EM_REPORT_CREATE):   define event doc;
180595    +   eval $silkindex 0;
MPRINT(EM_REPORT_CREATE):   eval $silkindex 0;
MPRINT(EM_REPORT_CREATE):   eval $level 0;
180596    +   eval $level 0;
180597    +end;
MPRINT(EM_REPORT_CREATE):   end;
180598    +
180599    +define event GraphStyle;
MPRINT(EM_REPORT_CREATE):   define event GraphStyle;
180600    +   pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180601    +   trigger StatXMLDecl;
MPRINT(EM_REPORT_CREATE):   trigger StatXMLDecl;
180602    +   put '<SASReport version="1.0"
180602   !+xmlns:style="http://www.sas.com/sasreportmodel/styles">' CR;
MPRINT(EM_REPORT_CREATE):   put '<SASReport version="1.0"
xmlns:style="http://www.sas.com/sasreportmodel/styles">' CR;
180603    +   put '<style:Scheme name="StatGraphScheme" version="9.2">' CR;
MPRINT(EM_REPORT_CREATE):   put '<style:Scheme name="StatGraphScheme" version="9.2">' CR;
180604    +   trigger StatGraphScheme start;
MPRINT(EM_REPORT_CREATE):   trigger StatGraphScheme start;
180605    +   trigger StatDataDefaultScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatDataDefaultScheme;
180606    +   trigger StatTwoColorRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTwoColorRampScheme;
180607    +   trigger StatTwoColorAltRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTwoColorAltRampScheme;
180608    +   trigger StatThreeColorRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatThreeColorRampScheme;
180609    +   trigger StatThreeColorAltRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatThreeColorAltRampScheme;
180610    +   trigger StatAxisLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAxisLineScheme;
180611    +   trigger StatReferenceScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatReferenceScheme;
180612    +   trigger StatGridLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatGridLineScheme;
180613    +   trigger StatOutlineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatOutlineScheme;
180614    +   trigger StatBorderLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBorderLineScheme;
180615    +   trigger StatTitleTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTitleTextScheme;
180616    +   trigger StatFootnoteTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFootnoteTextScheme;
180617    +   trigger StatDataTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatDataTextScheme;
180618    +   trigger StatLabelTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatLabelTextScheme;
180619    +   trigger StatValueTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatValueTextScheme;
180620    +   trigger StatUnicodeTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatUnicodeTextScheme;
180621    +   trigger StatBackFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBackFillScheme;
180622    +   trigger StatWallFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatWallFillScheme;
180623    +   trigger StatFloorFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFloorFillScheme;
180624    +   trigger StatLegendFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatLegendFillScheme;
180625    +   trigger StatHeaderFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatHeaderFillScheme;
180626    +   trigger StatOutlierScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatOutlierScheme;
180627    +   trigger StatFitScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFitScheme;
180628    +   trigger StatFit2Scheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFit2Scheme;
180629    +   trigger StatPredictionScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatPredictionScheme;
180630    +   trigger StatConfidenceScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConfidenceScheme;
180631    +   trigger StatConfidence2Scheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConfidence2Scheme;
180632    +   trigger StatPredictionLimitsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatPredictionLimitsScheme;
180633    +   trigger StatErrorScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatErrorScheme;
180634    +   trigger StatBoxMedianScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxMedianScheme;
180635    +   trigger StatBoxMeanScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxMeanScheme;
180636    +   trigger StatBoxWhiskerScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxWhiskerScheme;
180637    +   trigger StatBoxScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxScheme;
180638    +   trigger StatHistogramScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatHistogramScheme;
180639    +   trigger StatBandScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBandScheme;
180640    +   trigger StatContourScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatContourScheme;
180641    +   trigger StatEllipseScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatEllipseScheme;
180642    +   trigger StatAnnoLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoLineScheme;
180643    +   trigger StatAnnoTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoTextScheme;
180644    +   trigger StatAnnoShapeScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoShapeScheme;
180645    +   trigger StatSelectionScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatSelectionScheme;
180646    +   trigger StatConnectLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConnectLineScheme;
180647    +   trigger StatMissingScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatMissingScheme;
180648    +   trigger StatControlLimitsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatControlLimitsScheme;
180649    +   trigger StatRunTestScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatRunTestScheme;
180650    +   trigger StatStarsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatStarsScheme;
180651    +   trigger StatClippingScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatClippingScheme;
180652    +   trigger StatBlockScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBlockScheme;
180653    +   trigger StatAltBlockScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAltBlockScheme;
180654    +   trigger GraphDataStyle1;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle1;
180655    +   trigger GraphDataStyle2 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle2 / if !$stopDataStyles;
180656    +   trigger GraphDataStyle3 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle3 / if !$stopDataStyles;
180657    +   trigger GraphDataStyle4 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle4 / if !$stopDataStyles;
180658    +   trigger GraphDataStyle5 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle5 / if !$stopDataStyles;
180659    +   trigger GraphDataStyle6 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle6 / if !$stopDataStyles;
180660    +   trigger GraphDataStyle7 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle7 / if !$stopDataStyles;
180661    +   trigger GraphDataStyle8 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle8 / if !$stopDataStyles;
180662    +   trigger GraphDataStyle9 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle9 / if !$stopDataStyles;
180663    +   trigger GraphDataStyle10 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle10 / if !$stopDataStyles;
180664    +   trigger GraphDataStyle11 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle11 / if !$stopDataStyles;
180665    +   trigger GraphDataStyle12 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle12 / if !$stopDataStyles;
180666    +   trigger GraphDataStyle13 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle13 / if !$stopDataStyles;
180667    +   trigger GraphDataStyle14 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle14 / if !$stopDataStyles;
180668    +   trigger GraphDataStyle15 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle15 / if !$stopDataStyles;
180669    +   trigger StatGraphScheme finish;
MPRINT(EM_REPORT_CREATE):   trigger StatGraphScheme finish;
180670    +   put '</style:Scheme>' CR;
MPRINT(EM_REPORT_CREATE):   put '</style:Scheme>' CR;
180671    +   unset $stopDataStyles;
MPRINT(EM_REPORT_CREATE):   unset $stopDataStyles;
180672    +end;
MPRINT(EM_REPORT_CREATE):   end;
180673    +
180674    +%macro dataStyleAttrs(index);
180675    +    do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
180676    +        set $stopDataStyles 'true';
180677    +        break;
180678    +    done;
180679    +    put '<style:Style context="GraphDataStyle' &index '"';
180680    +    putq " color=" COLOR;
180681    +    putq " altColor=" CONTRASTCOLOR;
180682    +    putq " fillColor=" COLOR;
180683    +    putq " textColor=" CONTRASTCOLOR;
180684    +    putq " lineStyle=" LINESTYLE;
180685    +    putq " lineColor=" CONTRASTCOLOR;
180686    +    putq " markerSymbol=" MARKERSYMBOL;
180687    +    putq " markerColor=" CONTRASTCOLOR;
180688    +    put "/>" NL;
180689    +%mend;
180690    +
180691    + define event GraphDataStyle1;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle1;
180692    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180693    +    style=GraphData1;
MPRINT(EM_REPORT_CREATE):   style=GraphData1;
180694    +    %dataStyleAttrs(1);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 1 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180695    + end;
MPRINT(EM_REPORT_CREATE):   end;
180696    + define event GraphDataStyle2;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle2;
180697    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180698    +    style=GraphData2;
MPRINT(EM_REPORT_CREATE):   style=GraphData2;
180699    +    %dataStyleAttrs(2);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 2 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180700    + end;
MPRINT(EM_REPORT_CREATE):   end;
180701    +define event GraphDataStyle3;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle3;
180702    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180703    +    style=GraphData3;
MPRINT(EM_REPORT_CREATE):   style=GraphData3;
180704    +    %dataStyleAttrs(3);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 3 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180705    + end;
MPRINT(EM_REPORT_CREATE):   end;
180706    + define event GraphDataStyle4;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle4;
180707    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180708    +    style=GraphData4;
MPRINT(EM_REPORT_CREATE):   style=GraphData4;
180709    +    %dataStyleAttrs(4);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 4 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180710    + end;
MPRINT(EM_REPORT_CREATE):   end;
180711    + define event GraphDataStyle5;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle5;
180712    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180713    +    style=GraphData5;
MPRINT(EM_REPORT_CREATE):   style=GraphData5;
180714    +    %dataStyleAttrs(5);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 5 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180715    + end;
MPRINT(EM_REPORT_CREATE):   end;
180716    + define event GraphDataStyle6;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle6;
180717    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180718    +    style=GraphData6;
MPRINT(EM_REPORT_CREATE):   style=GraphData6;
180719    +    %dataStyleAttrs(6);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 6 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180720    + end;
MPRINT(EM_REPORT_CREATE):   end;
180721    + define event GraphDataStyle7;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle7;
180722    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180723    +    style=GraphData7;
MPRINT(EM_REPORT_CREATE):   style=GraphData7;
180724    +    %dataStyleAttrs(7);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 7 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180725    + end;
MPRINT(EM_REPORT_CREATE):   end;
180726    + define event GraphDataStyle8;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle8;
180727    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180728    +    style=GraphData8;
MPRINT(EM_REPORT_CREATE):   style=GraphData8;
180729    +    %dataStyleAttrs(8);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 8 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180730    + end;
MPRINT(EM_REPORT_CREATE):   end;
180731    + define event GraphDataStyle9;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle9;
180732    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180733    +    style=GraphData9;
MPRINT(EM_REPORT_CREATE):   style=GraphData9;
180734    +    %dataStyleAttrs(9);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 9 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180735    + end;
MPRINT(EM_REPORT_CREATE):   end;
180736    + define event GraphDataStyle10;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle10;
180737    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180738    +    style=GraphData10;
MPRINT(EM_REPORT_CREATE):   style=GraphData10;
180739    +    %dataStyleAttrs(10);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 10 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180740    + end;
MPRINT(EM_REPORT_CREATE):   end;
180741    + define event GraphDataStyle11;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle11;
180742    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180743    +    style=GraphData11;
MPRINT(EM_REPORT_CREATE):   style=GraphData11;
180744    +    %dataStyleAttrs(11);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 11 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180745    + end;
MPRINT(EM_REPORT_CREATE):   end;
180746    + define event GraphDataStyle12;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle12;
180747    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180748    +    style=GraphData12;
MPRINT(EM_REPORT_CREATE):   style=GraphData12;
180749    +    %dataStyleAttrs(12);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 12 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180750    + end;
MPRINT(EM_REPORT_CREATE):   end;
180751    + define event GraphDataStyle13;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle13;
180752    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180753    +    style=GraphData13;
MPRINT(EM_REPORT_CREATE):   style=GraphData13;
180754    +    %dataStyleAttrs(13);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 13 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180755    + end;
MPRINT(EM_REPORT_CREATE):   end;
180756    + define event GraphDataStyle14;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle14;
180757    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180758    +    style=GraphData14;
MPRINT(EM_REPORT_CREATE):   style=GraphData14;
180759    +    %dataStyleAttrs(14);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 14 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180760    + end;
MPRINT(EM_REPORT_CREATE):   end;
180761    + define event GraphDataStyle15;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle15;
180762    +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
180763    +    style=GraphData15;
MPRINT(EM_REPORT_CREATE):   style=GraphData15;
180764    +    %dataStyleAttrs(15);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 15 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
180765    + end;
MPRINT(EM_REPORT_CREATE):   end;
180766    +
180767    +define event BeginGraph;
MPRINT(EM_REPORT_CREATE):   define event BeginGraph;
180768    +putlog "BeginGraph";
MPRINT(EM_REPORT_CREATE):   putlog "BeginGraph";
180769    +   trigger GraphStyle;
MPRINT(EM_REPORT_CREATE):   trigger GraphStyle;
180770    +   put '<View>' CR;
MPRINT(EM_REPORT_CREATE):   put '<View>' CR;
180771    +   put '<StatGraph';
MPRINT(EM_REPORT_CREATE):   put '<StatGraph';
180772    +   put ' version="9.2_S2DVR"';
MPRINT(EM_REPORT_CREATE):   put ' version="9.2_S2DVR"';
180773    +   putq " designHeight=" $graphheight;
MPRINT(EM_REPORT_CREATE):   putq " designHeight=" $graphheight;
180774    +   putq " designWidth=" $graphwidth;
MPRINT(EM_REPORT_CREATE):   putq " designWidth=" $graphwidth;
180775    +   put ' style:style="StatGraphStyle';
MPRINT(EM_REPORT_CREATE):   put ' style:style="StatGraphStyle';
180776    +   put anchor '"';
MPRINT(EM_REPORT_CREATE):   put anchor '"';
180777    +   put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
180778    +   set $graph_started "true";
MPRINT(EM_REPORT_CREATE):   set $graph_started "true";
180779    +   eval $level 0;
MPRINT(EM_REPORT_CREATE):   eval $level 0;
180780    +end;
MPRINT(EM_REPORT_CREATE):   end;
180781    +
180782    +define event LayoutOverlay;
MPRINT(EM_REPORT_CREATE):   define event LayoutOverlay;
180783    +   start:
180784    +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
180785    +      put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if
180785   !+$title;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>'
CR / if $title;
180786    +      put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if
180786   !+$title2;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>'
CR / if $title2;
180787    +      put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if
180787   !+$title3;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>'
CR / if $title3;
180788    +      put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if
180788   !+$title4;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>'
CR / if $title4;
180789    +      put '<LayoutOverlay>' CR;
MPRINT(EM_REPORT_CREATE):   put '<LayoutOverlay>' CR;
180790    +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title2;
180791    +      unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title3;
180792    +      unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title4;
180793    +      unset $title3;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutOverlay>' CR;
180794    +      unset $title4;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
180795    +   finish:
180796    +      put '</LayoutOverlay>' CR;
180797    +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
180798    +      trigger EndGraph / if $level=0;
180799    +end;
MPRINT(EM_REPORT_CREATE):   end;
180800    +
180801    +define event LayoutRegion;
MPRINT(EM_REPORT_CREATE):   define event LayoutRegion;
180802    +   start:
180803    +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
180804    +      put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if
180804   !+$title;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>'
CR / if $title;
180805    +      put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if
180805   !+$title2;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>'
CR / if $title2;
180806    +      put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if
180806   !+$title3;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>'
CR / if $title3;
180807    +      put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if
180807   !+$title4;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>'
CR / if $title4;
180808    +      put '<LayoutRegion>' CR;
MPRINT(EM_REPORT_CREATE):   put '<LayoutRegion>' CR;
180809    +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title2;
180810    +      unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title3;
180811    +      unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title4;
180812    +      unset $title3;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutRegion>' CR;
180813    +      unset $title4;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
180814    +   finish:
180815    +      put '</LayoutRegion>' CR;
180816    +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
180817    +      trigger EndGraph / if $level=0;
180818    +end;
MPRINT(EM_REPORT_CREATE):   end;
180819    +
180820    +define event LayoutLattice;
MPRINT(EM_REPORT_CREATE):   define event LayoutLattice;
180821    +   start:
180822    +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
180823    +      put '<LayoutLattice';
MPRINT(EM_REPORT_CREATE):   put '<LayoutLattice';
180824    +      putq " rows=" $rows;
MPRINT(EM_REPORT_CREATE):   putq " rows=" $rows;
180825    +      putq " columns=" $columns;
MPRINT(EM_REPORT_CREATE):   putq " columns=" $columns;
180826    +      put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
180827    +      unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
180828    +      unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
180829    +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutLattice>' CR;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
180830    +   finish:
180831    +      put '</LayoutLattice>' CR;
180832    +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
180833    +      trigger EndGraph / if $level=0;
180834    +end;
MPRINT(EM_REPORT_CREATE):   end;
180835    +
180836    +define event LayoutGridded;
MPRINT(EM_REPORT_CREATE):   define event LayoutGridded;
180837    +   start:
180838    +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
180839    +      put '<LayoutGridded';
MPRINT(EM_REPORT_CREATE):   put '<LayoutGridded';
180840    +      putq " rows=" $rows;
MPRINT(EM_REPORT_CREATE):   putq " rows=" $rows;
180841    +      putq " columns=" $columns;
MPRINT(EM_REPORT_CREATE):   putq " columns=" $columns;
180842    +      put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
180843    +      unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
180844    +      unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
180845    +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutGridded>' CR;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
180846    +   finish:
180847    +      put '</LayoutGridded>' CR;
180848    +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
180849    +      trigger EndGraph / if $level=0;
180850    +end;
MPRINT(EM_REPORT_CREATE):   end;
180851    +
180852    +define event EndGraph;
MPRINT(EM_REPORT_CREATE):   define event EndGraph;
180853    +   put '</StatGraph>' CR;
MPRINT(EM_REPORT_CREATE):   put '</StatGraph>' CR;
180854    +   put '</View>' CR;
MPRINT(EM_REPORT_CREATE):   put '</View>' CR;
180855    +   put "</SASReport>" CR;
MPRINT(EM_REPORT_CREATE):   put "</SASReport>" CR;
180856    +   unset $graph_started;
MPRINT(EM_REPORT_CREATE):   unset $graph_started;
180857    +end;
MPRINT(EM_REPORT_CREATE):   end;
180858    +
180859    +define event ScatterPlot;
MPRINT(EM_REPORT_CREATE):   define event ScatterPlot;
180860    +   put '<ScatterPlot';
MPRINT(EM_REPORT_CREATE):   put '<ScatterPlot';
180861    +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
180862    +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
180863    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180864    +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
180865    +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
180866    +end;
MPRINT(EM_REPORT_CREATE):   end;
180867    +
180868    +define event SeriesPlot;
MPRINT(EM_REPORT_CREATE):   define event SeriesPlot;
180869    +   put '<SeriesPlot';
MPRINT(EM_REPORT_CREATE):   put '<SeriesPlot';
180870    +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
180871    +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
180872    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180873    +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
180874    +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
180875    +end;
MPRINT(EM_REPORT_CREATE):   end;
180876    +
180877    +define event BandPlot;
MPRINT(EM_REPORT_CREATE):   define event BandPlot;
180878    +   put '<BandPlot';
MPRINT(EM_REPORT_CREATE):   put '<BandPlot';
180879    +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
180880    +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
180881    +   put ' limitUpper="StatGraphDataIDX#' $limitupper '"' / if $limitupper;
MPRINT(EM_REPORT_CREATE):   put ' limitUpper="StatGraphDataIDX#' $limitupper '"' / if
$limitupper;
180882    +   put ' limitLower="StatGraphDataIDX#' $limitlower '"' / if $limitlower;
MPRINT(EM_REPORT_CREATE):   put ' limitLower="StatGraphDataIDX#' $limitlower '"' / if
$limitlower;
180883    +   putq " lineAttrs=" $style;
MPRINT(EM_REPORT_CREATE):   putq " lineAttrs=" $style;
180884    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180885    +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
180886    +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
180887    +end;
MPRINT(EM_REPORT_CREATE):   end;
180888    +
180889    +define event Pie;
MPRINT(EM_REPORT_CREATE):   define event Pie;
180890    +   put '<Pie';
MPRINT(EM_REPORT_CREATE):   put '<Pie';
180891    +   put ' category="StatGraphDataIDX#' $category '"' / if $category;
MPRINT(EM_REPORT_CREATE):   put ' category="StatGraphDataIDX#' $category '"' / if $category;
180892    +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
180893    +   putq " pieLabelComponents=" $pieLabelDisplay;
MPRINT(EM_REPORT_CREATE):   putq " pieLabelComponents=" $pieLabelDisplay;
180894    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180895    +   unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
180896    +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
180897    +end;
MPRINT(EM_REPORT_CREATE):   end;
180898    +
180899    +define event Bar;
MPRINT(EM_REPORT_CREATE):   define event Bar;
180900    +   put '<Bar';
MPRINT(EM_REPORT_CREATE):   put '<Bar';
180901    +   put ' category="StatGraphDataIDX#' $category '"' / if $category;
MPRINT(EM_REPORT_CREATE):   put ' category="StatGraphDataIDX#' $category '"' / if $category;
180902    +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
180903    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180904    +   unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
180905    +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
180906    +end;
MPRINT(EM_REPORT_CREATE):   end;
180907    +
180908    +define event Histogram;
MPRINT(EM_REPORT_CREATE):   define event Histogram;
180909    +   put '<Histogram';
MPRINT(EM_REPORT_CREATE):   put '<Histogram';
180910    +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
180911    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180912    +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
180913    +end;
MPRINT(EM_REPORT_CREATE):   end;
180914    +
180915    +define event DecisionTree;
MPRINT(EM_REPORT_CREATE):   define event DecisionTree;
180916    +   put '<DecisionTree';
MPRINT(EM_REPORT_CREATE):   put '<DecisionTree';
180917    +   put ' id="StatGraphDataIDX#' $id '"' / if $id;
MPRINT(EM_REPORT_CREATE):   put ' id="StatGraphDataIDX#' $id '"' / if $id;
180918    +   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
MPRINT(EM_REPORT_CREATE):   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
180919    +   put ' aboveText="StatGraphDataIDX#' $abovetext '"' / if $abovetext;
MPRINT(EM_REPORT_CREATE):   put ' aboveText="StatGraphDataIDX#' $abovetext '"' / if $abovetext;
180920    +   put ' belowText="StatGraphDataIDX#' $belowtext '"' / if $belowtext;
MPRINT(EM_REPORT_CREATE):   put ' belowText="StatGraphDataIDX#' $belowtext '"' / if $belowtext;
180921    +   put ' linkWidth="StatGraphDataIDX#' $linkwidth '"' / if $linkwidth;
MPRINT(EM_REPORT_CREATE):   put ' linkWidth="StatGraphDataIDX#' $linkwidth '"' / if $linkwidth;
180922    +   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
MPRINT(EM_REPORT_CREATE):   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
180923    +   put ' nodeText="StatGraphDataIDX#' $nodetext '"' / if $nodetext;
MPRINT(EM_REPORT_CREATE):   put ' nodeText="StatGraphDataIDX#' $nodetext '"' / if $nodetext;
180924    +   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
MPRINT(EM_REPORT_CREATE):   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
180925    +   put ' fitToRegion="true"';
MPRINT(EM_REPORT_CREATE):   put ' fitToRegion="true"';
180926    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180927    +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
180928    +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
180929    +   unset $abovetext;
MPRINT(EM_REPORT_CREATE):   unset $abovetext;
180930    +   unset $belowtext;
MPRINT(EM_REPORT_CREATE):   unset $belowtext;
180931    +   unset $linkwidth;
MPRINT(EM_REPORT_CREATE):   unset $linkwidth;
180932    +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
180933    +   unset $nodetext;
MPRINT(EM_REPORT_CREATE):   unset $nodetext;
180934    +end;
MPRINT(EM_REPORT_CREATE):   end;
180935    +
180936    +define event Icicle;
MPRINT(EM_REPORT_CREATE):   define event Icicle;
180937    +   put '<Icicle';
MPRINT(EM_REPORT_CREATE):   put '<Icicle';
180938    +   put ' id="StatGraphDataIDX#' $id '"' / if $id;
MPRINT(EM_REPORT_CREATE):   put ' id="StatGraphDataIDX#' $id '"' / if $id;
180939    +   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
MPRINT(EM_REPORT_CREATE):   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
180940    +   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
MPRINT(EM_REPORT_CREATE):   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
180941    +   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
MPRINT(EM_REPORT_CREATE):   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
180942    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180943    +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
180944    +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
180945    +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
180946    +   unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
180947    +end;
MPRINT(EM_REPORT_CREATE):   end;
180948    +
180949    +define event PFD;
MPRINT(EM_REPORT_CREATE):   define event PFD;
180950    +   put '<PFD';
MPRINT(EM_REPORT_CREATE):   put '<PFD';
180951    +   putq " id=" $id / if $id;
MPRINT(EM_REPORT_CREATE):   putq " id=" $id / if $id;
180952    +   put ' pfditems="StatGraphDataIDX#' $pfdItems '"' / if $pfdItems;
MPRINT(EM_REPORT_CREATE):   put ' pfditems="StatGraphDataIDX#' $pfdItems '"' / if $pfdItems;
180953    +   putq " isGridVisible=" $isgridvisible / if $isgridvisible;
MPRINT(EM_REPORT_CREATE):   putq " isGridVisible=" $isgridvisible / if $isgridvisible;
180954    +   putq " gridHeight=" $gridheight / if $gridheight;
MPRINT(EM_REPORT_CREATE):   putq " gridHeight=" $gridheight / if $gridheight;
180955    +   putq " gridWidth=" $gridwidth / if $gridwidth;
MPRINT(EM_REPORT_CREATE):   putq " gridWidth=" $gridwidth / if $gridwidth;
180956    +   putq " gridStyle=" $gridstyle / if $gridstyle;
MPRINT(EM_REPORT_CREATE):   putq " gridStyle=" $gridstyle / if $gridstyle;
180957    +   putq " layoutActivated=" $layoutActivated / if $layoutActivated;
MPRINT(EM_REPORT_CREATE):   putq " layoutActivated=" $layoutActivated / if $layoutActivated;
180958    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180959    +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
180960    +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
180961    +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
180962    +   unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
180963    +end;
MPRINT(EM_REPORT_CREATE):   end;
180964    +
180965    +define event HeatMap;
MPRINT(EM_REPORT_CREATE):   define event HeatMap;
180966    +   trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   trigger BeginGraph / if !$graph_started;
180967    +   put '<HeatmapClassic';
MPRINT(EM_REPORT_CREATE):   put '<HeatmapClassic';
180968    +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
180969    +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
180970    +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
180971    +   putq ' colorList=' $colorlist / if $colorlist;
MPRINT(EM_REPORT_CREATE):   putq ' colorList=' $colorlist / if $colorlist;
180972    +   putq ' colorIndex=' $colorindex / if $colorindex;
MPRINT(EM_REPORT_CREATE):   putq ' colorIndex=' $colorindex / if $colorindex;
180973    +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
180974    +   trigger EndGraph / if $level=0;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
180975    +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $response;
180976    +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $colorlist;
180977    +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $colorindex;
180978    +   unset $colorlist;
180979    +   unset $colorindex;
180980    +end;
MPRINT(EM_REPORT_CREATE):   end;
180981    +
180982    +end;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: TAGSET 'Tagsets.Gtl' has been saved to: WORK.TEMPLAT
180983    +run;
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.34 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_CREATE):   run;
180984    +
180985    +
180986    +
180987    +
180988    +
180989    +
180990    +/* data_template.sas */
180991    +proc template;
MPRINT(EM_REPORT_CREATE):   proc template;
180992    +define statgraph dataonly / store=work.templat;
MPRINT(EM_REPORT_CREATE):   define statgraph dataonly / store=work.templat;
180993    +dynamic dummy1 dummy2 var1 var2 var3 var4 var5 var6 var7 var8 var9 var10;
MPRINT(EM_REPORT_CREATE):   dynamic dummy1 dummy2 var1 var2 var3 var4 var5 var6 var7 var8 var9
var10;
180994    +begingraph;
MPRINT(EM_REPORT_CREATE):   begingraph;
180995    +if (0)
180996    +layout overlay;
MPRINT(EM_REPORT_CREATE):   if (0) layout overlay;
180997    +   scatterplot x=dummy1 y=dummy2 /
180998    +      rolename=(a=var1 b=var2 c=var3 d=var4 e=var5 f=var6 g=var7 h=var8 i=var9
180998   !+j=var10);
MPRINT(EM_REPORT_CREATE):   scatterplot x=dummy1 y=dummy2 / rolename=(a=var1 b=var2 c=var3
d=var4 e=var5 f=var6 g=var7 h=var8 i=var9 j=var10);
180999    +endlayout;
MPRINT(EM_REPORT_CREATE):   endlayout;
181000    +endif;
MPRINT(EM_REPORT_CREATE):   endif;
181001    +endgraph;
MPRINT(EM_REPORT_CREATE):   endgraph;
181002    +end;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: STATGRAPH 'Dataonly' has been saved to: WORK.TEMPLAT
181003    +run;
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.18 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):   run;
181004    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Report")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='REPORT';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_CREATE):   ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1
property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPORT");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "REPORT";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "pdf";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_PATH):   proc display c=sashelp.emutil.path.scl;
MPRINT(EM_PATH):   run;
 
181005     data emreportpath;
MPRINT(EM_PATH):   data emreportpath;
181006     length nodelabel $32 component $32;
MPRINT(EM_PATH):   length nodelabel $32 component $32;
181007     nodelabel="Ids";
MPRINT(EM_PATH):   nodelabel="Ids";
181008     component="DataSource";
MPRINT(EM_PATH):   component="DataSource";
181009     output;
MPRINT(EM_PATH):   output;
181010     nodelabel="GrfExpl";
MPRINT(EM_PATH):   nodelabel="GrfExpl";
181011     component="GraphExplore";
MPRINT(EM_PATH):   component="GraphExplore";
181012     output;
MPRINT(EM_PATH):   output;
181013     nodelabel="Part";
MPRINT(EM_PATH):   nodelabel="Part";
181014     component="Partition";
MPRINT(EM_PATH):   component="Partition";
181015     output;
MPRINT(EM_PATH):   output;
181016     nodelabel="Repl";
MPRINT(EM_PATH):   nodelabel="Repl";
181017     component="Replace";
MPRINT(EM_PATH):   component="Replace";
181018     output;
MPRINT(EM_PATH):   output;
181019     nodelabel="Trans";
MPRINT(EM_PATH):   nodelabel="Trans";
181020     component="Transform";
MPRINT(EM_PATH):   component="Transform";
181021     output;
MPRINT(EM_PATH):   output;
181022     nodelabel="BINNING";
MPRINT(EM_PATH):   nodelabel="BINNING";
181023     component="Binning";
MPRINT(EM_PATH):   component="Binning";
181024     output;
MPRINT(EM_PATH):   output;
181025     nodelabel="Neural6";
MPRINT(EM_PATH):   nodelabel="Neural6";
181026     component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
181027     output;
MPRINT(EM_PATH):   output;
181028     nodelabel="Neural5";
MPRINT(EM_PATH):   nodelabel="Neural5";
181029     component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
181030     output;
MPRINT(EM_PATH):   output;
181031     nodelabel="Neural4";
MPRINT(EM_PATH):   nodelabel="Neural4";
181032     component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
181033     output;
MPRINT(EM_PATH):   output;
181034     nodelabel="Neural3";
MPRINT(EM_PATH):   nodelabel="Neural3";
181035     component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
181036     output;
MPRINT(EM_PATH):   output;
181037     nodelabel="Neural2";
MPRINT(EM_PATH):   nodelabel="Neural2";
181038     component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
181039     output;
MPRINT(EM_PATH):   output;
181040     nodelabel="Neural";
MPRINT(EM_PATH):   nodelabel="Neural";
181041     component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
181042     output;
MPRINT(EM_PATH):   output;
181043     nodelabel="MdlComp";
MPRINT(EM_PATH):   nodelabel="MdlComp";
181044     component="ModelCompare";
MPRINT(EM_PATH):   component="ModelCompare";
181045     output;
MPRINT(EM_PATH):   output;
181046     run;
MPRINT(EM_PATH):   run;
 
NOTE: The data set WORK.EMREPORTPATH has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_PATH):
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   data emreportpath;
MPRINT(EM_REPORT_CREATE):   set emreportpath;
MPRINT(EM_REPORT_CREATE):   rename nodelabel=nodeid;
MPRINT(EM_REPORT_CREATE):   nodeIndex = _n_;
MPRINT(EM_REPORT_CREATE):   run;
 
NOTE: There were 13 observations read from the data set WORK.EMREPORTPATH.
NOTE: The data set WORK.EMREPORTPATH has 13 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):   *** create new style template to address fonts in ods text;
MPRINT(EM_REPORT_CREATE):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_CREATE):   proc template ;
MPRINT(EM_REPORT_CREATE):   define style styles.em_style / store=work.templat;
MPRINT(EM_REPORT_CREATE):   parent= styles.LISTING;
MPRINT(EM_REPORT_CREATE):   style usertext from usertext / foreground=black font_size=10 pt
font_face="Arial" font_weight=bold ;
MPRINT(EM_REPORT_CREATE):   style systemtitle from systemtitle / color=colors("systitlefg")
backgroundcolor=colors("systitlebg") fontsize=10 pt font_face="Arial" font_weight=bold ;
MPRINT(EM_REPORT_CREATE):   style systemfooter from systemfooter / color=colors("systitlefg")
backgroundcolor=colors("systitlebg") font_face="Arial" ;
MPRINT(EM_REPORT_CREATE):   style GraphFonts from GraphFonts / 'GraphTitleFont' = ("Arial", 10
pt) 'GraphTitle1Font' = ("Arial", 10 pt) 'GraphLabelFont' = ("Arial", 8 pt)
'GraphFootnoteFont' = ("Arial", 6 pt) 'GraphValueFont' = ("Arial", 6 pt) 'GraphDataFont' =
("Arial", 6 pt) ;
MPRINT(EM_REPORT_CREATE):   style Fonts from Fonts/ 'TitleFont' = ("Arial", 10 pt)
'TitleFont2' = ("Arial", 10 pt) 'StrongFont' = ("Arial", 6 pt) 'EmphasisFont' = ("Arial", 6
pt) 'headingFont' = ("Arial", 6 pt) 'headingEmphasisFont' = ("Arial", 6 pt)
'FixedEmphasisFont' = ("Arial", 6 pt) 'FixedStrongFont' = ("Arial", 6 pt) 'FixedHeadingFont' =
("Arial", 6 pt) 'FixedFont' = ("Arial", 6 pt) 'BatchFixedFont' = ("Arial", 6 pt) 'docFont' =
("Arial", 6 pt) ;
MPRINT(EM_REPORT_CREATE):   style GraphTitleText from GraphTitleText / font_face="Arial";
MPRINT(EM_REPORT_CREATE):   style data from data / font_size=6 pt;
MPRINT(EM_REPORT_CREATE):   style header from header / font_size=8 pt;
MPRINT(EM_REPORT_CREATE):   style rowheader from header;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: STYLE 'Styles.Em_style' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.09 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_CREATE):   run;
MPRINT(EM_REPORT_CREATE):   quit;
MPRINT(EM_REPORT_CREATE):   *** options for page layout;
MPRINT(EM_REPORT_CREATE):   options nodate nocenter number ls=97 ;
MPRINT(EM_REPORT_CREATE):   *** get file name;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   *** turn off LISTING and turn on the specified destination;
MPRINT(EM_REPORT_CREATE):   ods listing close;
MPRINT(EM_REPORT_CREATE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_CREATE):   ods PDF
file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pdf
" style=styles.em_style startpage=NO uniform NOTOC ;
NOTE: Writing ODS PDF output to DISK destination
      "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pd
      f", printer "PDF".
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this
      session.
MPRINT(EM_REPORT_CREATE):   *** titles and footnotes;
MPRINT(EM_REPORT_CREATE):   ods PDF text=" ";
MPRINT(EM_REPORT_CREATE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   ods proclabel "Report Information";
MPRINT(EM_REPORT_CREATE):   data _null_;
MPRINT(EM_REPORT_CREATE):   call symput('report_date', strip(put(date(), NLDATE.)));
MPRINT(EM_REPORT_CREATE):   call symput('report_time', strip(put(datetime(), NLTIME.)));
MPRINT(EM_REPORT_CREATE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_CREATE):   data _null_;
MPRINT(EM_REPORT_CREATE):   file print ;
MPRINT(EM_REPORT_CREATE):   put "User       = bteric01" ;
MPRINT(EM_REPORT_CREATE):   put "Date       = 14:12:55  November 05" ;
MPRINT(EM_REPORT_CREATE):   put "Project    = Project_3 " ;
MPRINT(EM_REPORT_CREATE):   put "Diagram    = Diagram_3" / ;
MPRINT(EM_REPORT_CREATE):   put "Start Node = Report";
MPRINT(EM_REPORT_CREATE):   put "Node label = Reporter" ;
MPRINT(EM_REPORT_CREATE):   put "Nodes      = PATH" ;
MPRINT(EM_REPORT_CREATE):   put "Showall    = N" /;
MPRINT(EM_REPORT_CREATE):   put "Format     = PDF" ;
MPRINT(EM_REPORT_CREATE):   put "Style      = LISTING" /;
MPRINT(EM_REPORT_CREATE):   run ;
 
NOTE: 10 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("PFD");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "PFD";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "xml";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_XML):  ;
MPRINT(EM_REPORT_WORKSPACE_XML):  ;
MPRINT(EM_REPORT_WORKSPACE_XML):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\PFD.xml"
encoding="utf-8" NOBOM;
MPRINT(EM_REPORT_WORKSPACE_XML):   data _null_;
MPRINT(EM_REPORT_WORKSPACE_XML):   file x;
MPRINT(EM_REPORT_WORKSPACE_XML):   set EMWS1.EM_NODEID;
MPRINT(EM_REPORT_WORKSPACE_XML):   length string $400;
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "&", "&amp;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "<", "&lt;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, ">", "&gt;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "'", "&#39;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, '"', '&quot;');
MPRINT(EM_REPORT_WORKSPACE_XML):   string = cats('<PFDNode x="',X,'" y="',Y,'" id="',NODEID,'"
title="',LABEL,'"></PFDNode>');
MPRINT(EM_REPORT_WORKSPACE_XML):   put string;
MPRINT(EM_REPORT_WORKSPACE_XML):   run;
 
NOTE: The file X is:
 
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\P
      FD.xml,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=05Nov2015:14:12:55,
      Create Time=05Nov2015:05:53:30
 
NOTE: 14 records were written to the file X.
      The minimum record length was 64.
      The maximum record length was 86.
NOTE: There were 14 observations read from the data set EMWS1.EM_NODEID.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_XML):   data _null_;
MPRINT(EM_REPORT_WORKSPACE_XML):   file x mod;
MPRINT(EM_REPORT_WORKSPACE_XML):   set EMWS1.EM_DGRAPH(where=(TO ne ""));
MPRINT(EM_REPORT_WORKSPACE_XML):   length string $400;
MPRINT(EM_REPORT_WORKSPACE_XML):   string = cats("<PFDLink id='",_N_,"' fromId='",FROM,"'
toId='",TO,"'></PFDLink>");
MPRINT(EM_REPORT_WORKSPACE_XML):   put string;
MPRINT(EM_REPORT_WORKSPACE_XML):   run;
 
NOTE: The file X is:
 
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\P
      FD.xml,
      RECFM=V,LRECL=131068,File Size (bytes)=2105,
      Last Modified=05Nov2015:14:12:55,
      Create Time=05Nov2015:05:53:30
 
NOTE: 18 records were written to the file X.
      The minimum record length was 52.
      The maximum record length was 59.
NOTE: There were 18 observations read from the data set EMWS1.EM_DGRAPH.
      WHERE TO not = ' ';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_XML):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_MAKEDS):   data xmldata(keep=PFDItemList);
MPRINT(EM_REPORT_MAKEDS):   infile xmlref recfm=v lrecl=86 length=len;
MPRINT(EM_REPORT_MAKEDS):   length PFDItemList $256;
MPRINT(EM_REPORT_MAKEDS):   input record $varying5000. len;
MPRINT(EM_REPORT_MAKEDS):   recordNum+1;
MPRINT(EM_REPORT_MAKEDS):   do start=1 to len by 256 ;
MPRINT(EM_REPORT_MAKEDS):   end=start+256;
MPRINT(EM_REPORT_MAKEDS):   *put recordNum= start= end=;
MPRINT(EM_REPORT_MAKEDS):   PFDItemList=substr(record,start,end);
MPRINT(EM_REPORT_MAKEDS):   output;
MPRINT(EM_REPORT_MAKEDS):   end;
MPRINT(EM_REPORT_MAKEDS):   run;
 
NOTE: The infile XMLREF is:
 
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\P
      FD.xml,
      RECFM=V,LRECL=344,File Size (bytes)=3162,
      Last Modified=05Nov2015:14:12:55,
      Create Time=05Nov2015:05:53:30
 
NOTE: 50 records were read from the infile XMLREF.
      The minimum record length was 52.
      The maximum record length was 86.
NOTE: The data set WORK.XMLDATA has 50 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   data temp;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   set EMWS1.EM_NODEID;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   if X = -1 AND Y= - 1 then delete;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.EM_NODEID.
NOTE: The data set WORK.TEMP has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title1;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title2;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title3;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods PDF exclude SGRENDER;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl
file="C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\view.xml"
data="C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\data.xml"
encoding="utf-8" style=styles.em_style;
NOTE: Writing TAGSETS.GTL Data file:
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\data.xml
NOTE: Writing TAGSETS.GTL Body file:
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\view.xml
MPRINT(EM_REPORT_WORKSPACE_RENDER):   proc sgrender data=work.xmldata template=dataonly;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   dynamic var1="PFDItemList";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;
 
WARNING: TAGSETS.GTL destination does not support images. Using the default format.
NOTE: There were 50 observations read from the data set WORK.XMLDATA.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.18 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=LayoutRegion(start) options(title
="SAS Enterprise Miner Report" title2="Process Flow Diagram");
BeginGraph
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=PFD options(pfditems="PFDItemList"
id="pfdView1");
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=LayoutRegion(finish);
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl close;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods PDF select ALL ;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods proclabel = "Process Flow Diagram";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   proc sgsilk
viewxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\view.xm
l"
dataxml="C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\data.xm
l";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;
 
NOTE: PROCEDURE SGSILK used (Total process time):
      real time           10.04 seconds
      cpu time            0.50 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title1;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title2;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title3;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   proc sql noprint;
MPRINT(EM_REPORT_CREATE):   select count(*) into :EM_REPORT_NODENUM from emreportpath where
nodeID ne " ";
MPRINT(EM_REPORT_CREATE):   select strip(nodeID) into :EM_REPORT_NODELIST separated by ' ' from
emreportpath where nodeID ne " " order by nodeIndex;
NOTE: The query as specified involves ordering by an item that doesn't appear in its SELECT
      clause.
MPRINT(EM_REPORT_CREATE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Ids")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='IDS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
181047     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
181048     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
181048   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
181048   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
181049     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
181050     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
181051     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
181052     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
181053     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181054     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181055     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181056     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181057     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181058     output;
MPRINT(EM_GETTRAINPATH):   output;
181059     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 1 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Ids"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Ids";
MPRINT(EM_REPORT_NODE):   put "Node label = All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Ids\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
181060     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181061     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181062     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181062   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
181062   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
181063     Name = 'DataSource';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DataSource';
181064     Value = "%nrbquote(allhomeequityloanscoringdata)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "allhomeequityloanscoringdata";
181065     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181066     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181067     Name = 'Scope';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Scope';
181068     Value = "%nrbquote(LOCAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "LOCAL";
181069     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181070     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181071     Name = 'Role';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Role';
181072     Value = "%nrbquote(RAW)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "RAW";
181073     Default = "%nrbquote(TRAIN)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "TRAIN";
181074     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181075     Name = 'Library';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Library';
181076     Value = "%nrbquote(SAMPSIO)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "SAMPSIO";
181077     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181078     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181079     Name = 'Table';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Table';
181080     Value = "%nrbquote(DMAHMEQ)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DMAHMEQ";
181081     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181082     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181083     Name = 'NCols';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NCols';
181084     Value = "%nrbquote(13)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "13";
181085     Default = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Default = ".";
181086     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181087     Name = 'NObs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NObs';
181088     Value = "%nrbquote(5960)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5960";
181089     Default = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Default = ".";
181090     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181091     Name = 'NBytes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NBytes';
181092     Value = "%nrbquote(656384)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "656384";
181093     Default = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Default = ".";
181094     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181095     Name = 'Segment';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Segment';
181096     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181097     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181098     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181099     Name = 'DataSourceRole';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DataSourceRole';
181100     Value = "%nrbquote(RAW)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "RAW";
181101     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181102     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181103     Name = 'OutputType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'OutputType';
181104     Value = "%nrbquote(VIEW)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "VIEW";
181105     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181106     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181107     Name = 'ComputeStatistics';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ComputeStatistics';
181108     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181109     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181110     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181111     Name = 'DataSelection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DataSelection';
181112     Value = "%nrbquote(DATASOURCE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DATASOURCE";
181113     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181114     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181115     Name = 'NewTable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NewTable';
181116     Value = "%nrbquote( )";
MPRINT(EM_REPORT_PROPERTIES):   Value = " ";
181117     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181118     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181119     Name = 'MetaAdvisor';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MetaAdvisor';
181120     Value = "%nrbquote(BASIC)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "BASIC";
181121     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181122     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181123     Name = 'ApplyIntervalLevelLowerLimit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyIntervalLevelLowerLimit';
181124     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181125     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181126     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181127     Name = 'IntervalLowerLimit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IntervalLowerLimit';
181128     Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
181129     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181130     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181131     Name = 'ApplyMaxPercentMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyMaxPercentMissing';
181132     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181133     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181134     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181135     Name = 'MaxPercentMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxPercentMissing';
181136     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
181137     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181138     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181139     Name = 'ApplyMaxClassLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyMaxClassLevels';
181140     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181141     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181142     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181143     Name = 'MaxClassLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxClassLevels';
181144     Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
181145     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181146     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181147     Name = 'IdentifyEmptyColumns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IdentifyEmptyColumns';
181148     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181149     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181150     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181151     Name = 'VariableValidation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'VariableValidation';
181152     Value = "%nrbquote(STRICT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STRICT";
181153     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181154     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181155     Name = 'NewVariableRole';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NewVariableRole';
181156     Value = "%nrbquote(REJECT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "REJECT";
181157     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181158     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181159     Name = 'DropMapVariables';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DropMapVariables';
181160     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181161     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181162     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181163     Name = 'DsId';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsId';
181164     Value = "%nrbquote(allhomeequityloanscoringdata)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "allhomeequityloanscoringdata";
181165     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181166     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181167     Name = 'DsSampleName';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsSampleName';
181168     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181169     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181170     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181171     Name = 'DsSampleSizeType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsSampleSizeType';
181172     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181173     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181174     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181175     Name = 'DsSampleSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsSampleSize';
181176     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181177     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181178     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181179     Name = 'DsCreatedBy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsCreatedBy';
181180     Value = "%nrbquote(bteric01)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "bteric01";
181181     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181182     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181183     Name = 'DsCreateDate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsCreateDate';
181184     Value = "%nrbquote(1762196216.8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1762196216.8";
181185     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181186     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181187     Name = 'DsModifiedBy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsModifiedBy';
181188     Value = "%nrbquote(bteric01)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "bteric01";
181189     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181190     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181191     Name = 'DsModifyDate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsModifyDate';
181192     Value = "%nrbquote(1762196217)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1762196217";
181193     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181194     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181195     Name = 'DsScope';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsScope';
181196     Value = "%nrbquote(LOCAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "LOCAL";
181197     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181198     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181199     Name = 'Sample';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Sample';
181200     Value = "%nrbquote(D)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "D";
181201     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181202     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181203     Name = 'SampleSizeType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSizeType';
181204     Value = "%nrbquote(PERCENT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PERCENT";
181205     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181206     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181207     Name = 'SampleSizePercent';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSizePercent';
181208     Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
181209     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181210     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181211     Name = 'SampleSizeObs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSizeObs';
181212     Value = "%nrbquote(10000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10000";
181213     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181214     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181215     Name = 'DBPassThrough';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DBPassThrough';
181216     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181217     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181218     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181219     Name = 'Description';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Description';
181220     Value = "%nrbquote(All: Home-Equity Loan Scoring Data)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "All: Home-Equity Loan Scoring Data";
181221     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181222     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181223     Name = 'Data';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Data';
181224     Value = "%nrbquote(SAMPSIO.DMAHMEQ)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "SAMPSIO.DMAHMEQ";
181225     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181226     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181227     Name = 'CMeta';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CMeta';
181228     Value = "%nrbquote(WORK.M338XJ75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "WORK.M338XJ75";
181229     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181230     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181231     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181232     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
181233     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
181234     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 42 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
181235     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
181236     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181237     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181237   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
181238     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
181239     Value = "DataSource";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DataSource";
181240     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
181241     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
181242     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181243     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
181244     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 42 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 43 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=All: Home-Equity Loan Scoring Data
Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 14 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-14*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 14 and _n_ le 28 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-14*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 28 and _n_ le 42 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-14*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 43 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 14 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 14 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 14 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATASOURCE):   proc transpose data=EMWS1.Ids_EMTMETADEFAULT out=temp_source;
MPRINT(EM_REPORT_DATASOURCE):   var _all_;
MPRINT(EM_REPORT_DATASOURCE):   format crdate NLDATM24.0 modate NLDATM24.0;
MPRINT(EM_REPORT_DATASOURCE):   run;
 
NOTE: Numeric variables in the input data set will be converted to character in the output data
      set.
NOTE: There were 1 observations read from the data set EMWS1.IDS_EMTMETADEFAULT.
NOTE: The data set WORK.TEMP_SOURCE has 15 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_DATASOURCE):   data temp_source;
MPRINT(EM_REPORT_DATASOURCE):   set temp_source;
MPRINT(EM_REPORT_DATASOURCE):   rename col1 = value;
MPRINT(EM_REPORT_DATASOURCE):   col1 = right(col1);
MPRINT(EM_REPORT_DATASOURCE):   format label $64.;
MPRINT(EM_REPORT_DATASOURCE):   label col1 = "Value" label = "Attribute" ;
MPRINT(EM_REPORT_DATASOURCE):   *** get the localized label column;
MPRINT(EM_REPORT_DATASOURCE):   _name_=upcase(_name_) ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMNAME" then label="Data Name" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMTYPE" then label="Data Type" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMLABEL" then label="Data Label" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "TYPEMEM" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "ENGINE" then label="Engine" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "CRDATE" then label="Date Created" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MODATE" then label="Date Modified" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NOBS" then label="Number Rows" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NCOLS" then label="Number Columns" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NBYTES" then label="Data Size" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "ROLE" then label="Role" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "USEEXTERNALDATA" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "SAMPLINGRATE" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "SEGMENT" then label="Segment" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "LIBNAME" then label="Data Library" ;
MPRINT(EM_REPORT_DATASOURCE):   run;
 
NOTE: There were 15 observations read from the data set WORK.TEMP_SOURCE.
NOTE: The data set WORK.TEMP_SOURCE has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Data Attributes";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=All: Home-Equity Loan Scoring Data Data
Attributes";
MPRINT(EM_REPORT_DATASOURCE):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=temp_source
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "LABEL" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( LABEL=LABEL1 VALUE=VALUE1))
_tmpms_dat2(rename=( LABEL=LABEL2 VALUE=VALUE2)) _tmpms_dat3(rename=( LABEL=LABEL3
VALUE=VALUE3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set temp_source;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep LABEL VALUE numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 4 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 4 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 8 and _n_ le 12 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMP_SOURCE.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 3 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 3 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var LABEL1 VALUE1 LABEL2 VALUE2 LABEL3 VALUE3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_DATASOURCE):  ;
MPRINT(EM_REPORT_DATASOURCE):   proc delete data=temp_source;
MPRINT(EM_REPORT_DATASOURCE):   run;
 
NOTE: Deleting WORK.TEMP_SOURCE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_DATASOURCE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Ids_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Ids_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.IDS_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=EMWS1.Ids_variableset out=_tmpvl_vs;
MPRINT(EM_REPORT_VARS):   by name;
 
NOTE: There were 13 observations read from the data set EMWS1.IDS_VARIABLESET.
NOTE: The data set WORK._TMPVL_VS has 13 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   update _tmpvl_pdv _tmpvl_vs;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   label type = "Type" format = "Format" creator = "Creator" family =
"Family" label = "Label" ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: There were 13 observations read from the data set WORK._TMPVL_VS.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variables List";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=All: Home-Equity Loan Scoring Data
Variables List";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pdv noobs label contents='';
MPRINT(EM_REPORT_VARS):   var name label role level type length format creator;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Ids_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Ids_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey6
MPRINT(EM_REPORT_NODE):   from EMWS1.Ids_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype = DATA EMSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("GrfExpl")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='GRFEXPL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
181245     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
181246     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
181246   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
181246   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
181247     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
181248     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
181249     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
181250     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
181251     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181252     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181253     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181254     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181255     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181256     output;
MPRINT(EM_GETTRAINPATH):   output;
181257     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
181258     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
181259     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181260     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
181261     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
181262     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181263     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181264     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181265     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181266     output;
MPRINT(EM_GETTRAINPATH):   output;
181267     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("GrfExpl"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Graph Explore";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = GrfExpl";
MPRINT(EM_REPORT_NODE):   put "Node label = Graph Explore";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\GrfExpl\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
181268     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181269     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181270     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181270   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
181270   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
181271     Name = 'EmSampleMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmSampleMethod';
181272     Value = "%nrbquote(FIRSTN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "FIRSTN";
181273     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181274     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181275     Name = 'EmSampleSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmSampleSize';
181276     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
181277     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181278     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181279     Name = 'EmRandomSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmRandomSeed';
181280     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
181281     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181282     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181283     Name = 'Target';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Target';
181284     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181285     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181286     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181287     Name = 'GroupByTarget';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupByTarget';
181288     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181289     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181290     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181291     Name = 'DataSource';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DataSource';
181292     Value = "%nrbquote(SAMPLE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "SAMPLE";
181293     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181294     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181295     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181296     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
181297     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
181298     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 6 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
181299     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
181300     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181301     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181301   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
181302     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
181303     Value = "GraphExplore";
MPRINT(EM_REPORT_PROPERTIES):   Value = "GraphExplore";
181304     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
181305     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
181306     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181307     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
181308     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 6 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 7 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Graph Explore";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Graph Explore Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 2 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-2*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 2 and _n_ le 4 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-2*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 4 and _n_ le 6 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-2*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 2 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 2 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 2 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 2 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 2 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 2 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 2 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.GrfExpl_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.GrfExpl_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.GRFEXPL_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
11 OUTPUT;
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Graph Explore";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Graph Explore Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.GrfExpl_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "GrfExpl" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRFEXPL_CMETA_TRAIN.
      WHERE UPCASE(creator)='GrfExpl';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
NOTE: Deleting WORK._TMPVL_VS (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.GrfExpl_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.GrfExpl_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey9
MPRINT(EM_REPORT_NODE):   from EMWS1.GrfExpl_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==12 : Viewtype = DATA Sample
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.GrfExpl_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.GRFEXPL_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = BAR bad
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SGPLOT):   title2 "Node=Graph Explore";
MPRINT(EM_REPORT_SGPLOT):   title3 "bad";
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=5000;
MPRINT(EM_REPORT_SGPLOT):   proc sgplot data=EMWS1.GrfExpl_SAMPLE_DATA;
MPRINT(EM_REPORT_SGPLOT):   vbar bad / missing;
MPRINT(EM_REPORT_SGPLOT):   xaxis type=discrete ;
MPRINT(EM_REPORT_SGPLOT):   keylegend;
MPRINT(EM_REPORT_SGPLOT):   run;
 
NOTE: Since no format is assigned, the numeric category variable will use the default of BEST6.
NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           4.23 seconds
      cpu time            0.29 seconds
 
NOTE: There were 5960 observations read from the data set EMWS1.GRFEXPL_SAMPLE_DATA.
 
MPRINT(EM_REPORT_SGPLOT):   quit;
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=100;
MPRINT(EM_REPORT_SGPLOT):   title1;
MPRINT(EM_REPORT_SGPLOT):   title2;
MPRINT(EM_REPORT_SGPLOT):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Part")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='PART';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
181309     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
181310     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
181310   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
181310   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
181311     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
181312     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
181313     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
181314     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
181315     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181316     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181317     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181318     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181319     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181320     output;
MPRINT(EM_GETTRAINPATH):   output;
181321     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
181322     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
181323     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181324     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
181325     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
181326     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181327     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181328     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181329     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181330     output;
MPRINT(EM_GETTRAINPATH):   output;
181331     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
181332     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
181333     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
181334     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
181335     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181336     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181337     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
181338     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181339     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181340     output;
MPRINT(EM_GETTRAINPATH):   output;
181341     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Part"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Data Partition";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Part";
MPRINT(EM_REPORT_NODE):   put "Node label = Data Partition";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Part\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
181342     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181343     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181344     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181344   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
181344   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
181345     Name = 'Method';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Method';
181346     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
181347     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181348     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181349     Name = 'TrainPct';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainPct';
181350     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
181351     Default = "%nrbquote(40)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "40";
181352     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181353     Name = 'ValidatePct';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ValidatePct';
181354     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
181355     Default = "%nrbquote(30)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "30";
181356     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181357     Name = 'TestPct';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TestPct';
181358     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
181359     Default = "%nrbquote(30)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "30";
181360     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181361     Name = 'RandomSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandomSeed';
181362     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
181363     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181364     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181365     Name = 'OutputType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'OutputType';
181366     Value = "%nrbquote(DATA)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DATA";
181367     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181368     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181369     Name = 'IntervalDistribution';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IntervalDistribution';
181370     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181371     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181372     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181373     Name = 'ClassDistribution';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ClassDistribution';
181374     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181375     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181376     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181377     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
181378     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
181379     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
181380     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 8 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181381     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
181382     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181383     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181383   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
181384     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
181385     Value = "Partition";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Partition";
181386     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
181387     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181388     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181389     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
181390     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 8 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 9 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.15 seconds
      cpu time            0.17 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Data Partition";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Data Partition Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 3 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-3*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 3 and _n_ le 6 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-3*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 6 and _n_ le 9 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-3*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 9 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 3 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 3 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 3 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Part_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Part_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.PART_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Data Partition";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Data Partition Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Part_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Part" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_CMETA_TRAIN.
      WHERE UPCASE(creator)='Part';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Part_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Part_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey11
MPRINT(EM_REPORT_NODE):   from EMWS1.Part_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA INTRVLSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = LATTICE CLASSSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Repl")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='REPL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
181391     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
181392     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
181392   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
181392   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
181393     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
181394     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
181395     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
181396     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
181397     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181398     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181399     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181400     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181401     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181402     output;
MPRINT(EM_GETTRAINPATH):   output;
181403     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
181404     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
181405     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181406     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
181407     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
181408     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181409     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181410     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181411     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181412     output;
MPRINT(EM_GETTRAINPATH):   output;
181413     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
181414     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
181415     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
181416     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
181417     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181418     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181419     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
181420     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181421     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181422     output;
MPRINT(EM_GETTRAINPATH):   output;
181423     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
181424     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
181425     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181426     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
181427     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
181428     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181429     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181430     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181431     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181432     output;
MPRINT(EM_GETTRAINPATH):   output;
181433     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Repl"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Replacement";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Repl";
MPRINT(EM_REPORT_NODE):   put "Node label = Replacement";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Repl\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
181434     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181435     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181436     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181436   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
181436   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
181437     Name = 'HideVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HideVariable';
181438     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181439     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181440     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181441     Name = 'UnknownLevel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UnknownLevel';
181442     Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
181443     Default = "%nrbquote(MODE)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "MODE";
181444     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181445     Name = 'ReplaceMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ReplaceMethod';
181446     Value = "%nrbquote(COMPUTED)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "COMPUTED";
181447     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181448     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181449     Name = 'CalcMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CalcMethod';
181450     Value = "%nrbquote(STDDEV)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STDDEV";
181451     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181452     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181453     Name = 'MADSCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MADSCutoff';
181454     Value = "%nrbquote(9.0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "9.0";
181455     Default = "%nrbquote(9)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "9";
181456     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181457     Name = 'SpacingsCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SpacingsCutoff';
181458     Value = "%nrbquote(9.0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "9.0";
181459     Default = "%nrbquote(9)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "9";
181460     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181461     Name = 'StddevCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'StddevCutoff';
181462     Value = "%nrbquote(3.0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "3.0";
181463     Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
181464     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181465     Name = 'PercentsCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PercentsCutoff';
181466     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
181467     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181468     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181469     Name = 'CountReport';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CountReport';
181470     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181471     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181472     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181473     Name = 'IntervalMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IntervalMethod';
181474     Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
181475     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181476     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181477     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181478     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
181479     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
181480     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 10 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181481     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
181482     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181483     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181483   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
181484     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
181485     Value = "Replace";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Replace";
181486     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
181487     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181488     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181489     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
181490     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 10 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 11 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Replacement";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Replacement Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 4 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 4 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 8 and _n_ le 12 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 11 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 4 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Repl_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Repl_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.REPL_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
11 OUTPUT;
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Replacement";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Replacement Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Repl_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Repl" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.REPL_CMETA_TRAIN.
      WHERE UPCASE(creator)='Repl';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Repl_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Repl_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey6
MPRINT(EM_REPORT_NODE):   from EMWS1.Repl_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA ReplaceInterval
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Replacement";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Interval Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Replacement Interval Variables";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.Repl_REPORTLIMITS(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 10 observations read from the data set EMWS1.REPL_REPORTLIMITS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Repl_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.REPL_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = DATA ReplaceCount
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Replacement";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Total Replacement Counts";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Replacement Total Replacement Counts";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.Repl_COUNT(obs=100) noobs label contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 10 observations read from the data set EMWS1.REPL_COUNT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Trans")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='TRANS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
181491     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
181492     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
181492   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
181492   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
181493     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
181494     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
181495     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
181496     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
181497     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181498     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181499     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181500     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181501     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181502     output;
MPRINT(EM_GETTRAINPATH):   output;
181503     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
181504     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
181505     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181506     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
181507     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
181508     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181509     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181510     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181511     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181512     output;
MPRINT(EM_GETTRAINPATH):   output;
181513     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
181514     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
181515     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
181516     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
181517     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181518     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181519     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
181520     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181521     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181522     output;
MPRINT(EM_GETTRAINPATH):   output;
181523     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
181524     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
181525     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181526     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
181527     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
181528     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181529     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181530     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181531     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181532     output;
MPRINT(EM_GETTRAINPATH):   output;
181533     nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
181534     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
181535     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
181536     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
181537     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
181538     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181539     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181540     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181541     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181542     output;
MPRINT(EM_GETTRAINPATH):   output;
181543     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Trans"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Trans";
MPRINT(EM_REPORT_NODE):   put "Node label = Transform Variables";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Trans";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
181544     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181545     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181546     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181546   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
181546   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
181547     Name = 'DefaultMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultMethod';
181548     Value = "%nrbquote(LOG)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "LOG";
181549     Default = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "NONE";
181550     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181551     Name = 'DefaultTargetMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultTargetMethod';
181552     Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
181553     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181554     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181555     Name = 'DefaultClassMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultClassMethod';
181556     Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
181557     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181558     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181559     Name = 'DefaultClassTargetMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultClassTargetMethod';
181560     Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
181561     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181562     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181563     Name = 'Offset';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Offset';
181564     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
181565     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181566     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181567     Name = 'MinOffset';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinOffset';
181568     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181569     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181570     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181571     Name = 'HideVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HideVariable';
181572     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181573     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181574     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181575     Name = 'RejectVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RejectVariable';
181576     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181577     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181578     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181579     Name = 'GroupCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupCutoff';
181580     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
181581     Default = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "0.5";
181582     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181583     Name = 'GroupMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupMissing';
181584     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181585     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181586     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181587     Name = 'EmRandomSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmRandomSeed';
181588     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
181589     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181590     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181591     Name = 'EmSampleSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmSampleSize';
181592     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
181593     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181594     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181595     Name = 'EmSampleMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmSampleMethod';
181596     Value = "%nrbquote(FIRSTN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "FIRSTN";
181597     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181598     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181599     Name = 'MissingValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MissingValue';
181600     Value = "%nrbquote(USEINSEARCH)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "USEINSEARCH";
181601     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181602     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181603     Name = 'SummaryVariables';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SummaryVariables';
181604     Value = "%nrbquote(TRANSFORMED)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRANSFORMED";
181605     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181606     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181607     Name = 'SummaryStatistics';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SummaryStatistics';
181608     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181609     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181610     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181611     Name = 'UseMetaTransform';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseMetaTransform';
181612     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181613     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181614     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181615     Name = 'MissingAsLevel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MissingAsLevel';
181616     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181617     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181618     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181619     Name = 'NumberofBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberofBins';
181620     Value = "%nrbquote(VARIABLES)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "VARIABLES";
181621     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181622     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181623     Name = 'MaxOptimalBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxOptimalBins';
181624     Value = "%nrbquote(4)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4";
181625     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181626     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181627     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
181628     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
181629     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
181630     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 20 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
181631     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
181632     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181633     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181633   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
181634     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
181635     Value = "Transform";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Transform";
181636     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
181637     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
181638     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181639     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
181640     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 20 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Transform Variables Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 7 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 7 and _n_ le 14 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 14 and _n_ le 21 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 21 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 7 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Trans_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Trans_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.TRANS_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 23 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 23 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 23 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 23 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 23 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
22 OUTPUT;
NOTE: There were 23 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Transform Variables Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Trans_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Trans" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
      WHERE UPCASE(creator)='Trans';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Trans_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Trans_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey6
MPRINT(EM_REPORT_NODE):   from EMWS1.Trans_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==12 : Viewtype = DATA FORMULA
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = DATA COMPUTED
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = DATA METATRANS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = TEXT USERCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = DATA BESTRSQUARE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==17 : Viewtype = DATA STATISTICS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Transformations Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Transform Variables Transformations
Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.Trans_STATISTICS(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 22 observations read from the data set EMWS1.TRANS_STATISTICS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("BINNING")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='BINNING';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
181641     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
181642     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
181642   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
181642   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
181643     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
181644     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
181645     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
181646     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
181647     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181648     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181649     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181650     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181651     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181652     output;
MPRINT(EM_GETTRAINPATH):   output;
181653     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
181654     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
181655     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
13 The SAS System
 
181656     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
181657     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
181658     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181659     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181660     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181661     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181662     output;
MPRINT(EM_GETTRAINPATH):   output;
181663     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
181664     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
181665     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
181666     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
181667     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181668     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181669     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
181670     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181671     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181672     output;
MPRINT(EM_GETTRAINPATH):   output;
181673     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
181674     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
181675     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181676     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
181677     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
181678     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181679     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181680     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181681     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181682     output;
MPRINT(EM_GETTRAINPATH):   output;
181683     nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
181684     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
181685     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
181686     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
181687     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
181688     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181689     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181690     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181691     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181692     output;
MPRINT(EM_GETTRAINPATH):   output;
181693     nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
181694     parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
181695     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181696     component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
181697     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
181698     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181699     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181700     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181701     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181702     output;
MPRINT(EM_GETTRAINPATH):   output;
181703     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("BINNING"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = BINNING";
MPRINT(EM_REPORT_NODE):   put "Node label = Interactive Binning";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Trans => BINNING";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\BINNING\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
181704     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181705     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181706     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181706   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
181706   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
181707     Name = 'MissingAsLevel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MissingAsLevel';
181708     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181709     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181710     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181711     Name = 'ApplyLevelRule';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyLevelRule';
181712     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181713     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181714     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181715     Name = 'BinMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'BinMethod';
181716     Value = "%nrbquote(QUANTILE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "QUANTILE";
181717     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181718     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181719     Name = 'NumBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumBins';
181720     Value = "%nrbquote(4)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4";
181721     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181722     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181723     Name = 'Freeze';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Freeze';
181724     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181725     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181726     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181727     Name = 'CreateGrouping';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CreateGrouping';
181728     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181729     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181730     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181731     Name = 'CreateMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CreateMethod';
181732     Value = "%nrbquote(OVERWRITE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "OVERWRITE";
181733     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181734     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181735     Name = 'ImportGrouping';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImportGrouping';
181736     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181737     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181738     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181739     Name = 'VarSelMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'VarSelMethod';
181740     Value = "%nrbquote(GINI)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "GINI";
181741     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181742     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181743     Name = 'GiniCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GiniCutoff';
181744     Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
181745     Default = "%nrbquote(20.0)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "20.0";
181746     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181747     Name = 'GrpMsmnt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GrpMsmnt';
181748     Value = "%nrbquote(ORDINAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ORDINAL";
181749     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181750     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181751     Name = 'MaxVar';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxVar';
181752     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
181753     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181754     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181755     Name = 'ClassGroupRare';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ClassGroupRare';
181756     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181757     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181758     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181759     Name = 'GroupCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupCutoff';
181760     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
181761     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181762     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181763     Name = 'INTTARGETMETHOD';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'INTTARGETMETHOD';
181764     Value = "%nrbquote(CUTMEAN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "CUTMEAN";
181765     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181766     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181767     Name = 'USERCUTVALUE';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'USERCUTVALUE';
181768     Value = "%nrbquote(0.20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.20";
181769     Default = "%nrbquote(0.2)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "0.2";
181770     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181771     Name = 'RejectIntTarget';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RejectIntTarget';
181772     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181773     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181774     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181775     Name = 'Precision';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Precision';
181776     Value = "%nrbquote(2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "2";
181777     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181778     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181779     Name = 'ImportData';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImportData';
181780     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181781     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181782     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181783     Name = 'GroupMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupMissing';
181784     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181785     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181786     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181787     Name = 'LastRunMessage';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LastRunMessage';
181788     Value = "%nrbquote(Must use one target variable.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Must use one target variable.";
181789     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181790     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181791     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181792     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
181793     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
181794     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 21 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
181795     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
181796     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181797     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181797   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
181798     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
181799     Value = "Binning";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Binning";
181800     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
181801     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
181802     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181803     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
181804     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 21 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 7 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 7 and _n_ le 14 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 14 and _n_ le 21 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 22 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 7 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.BINNING_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.BINNING_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 24 observations read from the data set EMWS1.BINNING_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 14 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 14 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 14 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 14 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
14 OUTPUT;
NOTE: There were 14 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.BINNING_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "BINNING" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.BINNING_CMETA_TRAIN.
      WHERE UPCASE(creator)='BINNING';
NOTE: The data set WORK._TMPVL_PDVX has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVX has 4 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 4 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Created Variables Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Created Variables
Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pdvxp noobs label contents='';
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDVXP.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.BINNING_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.BINNING_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey19
MPRINT(EM_REPORT_NODE):   from EMWS1.BINNING_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA EVENTRATESTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = DATA OUTPUTTABLE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Output Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Output Variables";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.BINNING_RESULTSTABLE(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 12 observations read from the data set EMWS1.BINNING_RESULTSTABLE.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = BAR STATPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SGPLOT):   title2 "Node=Interactive Binning";
MPRINT(EM_REPORT_SGPLOT):   title3 "Statistics Plot";
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=5000;
MPRINT(EM_REPORT_SGPLOT):   proc sgplot data=EMWS1.BINNING_RESULTSTABLE;
MPRINT(EM_REPORT_SGPLOT):   vbar DISPLAY_VAR / missing response=_GINI_;
MPRINT(EM_REPORT_SGPLOT):   xaxis type=discrete ;
MPRINT(EM_REPORT_SGPLOT):   keylegend;
MPRINT(EM_REPORT_SGPLOT):   run;
 
NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           0.45 seconds
      cpu time            0.14 seconds
 
NOTE: There were 12 observations read from the data set EMWS1.BINNING_RESULTSTABLE.
 
MPRINT(EM_REPORT_SGPLOT):   quit;
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=100;
MPRINT(EM_REPORT_SGPLOT):   title1;
MPRINT(EM_REPORT_SGPLOT):   title2;
MPRINT(EM_REPORT_SGPLOT):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 18 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = LATTICE EVENTRATE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct DISPLAY_VAR) into :numx from
EMWS1.BINNING_COARSE(where=(((_GINI_ >= 20) & (GINIORDER <= 10))));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Interactive Binning";
MPRINT(EM_REPORT_LATTICE):   title3 "Event Rate Plot";
MPRINT(EM_REPORT_LATTICE):   title4 "((_GINI_ >= 20) & (GINIORDER <= 10))";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel data=EMWS1.BINNING_COARSE(where=(((_GINI_ >= 20) &
(GINIORDER <= 10))));
MPRINT(EM_REPORT_LATTICE):   panelby DISPLAY_VAR / uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   vbar _GROUP_ / response=EVENTRATE ;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin ;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid ;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: Since no format is assigned, the numeric category variable will use the default of BEST6.
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.40 seconds
      cpu time            0.28 seconds
 
NOTE: There were 20 observations read from the data set EMWS1.BINNING_COARSE.
      WHERE (_GINI_>=20) and (GINIORDER<=10);
 
MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Event Rate Plot";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Event Rate Plot";
MPRINT(EM_REPORT_LATTICE):  ;
MPRINT(EM_REPORT_LATTICE):   proc print data=EMWS1.BINNING_COARSE(where=(((_GINI_ >= 20) &
(GINIORDER <= 10)))) noobs label contents='';
MPRINT(EM_REPORT_LATTICE):   var display_var _label_ _group_ role eventRate;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.BINNING_COARSE.
      WHERE (_GINI_>=20) and (GINIORDER<=10);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural6")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL6';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
181805     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
181806     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
181806   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
181806   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
181807     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
181808     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
181809     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
181810     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
181811     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181812     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181813     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181814     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181815     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181816     output;
MPRINT(EM_GETTRAINPATH):   output;
181817     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
181818     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
181819     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181820     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
181821     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
181822     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181823     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181824     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181825     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181826     output;
MPRINT(EM_GETTRAINPATH):   output;
181827     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
181828     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
181829     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
181830     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
181831     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
181832     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181833     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
181834     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181835     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181836     output;
MPRINT(EM_GETTRAINPATH):   output;
181837     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
181838     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
181839     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
181840     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
181841     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
181842     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181843     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181844     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181845     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181846     output;
MPRINT(EM_GETTRAINPATH):   output;
181847     nodelabel="Neural6";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural6";
181848     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
181849     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
181850     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
181851     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
181852     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
181853     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
181854     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
181855     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
181856     output;
MPRINT(EM_GETTRAINPATH):   output;
181857     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural6"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural6";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (6)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Neural6";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
181858     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
181859     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
181860     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
181860   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
181860   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
181861     Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
181862     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181863     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181864     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181865     Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
181866     Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
181867     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181868     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181869     Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
181870     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181871     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181872     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181873     Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
181874     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
181875     Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
181876     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181877     Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
181878     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181879     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181880     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181881     Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
181882     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
181883     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181884     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181885     Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
181886     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
181887     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181888     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181889     Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
181890     Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
181891     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181892     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181893     Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
181894     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
181895     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181896     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181897     Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
181898     Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
181899     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181900     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181901     Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
181902     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
181903     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181904     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181905     Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
181906     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181907     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181908     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181909     Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
181910     Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
181911     Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
181912     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181913     Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
181914     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
181915     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181916     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181917     Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
181918     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
181919     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181920     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181921     Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
181922     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
181923     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181924     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181925     Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
181926     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
181927     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181928     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181929     Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
181930     Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
181931     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181932     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181933     Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
181934     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
181935     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181936     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181937     Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
181938     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
181939     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181940     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181941     Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
181942     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
181943     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181944     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181945     Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
181946     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
181947     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181948     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181949     Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
181950     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
181951     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181952     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181953     Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
181954     Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
181955     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181956     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181957     Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
181958     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181959     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181960     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181961     Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
181962     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
181963     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181964     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181965     Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
181966     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181967     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181968     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181969     Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
181970     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
181971     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181972     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181973     Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
181974     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181975     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181976     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181977     Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
181978     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181979     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181980     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181981     Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
181982     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181983     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181984     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181985     Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
181986     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181987     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181988     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181989     Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
181990     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181991     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181992     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181993     Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
181994     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181995     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
181996     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
181997     Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
181998     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
181999     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182000     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182001     Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
182002     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182003     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182004     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182005     Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
182006     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182007     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182008     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182009     Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
182010     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182011     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182012     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182013     Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
182014     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182015     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182016     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182017     Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
182018     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182019     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182020     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182021     Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
182022     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182023     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182024     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182025     Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
182026     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182027     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182028     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182029     Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
182030     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182031     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182032     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182033     Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
182034     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
182035     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182036     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182037     Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
182038     Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
182039     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182040     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182041     Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
182042     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182043     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182044     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182045     Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
182046     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182047     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182048     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182049     Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
182050     Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
182051     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182052     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182053     Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
182054     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182055     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182056     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182057     Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
182058     Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
182059     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182060     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182061     Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
182062     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
182063     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182064     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182065     Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
182066     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182067     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182068     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182069     Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
182070     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
182071     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182072     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182073     Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
182074     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
182075     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182076     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182077     Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
182078     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182079     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182080     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182081     Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
182082     Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
182083     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182084     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182085     Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
182086     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182087     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182088     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182089     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
182090     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
182091     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
182092     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
182093     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
182094     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
182095     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
182095   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
182096     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
182097     Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
182098     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
182099     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
182100     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
182101     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
182102     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural6_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural6_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.NEURAL6_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural6_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural6" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural6';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural6_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural6_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural6_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural6_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL6_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (6)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural6_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL6_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural6_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (6)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural6_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 52 observations read from the data set EMWS1.NEURAL6_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 52 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.65 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural6_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural6_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL6_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (6)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.68 seconds
      cpu time            0.14 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.73 seconds
      cpu time            0.15 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.60 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural6_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural6_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural6_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL6_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (6)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.62 seconds
      cpu time            0.20 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.57 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural5")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL5';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
182103     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
182104     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
182104   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
182104   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
182105     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
182106     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
182107     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
182108     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
182109     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
182110     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182111     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182112     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182113     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182114     output;
MPRINT(EM_GETTRAINPATH):   output;
182115     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
182116     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
182117     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
182118     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
182119     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
182120     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182121     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182122     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182123     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182124     output;
MPRINT(EM_GETTRAINPATH):   output;
182125     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
182126     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
182127     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
182128     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
182129     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
182130     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182131     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
182132     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182133     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182134     output;
MPRINT(EM_GETTRAINPATH):   output;
182135     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
182136     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
182137     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
182138     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
182139     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
182140     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182141     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182142     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182143     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182144     output;
MPRINT(EM_GETTRAINPATH):   output;
182145     nodelabel="Neural5";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural5";
182146     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
182147     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
182148     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
182149     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
182150     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182151     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182152     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182153     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182154     output;
MPRINT(EM_GETTRAINPATH):   output;
182155     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural5"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural5";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (5)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Neural5";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural5\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
182156     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
182157     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
182158     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
182158   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
182158   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
182159     Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
182160     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182161     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182162     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182163     Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
182164     Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
182165     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182166     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182167     Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
182168     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182169     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182170     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182171     Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
182172     Value = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "3";
182173     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182174     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182175     Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
182176     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182177     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182178     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182179     Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
182180     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
182181     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182182     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182183     Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
182184     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
182185     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182186     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182187     Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
182188     Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
182189     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182190     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182191     Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
182192     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
182193     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182194     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182195     Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
182196     Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
182197     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182198     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182199     Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
182200     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182201     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182202     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182203     Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
182204     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182205     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182206     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182207     Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
182208     Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
182209     Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
182210     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182211     Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
182212     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182213     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182214     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182215     Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
182216     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182217     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182218     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182219     Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
182220     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
182221     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182222     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182223     Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
182224     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182225     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182226     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182227     Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
182228     Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
182229     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182230     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182231     Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
182232     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182233     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182234     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182235     Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
182236     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182237     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182238     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182239     Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
182240     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182241     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182242     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182243     Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
182244     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
182245     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182246     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182247     Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
182248     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182249     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182250     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182251     Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
182252     Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
182253     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182254     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182255     Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
182256     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182257     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182258     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182259     Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
182260     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182261     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182262     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182263     Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
182264     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182265     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182266     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182267     Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
182268     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182269     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182270     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182271     Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
182272     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182273     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182274     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182275     Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
182276     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182277     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182278     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182279     Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
182280     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182281     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182282     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182283     Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
182284     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182285     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182286     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182287     Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
182288     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182289     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182290     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182291     Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
182292     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182293     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182294     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182295     Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
182296     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182297     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182298     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182299     Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
182300     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182301     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182302     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182303     Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
182304     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182305     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182306     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182307     Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
182308     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182309     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182310     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182311     Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
182312     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182313     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182314     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182315     Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
182316     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182317     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182318     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182319     Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
182320     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182321     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182322     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182323     Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
182324     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182325     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182326     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182327     Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
182328     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182329     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182330     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182331     Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
182332     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
182333     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182334     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182335     Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
182336     Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
182337     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182338     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182339     Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
182340     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182341     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182342     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182343     Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
182344     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182345     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182346     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182347     Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
182348     Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
182349     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182350     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182351     Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
182352     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182353     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182354     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182355     Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
182356     Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
182357     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182358     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182359     Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
182360     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
182361     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182362     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182363     Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
182364     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182365     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182366     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182367     Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
182368     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
182369     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182370     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182371     Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
182372     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
182373     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182374     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182375     Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
182376     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182377     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182378     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182379     Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
182380     Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
182381     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182382     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182383     Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
182384     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182385     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182386     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182387     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
182388     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
182389     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
182390     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
182391     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
182392     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
182393     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
182393   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
182394     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
182395     Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
182396     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
182397     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
182398     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
182399     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
182400     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural5_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural5_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.NEURAL5_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural5_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural5" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural5';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural5_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural5_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural5_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural5_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL5_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (5)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural5_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL5_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural5_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (5)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=2;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=2;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural5_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 52 observations read from the data set EMWS1.NEURAL5_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 52 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.42 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural5_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural5_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL5_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (5)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.62 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.54 seconds
      cpu time            0.17 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.56 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural5_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural5_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural5_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 39 observations read from the data set EMWS1.NEURAL5_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 39 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 39 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 39 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (5)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.51 seconds
      cpu time            0.20 seconds
 
NOTE: There were 39 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.56 seconds
      cpu time            0.17 seconds
 
NOTE: There were 39 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 39 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 39 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 39 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural4")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
182401     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
182402     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
182402   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
182402   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
182403     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
182404     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
182405     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
182406     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
182407     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
182408     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182409     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182410     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182411     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182412     output;
MPRINT(EM_GETTRAINPATH):   output;
182413     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
182414     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
182415     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
182416     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
182417     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
182418     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182419     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182420     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182421     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182422     output;
MPRINT(EM_GETTRAINPATH):   output;
182423     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
182424     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
182425     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
182426     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
182427     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
182428     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182429     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
182430     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182431     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182432     output;
MPRINT(EM_GETTRAINPATH):   output;
182433     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
182434     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
182435     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
182436     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
182437     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
182438     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182439     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182440     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182441     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182442     output;
MPRINT(EM_GETTRAINPATH):   output;
182443     nodelabel="Neural4";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural4";
182444     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
182445     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
182446     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
182447     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
182448     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182449     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182450     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182451     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182452     output;
MPRINT(EM_GETTRAINPATH):   output;
182453     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural4"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural4";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (4)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Neural4";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
182454     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
182455     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
182456     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
182456   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
182456   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
182457     Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
182458     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182459     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182460     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182461     Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
182462     Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
182463     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182464     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182465     Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
182466     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182467     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182468     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182469     Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
182470     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182471     Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
182472     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182473     Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
182474     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182475     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182476     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182477     Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
182478     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
182479     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182480     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182481     Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
182482     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
182483     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182484     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182485     Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
182486     Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
182487     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182488     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182489     Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
182490     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
182491     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182492     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182493     Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
182494     Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
182495     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182496     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182497     Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
182498     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182499     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182500     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182501     Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
182502     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182503     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182504     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182505     Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
182506     Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
182507     Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
182508     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182509     Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
182510     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182511     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182512     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182513     Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
182514     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182515     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182516     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182517     Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
182518     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
182519     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182520     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182521     Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
182522     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182523     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182524     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182525     Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
182526     Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
182527     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182528     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182529     Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
182530     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182531     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182532     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182533     Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
182534     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182535     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182536     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182537     Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
182538     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182539     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182540     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182541     Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
182542     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
182543     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182544     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182545     Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
182546     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182547     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182548     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182549     Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
182550     Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
182551     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182552     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182553     Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
182554     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182555     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182556     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182557     Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
182558     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182559     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182560     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182561     Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
182562     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182563     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182564     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182565     Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
182566     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182567     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182568     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182569     Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
182570     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182571     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182572     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182573     Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
182574     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182575     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182576     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182577     Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
182578     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182579     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182580     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182581     Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
182582     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182583     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182584     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182585     Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
182586     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182587     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182588     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182589     Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
182590     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182591     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182592     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182593     Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
182594     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182595     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182596     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182597     Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
182598     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182599     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182600     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182601     Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
182602     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182603     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182604     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182605     Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
182606     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182607     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182608     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182609     Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
182610     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182611     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182612     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182613     Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
182614     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182615     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182616     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182617     Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
182618     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182619     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182620     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182621     Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
182622     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182623     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182624     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182625     Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
182626     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182627     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182628     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182629     Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
182630     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
182631     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182632     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182633     Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
182634     Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
182635     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182636     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182637     Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
182638     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182639     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182640     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182641     Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
182642     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182643     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182644     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182645     Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
182646     Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
182647     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182648     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182649     Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
182650     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182651     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182652     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182653     Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
182654     Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
182655     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182656     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182657     Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
182658     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
182659     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182660     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182661     Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
182662     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182663     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182664     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182665     Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
182666     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
182667     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182668     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182669     Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
182670     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
182671     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182672     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182673     Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
182674     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182675     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182676     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182677     Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
182678     Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
182679     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182680     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182681     Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
182682     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182683     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182684     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182685     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
182686     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
182687     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
182688     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
182689     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
182690     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
182691     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
182691   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
182692     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
182693     Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
182694     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
182695     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
182696     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
182697     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
182698     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural4_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural4_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 23 observations read from the data set EMWS1.NEURAL4_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural4_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural4" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural4';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural4_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural4_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural4_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural4_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL4_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (4)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural4_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL4_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural4_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (4)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=30;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=30;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural4_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 52 observations read from the data set EMWS1.NEURAL4_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 52 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.39 seconds
      cpu time            0.17 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural4_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural4_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL4_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (4)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.48 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.42 seconds
      cpu time            0.15 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.43 seconds
      cpu time            0.15 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural4_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural4_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural4_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.NEURAL4_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 37 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 37 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 37 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (4)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.43 seconds
      cpu time            0.15 seconds
 
NOTE: There were 37 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.40 seconds
      cpu time            0.14 seconds
 
NOTE: There were 37 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 37 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 37 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 37 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural3")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL3';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
182699     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
182700     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
182700   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
182700   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
182701     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
182702     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
182703     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
182704     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
182705     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
182706     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182707     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182708     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182709     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182710     output;
MPRINT(EM_GETTRAINPATH):   output;
182711     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
182712     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
182713     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
182714     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
182715     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
182716     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182717     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182718     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182719     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182720     output;
MPRINT(EM_GETTRAINPATH):   output;
182721     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
182722     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
182723     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
182724     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
182725     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
182726     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182727     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
182728     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182729     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182730     output;
MPRINT(EM_GETTRAINPATH):   output;
182731     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
182732     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
182733     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
182734     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
182735     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
182736     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182737     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182738     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182739     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182740     output;
MPRINT(EM_GETTRAINPATH):   output;
182741     nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
182742     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
182743     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
182744     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
182745     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
182746     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182747     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182748     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182749     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182750     output;
MPRINT(EM_GETTRAINPATH):   output;
182751     nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
182752     parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
182753     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
182754     component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
182755     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
182756     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182757     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182758     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182759     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182760     output;
14 The SAS System
 
MPRINT(EM_GETTRAINPATH):   output;
182761     nodelabel="Neural3";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural3";
182762     parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
182763     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
182764     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
182765     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
182766     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
182767     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
182768     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
182769     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
182770     output;
MPRINT(EM_GETTRAINPATH):   output;
182771     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural3"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural3";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (3)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Trans => BINNING =>
Neural3";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural3\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
182772     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
182773     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
182774     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
182774   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
182774   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
182775     Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
182776     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182777     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182778     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182779     Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
182780     Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
182781     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182782     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182783     Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
182784     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182785     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182786     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182787     Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
182788     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
182789     Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
182790     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182791     Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
182792     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182793     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182794     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182795     Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
182796     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
182797     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182798     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182799     Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
182800     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
182801     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182802     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182803     Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
182804     Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
182805     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182806     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182807     Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
182808     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
182809     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182810     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182811     Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
182812     Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
182813     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182814     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182815     Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
182816     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182817     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182818     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182819     Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
182820     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182821     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182822     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182823     Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
182824     Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
182825     Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
182826     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182827     Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
182828     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182829     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182830     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182831     Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
182832     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182833     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182834     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182835     Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
182836     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
182837     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182838     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182839     Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
182840     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182841     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182842     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182843     Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
182844     Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
182845     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182846     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182847     Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
182848     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182849     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182850     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182851     Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
182852     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182853     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182854     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182855     Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
182856     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182857     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182858     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182859     Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
182860     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
182861     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182862     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182863     Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
182864     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
182865     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182866     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182867     Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
182868     Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
182869     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182870     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182871     Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
182872     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182873     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182874     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182875     Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
182876     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182877     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182878     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182879     Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
182880     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182881     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182882     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182883     Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
182884     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
182885     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182886     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182887     Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
182888     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182889     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182890     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182891     Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
182892     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182893     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182894     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182895     Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
182896     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182897     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182898     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182899     Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
182900     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182901     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182902     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182903     Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
182904     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182905     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182906     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182907     Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
182908     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182909     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182910     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182911     Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
182912     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
182913     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182914     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182915     Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
182916     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182917     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182918     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182919     Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
182920     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182921     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182922     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182923     Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
182924     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182925     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182926     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182927     Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
182928     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182929     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182930     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182931     Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
182932     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182933     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182934     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182935     Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
182936     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182937     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182938     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182939     Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
182940     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
182941     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182942     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182943     Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
182944     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
182945     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182946     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182947     Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
182948     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
182949     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182950     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182951     Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
182952     Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
182953     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182954     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182955     Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
182956     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182957     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182958     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182959     Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
182960     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182961     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182962     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182963     Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
182964     Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
182965     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182966     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182967     Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
182968     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182969     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182970     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182971     Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
182972     Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
182973     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182974     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182975     Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
182976     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
182977     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182978     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182979     Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
182980     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
182981     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182982     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182983     Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
182984     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
182985     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182986     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182987     Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
182988     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
182989     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182990     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182991     Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
182992     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
182993     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182994     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182995     Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
182996     Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
182997     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
182998     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
182999     Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
183000     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183001     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183002     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183003     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183004     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
183005     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
183006     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
183007     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
183008     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
183009     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
183009   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
183010     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
183011     Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
183012     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
183013     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183014     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
183015     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
183016     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural3_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural3_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 27 observations read from the data set EMWS1.NEURAL3_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural3_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural3" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural3';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural3_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural3_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural3_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural3_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL3_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (3)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural3_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL3_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural3_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (3)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural3_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 52 observations read from the data set EMWS1.NEURAL3_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 52 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.32 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural3_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural3_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL3_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (3)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.45 seconds
      cpu time            0.15 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.45 seconds
      cpu time            0.17 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.54 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural3_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural3_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural3_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL3_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (3)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.51 seconds
      cpu time            0.20 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.50 seconds
      cpu time            0.21 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural2")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
183017     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
183018     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
183018   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
183018   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
183019     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
183020     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
183021     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
183022     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
183023     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
183024     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183025     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183026     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183027     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183028     output;
MPRINT(EM_GETTRAINPATH):   output;
183029     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
183030     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
183031     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183032     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
183033     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
183034     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183035     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183036     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183037     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183038     output;
MPRINT(EM_GETTRAINPATH):   output;
183039     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
183040     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
183041     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
183042     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
183043     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
183044     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183045     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
183046     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183047     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183048     output;
MPRINT(EM_GETTRAINPATH):   output;
183049     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
183050     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
183051     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183052     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
183053     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183054     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183055     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183056     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183057     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183058     output;
MPRINT(EM_GETTRAINPATH):   output;
183059     nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
183060     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
183061     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
183062     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
183063     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183064     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183065     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183066     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183067     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183068     output;
MPRINT(EM_GETTRAINPATH):   output;
183069     nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
183070     parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
183071     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183072     component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
183073     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183074     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183075     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183076     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183077     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183078     output;
MPRINT(EM_GETTRAINPATH):   output;
183079     nodelabel="Neural2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural2";
183080     parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
183081     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
183082     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
183083     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
183084     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183085     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183086     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183087     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183088     output;
MPRINT(EM_GETTRAINPATH):   output;
183089     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural2"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural2";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (2)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Trans => BINNING =>
Neural2";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural2\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
183090     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
183091     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
183092     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
183092   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
183092   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
183093     Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
183094     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183095     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183096     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183097     Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
183098     Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
183099     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183100     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183101     Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
183102     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183103     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183104     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183105     Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
183106     Value = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "3";
183107     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183108     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183109     Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
183110     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183111     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183112     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183113     Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
183114     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
183115     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183116     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183117     Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
183118     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
183119     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183120     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183121     Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
183122     Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
183123     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183124     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183125     Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
183126     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
183127     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183128     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183129     Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
183130     Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
183131     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183132     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183133     Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
183134     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183135     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183136     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183137     Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
183138     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183139     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183140     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183141     Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
183142     Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
183143     Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
183144     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183145     Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
183146     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183147     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183148     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183149     Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
183150     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183151     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183152     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183153     Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
183154     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
183155     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183156     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183157     Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
183158     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183159     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183160     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183161     Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
183162     Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
183163     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183164     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183165     Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
183166     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183167     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183168     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183169     Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
183170     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183171     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183172     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183173     Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
183174     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183175     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183176     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183177     Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
183178     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
183179     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183180     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183181     Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
183182     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183183     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183184     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183185     Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
183186     Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
183187     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183188     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183189     Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
183190     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183191     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183192     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183193     Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
183194     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183195     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183196     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183197     Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
183198     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183199     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183200     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183201     Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
183202     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183203     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183204     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183205     Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
183206     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183207     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183208     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183209     Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
183210     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183211     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183212     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183213     Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
183214     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183215     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183216     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183217     Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
183218     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183219     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183220     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183221     Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
183222     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183223     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183224     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183225     Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
183226     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183227     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183228     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183229     Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
183230     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183231     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183232     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183233     Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
183234     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183235     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183236     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183237     Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
183238     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183239     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183240     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183241     Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
183242     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183243     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183244     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183245     Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
183246     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183247     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183248     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183249     Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
183250     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183251     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183252     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183253     Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
183254     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183255     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183256     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183257     Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
183258     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183259     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183260     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183261     Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
183262     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183263     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183264     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183265     Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
183266     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
183267     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183268     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183269     Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
183270     Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
183271     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183272     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183273     Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
183274     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
183275     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183276     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183277     Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
183278     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183279     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183280     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183281     Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
183282     Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
183283     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183284     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183285     Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
183286     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183287     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183288     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183289     Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
183290     Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
183291     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183292     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183293     Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
183294     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
183295     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183296     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183297     Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
183298     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
183299     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183300     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183301     Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
183302     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
183303     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183304     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183305     Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
183306     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
183307     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183308     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183309     Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
183310     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183311     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183312     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183313     Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
183314     Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
183315     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183316     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183317     Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
183318     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183319     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183320     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183321     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
183322     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
183323     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
183324     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183325     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
183326     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
183327     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
183327   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
183328     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
183329     Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
183330     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
183331     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183332     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
183333     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
183334     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural2_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural2_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 27 observations read from the data set EMWS1.NEURAL2_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural2_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural2" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural2';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural2_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural2_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural2_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural2_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL2_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (2)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural2_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural2_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (2)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=1;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=1;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural2_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 52 observations read from the data set EMWS1.NEURAL2_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 52 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.37 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural2_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural2_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (2)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.53 seconds
      cpu time            0.21 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.51 seconds
      cpu time            0.17 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.46 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural2_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural2_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural2_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (2)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.46 seconds
      cpu time            0.23 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.53 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
183335     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
183336     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
183336   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
183336   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
183337     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
183338     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
183339     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
183340     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
183341     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
183342     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183343     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183344     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183345     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183346     output;
MPRINT(EM_GETTRAINPATH):   output;
183347     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
183348     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
183349     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183350     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
183351     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
183352     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183353     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183354     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183355     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183356     output;
MPRINT(EM_GETTRAINPATH):   output;
183357     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
183358     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
183359     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
183360     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
183361     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
183362     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183363     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
183364     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183365     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183366     output;
MPRINT(EM_GETTRAINPATH):   output;
183367     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
183368     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
183369     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183370     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
183371     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183372     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183373     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183374     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183375     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183376     output;
MPRINT(EM_GETTRAINPATH):   output;
183377     nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
183378     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
183379     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
183380     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
183381     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183382     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183383     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183384     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183385     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183386     output;
MPRINT(EM_GETTRAINPATH):   output;
183387     nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
183388     parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
183389     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183390     component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
183391     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183392     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183393     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183394     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183395     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183396     output;
MPRINT(EM_GETTRAINPATH):   output;
183397     nodelabel="Neural";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural";
183398     parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
183399     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
183400     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
183401     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
183402     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183403     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183404     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183405     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183406     output;
MPRINT(EM_GETTRAINPATH):   output;
183407     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Trans => BINNING =>
Neural";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
183408     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
183409     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
183410     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
183410   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
183410   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
183411     Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
183412     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183413     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183414     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183415     Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
183416     Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
183417     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183418     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183419     Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
183420     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183421     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183422     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183423     Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
183424     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183425     Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
183426     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183427     Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
183428     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183429     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183430     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183431     Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
183432     Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
183433     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183434     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183435     Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
183436     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
183437     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183438     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183439     Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
183440     Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
183441     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183442     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183443     Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
183444     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
183445     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183446     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183447     Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
183448     Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
183449     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183450     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183451     Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
183452     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183453     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183454     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183455     Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
183456     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183457     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183458     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183459     Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
183460     Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
183461     Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
183462     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183463     Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
183464     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183465     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183466     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183467     Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
183468     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183469     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183470     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183471     Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
183472     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
183473     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183474     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183475     Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
183476     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183477     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183478     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183479     Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
183480     Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
183481     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183482     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183483     Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
183484     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183485     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183486     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183487     Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
183488     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183489     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183490     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183491     Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
183492     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183493     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183494     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183495     Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
183496     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
183497     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183498     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183499     Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
183500     Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
183501     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183502     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183503     Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
183504     Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
183505     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183506     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183507     Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
183508     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183509     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183510     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183511     Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
183512     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183513     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183514     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183515     Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
183516     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183517     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183518     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183519     Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
183520     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183521     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183522     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183523     Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
183524     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183525     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183526     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183527     Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
183528     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183529     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183530     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183531     Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
183532     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183533     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183534     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183535     Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
183536     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183537     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183538     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183539     Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
183540     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183541     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183542     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183543     Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
183544     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183545     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183546     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183547     Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
183548     Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
183549     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183550     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183551     Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
183552     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183553     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183554     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183555     Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
183556     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183557     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183558     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183559     Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
183560     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183561     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183562     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183563     Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
183564     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183565     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183566     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183567     Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
183568     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183569     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183570     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183571     Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
183572     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183573     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183574     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183575     Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
183576     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183577     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183578     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183579     Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
183580     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183581     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183582     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183583     Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
183584     Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
183585     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183586     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183587     Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
183588     Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
183589     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183590     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183591     Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
183592     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
183593     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183594     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183595     Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
183596     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183597     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183598     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183599     Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
183600     Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
183601     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183602     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183603     Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
183604     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183605     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183606     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183607     Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
183608     Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
183609     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183610     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183611     Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
183612     Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
183613     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183614     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183615     Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
183616     Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
183617     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183618     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183619     Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
183620     Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
183621     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183622     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183623     Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
183624     Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
183625     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183626     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183627     Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
183628     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183629     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183630     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183631     Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
183632     Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
183633     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183634     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183635     Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
183636     Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
183637     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183638     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183639     Name = 'LastRunMessage';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LastRunMessage';
183640     Value = "%nrbquote(Run time error was encountered.  Please see the log for more
183640   ! details.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Run time error was encountered.  Please see the log for
more details.";
183641     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183642     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183643     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
183644     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
183645     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
183646     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183647     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
183648     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
183649     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
183649   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
183650     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
183651     Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
183652     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
183653     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183654     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
183655     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
183656     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 59 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 20 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-20*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 20 and _n_ le 40 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-20*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 40 and _n_ le 60 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-20*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 59 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 20 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 20 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 20 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 20 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 20 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 20 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 20 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 20 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 20 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 20 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 27 observations read from the data set EMWS1.NEURAL_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=2;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=2;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 12 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 12 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 12 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.39 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.42 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.43 seconds
      cpu time            0.18 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.45 seconds
      cpu time            0.20 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set EMWS1.NEURAL_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 24 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 24 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.50 seconds
      cpu time            0.23 seconds
 
NOTE: There were 24 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.48 seconds
      cpu time            0.21 seconds
 
NOTE: There were 24 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 24 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("MdlComp")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='MDLCOMP';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
183657     data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
183658     length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
183658   ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
183658   ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
183659     nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
183660     parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
183661     description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
183662     component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
183663     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
183664     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183665     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183666     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183667     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183668     output;
MPRINT(EM_GETTRAINPATH):   output;
183669     nodelabel="GrfExpl";
MPRINT(EM_GETTRAINPATH):   nodelabel="GrfExpl";
183670     parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
183671     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183672     component="GraphExplore";
MPRINT(EM_GETTRAINPATH):   component="GraphExplore";
183673     tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
183674     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183675     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183676     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183677     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183678     output;
MPRINT(EM_GETTRAINPATH):   output;
183679     nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
183680     parent="GrfExpl";
MPRINT(EM_GETTRAINPATH):   parent="GrfExpl";
183681     description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
183682     component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
183683     tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
183684     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183685     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
183686     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183687     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183688     output;
MPRINT(EM_GETTRAINPATH):   output;
183689     nodelabel="Repl";
MPRINT(EM_GETTRAINPATH):   nodelabel="Repl";
183690     parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
183691     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183692     component="Replace";
MPRINT(EM_GETTRAINPATH):   component="Replace";
183693     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183694     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183695     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183696     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183697     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183698     output;
MPRINT(EM_GETTRAINPATH):   output;
183699     nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
183700     parent="Repl";
MPRINT(EM_GETTRAINPATH):   parent="Repl";
183701     description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
183702     component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
183703     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183704     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183705     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183706     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183707     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183708     output;
MPRINT(EM_GETTRAINPATH):   output;
183709     nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
183710     parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
183711     description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
183712     component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
183713     tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
183714     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183715     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183716     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183717     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183718     output;
MPRINT(EM_GETTRAINPATH):   output;
183719     nodelabel="Neural2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural2";
183720     parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
183721     description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
183722     component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
183723     tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
183724     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183725     PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
183726     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183727     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183728     output;
MPRINT(EM_GETTRAINPATH):   output;
183729     nodelabel="MdlComp";
MPRINT(EM_GETTRAINPATH):   nodelabel="MdlComp";
183730     parent="Neural2";
MPRINT(EM_GETTRAINPATH):   parent="Neural2";
183731     description="Model Compare Class";
MPRINT(EM_GETTRAINPATH):   description="Model Compare Class";
183732     component="ModelCompare";
MPRINT(EM_GETTRAINPATH):   component="ModelCompare";
183733     tooltype="ASSESS";
MPRINT(EM_GETTRAINPATH):   tooltype="ASSESS";
183734     FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
183735     PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
183736     PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
183737     accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
183738     output;
MPRINT(EM_GETTRAINPATH):   output;
183739     run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("MdlComp"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = MdlComp";
MPRINT(EM_REPORT_NODE):   put "Node label = Model Comparison";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => GrfExpl => Part => Repl => Trans => BINNING =>
Neural2 => MdlComp";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\MdlComp\EMNOTES.txt"
encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
183740     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
183741     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
183742     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
183742   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
183742   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
183743     Name = 'NumberOfReportedLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberOfReportedLevels';
183744     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
183745     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183746     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183747     Name = 'NormalizeReportingVariables';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NormalizeReportingVariables';
183748     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183749     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183750     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183751     Name = 'DecileBin';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DecileBin';
183752     Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
183753     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183754     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183755     Name = 'LiftEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LiftEpsilon';
183756     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
183757     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183758     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183759     Name = 'ProfitEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ProfitEpsilon';
183760     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
183761     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183762     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183763     Name = 'RoiEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RoiEpsilon';
183764     Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
183765     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183766     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183767     Name = 'ScoreDistBin';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ScoreDistBin';
183768     Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
183769     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183770     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183771     Name = 'RocChart';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RocChart';
183772     Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
183773     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183774     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183775     Name = 'RocEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RocEpsilon';
183776     Value = "%nrbquote(0.01)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.01";
183777     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183778     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183779     Name = 'AssessAllTargetLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AssessAllTargetLevels';
183780     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183781     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183782     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183783     Name = 'SelectionData';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionData';
183784     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183785     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183786     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183787     Name = 'HPCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HPCriteria';
183788     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183789     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183790     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183791     Name = 'SelectionTable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionTable';
183792     Value = "%nrbquote(TRAIN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRAIN";
183793     Default = "%nrbquote(TABLE)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "TABLE";
183794     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183795     Name = 'SelectionCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionCriteria';
183796     Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
183797     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183798     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183799     Name = 'SelectionDepth';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionDepth';
183800     Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
183801     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183802     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183803     Name = 'NumberofBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberofBins';
183804     Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
183805     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183806     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183807     Name = 'RecomputeAssess';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RecomputeAssess';
183808     Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
183809     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183810     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183811     Name = 'TargetName';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetName';
183812     Value = "%nrbquote(bad)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "bad";
183813     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183814     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183815     Name = 'ModelId';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelId';
183816     Value = "%nrbquote(Neural2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Neural2";
183817     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183818     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183819     Name = 'ModelDescription';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelDescription';
183820     Value = "%nrbquote(Neural Network (2))";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Neural Network (2)";
183821     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183822     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183823     Name = 'ModelCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelCriteria';
183824     Value = "%nrbquote(Valid: Misclassification Rate)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Valid: Misclassification Rate";
183825     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183826     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183827     Name = 'StatisticUsed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'StatisticUsed';
183828     Value = "%nrbquote(_VMISC_)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "_VMISC_";
183829     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183830     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183831     Name = 'TargetLabel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetLabel';
183832     Value = "%nrbquote(Default or seriously delinquent)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Default or seriously delinquent";
183833     Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
183834     output;
MPRINT(EM_REPORT_PROPERTIES):   output;
183835     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
183836     proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
183837     by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
183838     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 23 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183839     data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
183840     length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
183841     label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
183841   ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
183842     Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
183843     Value = "ModelCompare";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ModelCompare";
183844     Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
183845     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
183846     data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
183847     set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
183848     run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 23 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 8 and _n_ le 16 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 16 and _n_ le 24 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 24 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 8 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 8 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 8 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.MdlComp_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.MdlComp_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.MdlComp_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "MdlComp" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
      WHERE UPCASE(creator)='MdlComp';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey18
MPRINT(EM_REPORT_NODE):   from EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA FITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data _null_ ;
MPRINT(EM_REPORT_DATA):   set EMWS1.MdlComp_EMOUTFIT (obs=2) end=eof ;
MPRINT(EM_REPORT_DATA):   if eof then do ;
MPRINT(EM_REPORT_DATA):   call symput("_misc_" , strip(put(_misc_,best.))) ;
MPRINT(EM_REPORT_DATA):   call symput("_vmisc_" , strip(put(_vmisc_,best.))) ;
MPRINT(EM_REPORT_DATA):   call symput("_aur_" , strip(put(_aur_, best.)));
MPRINT(EM_REPORT_DATA):   call symput("_gini_" , strip(put(_gini_, best.)));
MPRINT(EM_REPORT_DATA):   end;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Fit Statistics Table";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Fit Statistics Table";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.MdlComp_EMOUTFIT(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   id USE PARENT MODEL MODELDESCRIPTION TARGET TARGETLABEL _CRITERION_ ;
MPRINT(EM_REPORT_DATA):   var _ASE_ _MISC_ KS _VASE_ _VMISC_ VKS ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = DATA COMPAREFIT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = LATTICE CLASSIFICATION
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct MODELDESCRIPTION) into :numx from
EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='bad' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   select count(distinct DATAROLE) into :numy from
EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='bad' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_LATTICE):   title3 "Classification Chart";
MPRINT(EM_REPORT_LATTICE):   title4 "TARGET='bad' and _TYPE_='PREDICTION'";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel
data=EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='bad' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   panelby DATAROLE MODELDESCRIPTION / columns=3 rows=4
uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   vbar FROM / response=PERCENT group=CORRECTTEXT ;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin ;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid ;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.04 seconds
      cpu time            0.29 seconds
 
NOTE: There were 48 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
      WHERE (TARGET='bad') and (_TYPE_='PREDICTION');
 
MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 15)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = LATTICE ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.MdlComp_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 240 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 240 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 38 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 38 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sql noprint;
MPRINT(EM_REPORT_EMRANK):   select count(distinct datarole) into :ndataroles from _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   select distinct datarole into :drole1-:
MPRINT(LEFT):  drole2
MPRINT(EM_REPORT_EMRANK):   from _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat(where=(datarole eq "TRAIN")) out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by model decile;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 120 observations read from the data set WORK._TMP_DAT.
      WHERE datarole='TRAIN';
NOTE: The data set WORK._TMP_EMRP has 120 observations and 38 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_EMRANK):   title3 "Multiple Model Assessment Scores where DataRole=TRAIN";
MPRINT(EM_REPORT_EMRANK):   title4 "TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgscatter data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   plot (GAIN LIFTC CAPC _MEANP_ ) * decile / group=model join=()
markerattrs=(size=0) grid ;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGSCATTER used (Total process time):
      real time           0.46 seconds
      cpu time            0.17 seconds
 
NOTE: There were 120 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
15 The SAS System
 
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_EMRANK):   title4;
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat(where=(datarole eq "VALIDATE"))
out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by model decile;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 120 observations read from the data set WORK._TMP_DAT.
      WHERE datarole='VALIDATE';
NOTE: The data set WORK._TMP_EMRP has 120 observations and 38 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_EMRANK):   title3 "Multiple Model Assessment Scores where DataRole=VALIDATE";
MPRINT(EM_REPORT_EMRANK):   title4 "TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgscatter data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   plot (GAIN LIFTC CAPC _MEANP_ ) * decile / group=model join=()
markerattrs=(size=0) grid ;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGSCATTER used (Total process time):
      real time           0.40 seconds
      cpu time            0.14 seconds
 
NOTE: There were 120 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_EMRANK):   title4;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 16)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSROC
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct DATAROLE) into :numx from
EMWS1.MdlComp_EMROC(where=(TARGET='bad' and EVENT='1'));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   proc sort data=EMWS1.MdlComp_EMROC(where=(TARGET='bad' and
EVENT='1')) out=_tmp_pdl;
MPRINT(EM_REPORT_LATTICE):   by DATAROLE ;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: There were 1196 observations read from the data set EMWS1.MDLCOMP_EMROC.
      WHERE (TARGET='bad') and (EVENT='1');
NOTE: The data set WORK._TMP_PDL has 1196 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_LATTICE):   title3 "ROC Chart";
MPRINT(EM_REPORT_LATTICE):   title4 "TARGET='bad' and EVENT='1'";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel data=_tmp_pdl;
MPRINT(EM_REPORT_LATTICE):   panelby DATAROLE / uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   series x=ONEMINUSSPECIFICITY y=SENSITIVITY / group=MODELDESCRIPTION
;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.92 seconds
      cpu time            0.29 seconds
 
NOTE: There were 1196 observations read from the data set WORK._TMP_PDL.
 
MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   data _NULL_ ;
MPRINT(EM_REPORT_CREATE):   file print;
MPRINT(EM_REPORT_CREATE):   put "End of Report" ;
MPRINT(EM_REPORT_CREATE):   run;
 
NOTE: 1 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_CREATE):   title1;
MPRINT(EM_REPORT_CREATE):   title2;
MPRINT(EM_REPORT_CREATE):   title3 ;
MPRINT(EM_REPORT_CREATE):   ods graphics / reset=height;
MPRINT(EM_REPORT_CREATE):   ods listing;
MPRINT(EM_REPORT_CREATE):   ods PDF close;
NOTE: ODS PDF printed 52 pages to
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pdf
      .
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT_RESULTS):   data _null_ ;
MPRINT(EM_REPORT_RESULTS):   call symput('report_date', strip(put(date(), NLDATE.)));
MPRINT(EM_REPORT_RESULTS):   call symput('report_time', strip(put(datetime(), NLTIME.)));
MPRINT(EM_REPORT_RESULTS):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_RESULTS):   data _null_;
MPRINT(EM_REPORT_RESULTS):   file print ;
MPRINT(EM_REPORT_RESULTS):   put "User       = bteric01" ;
MPRINT(EM_REPORT_RESULTS):   put "Date       = 14:14:04  November 05" ;
MPRINT(EM_REPORT_RESULTS):   put "Project    = Project_3 " ;
MPRINT(EM_REPORT_RESULTS):   put "Diagram    = Diagram_3" / ;
MPRINT(EM_REPORT_RESULTS):   put "Start Node = Report";
MPRINT(EM_REPORT_RESULTS):   put "Node label = Model Comparison" ;
MPRINT(EM_REPORT_RESULTS):   put "Nodes      = PATH" ;
MPRINT(EM_REPORT_RESULTS):   put "Showall    = N" / ;
MPRINT(EM_REPORT_RESULTS):   put "Format     = PDF" ;
MPRINT(EM_REPORT_RESULTS):   put "Graphics   = GIF" ;
MPRINT(EM_REPORT_RESULTS):   put "Style      = LISTING" / ;
MPRINT(EM_REPORT_RESULTS):   run ;
 
NOTE: 11 lines were written to file PRINT.
NOTE: The DATA step printed page 93.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_RESULTS):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "REPORT";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "FILEVIEWER";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05107703201988;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_RESULTS):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
183849     *------------------------------------------------------------*;
183850     * End TRAIN: Report;
183851     *------------------------------------------------------------*;
183852
 
183853     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
183854     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
183855     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
183856     ;
MPRINT(EM_DIAGRAM):   ;
183857     ;
MPRINT(EM_DIAGRAM):   ;
183858     ;
MPRINT(EM_DIAGRAM):   ;
183859     ;
MPRINT(EM_DIAGRAM):   ;
183860     quit;
MPRINT(EM_DIAGRAM):   quit;
183861     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
183862     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
183863     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
183864     /*; *"; *'; */
183865     ;
MPRINT(EM_DIAGRAM):   ;
183866     run;
MPRINT(EM_DIAGRAM):   run;
183867     quit;
MPRINT(EM_DIAGRAM):   quit;
183868     /* Reset EM Options */
183869     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
183870     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
183871     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
183872     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
183873     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
183874     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:14:06" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 05, 2015
Time:                14:14:06
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0H1JX80 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0H1JX80 new;
MPRINT(EM_DIAGRAM):   run;
183976     %let EMEXCEPTIONSTRING=;
183977     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
183978     * SCORE: Report;
MPRINT(EM_DIAGRAM):   * SCORE: Report;
183979     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
183980     %let EM_ACTION = SCORE;
183981     %let syscc = 0;
183982     %macro main;
183983
183984       filename temp catalog 'sashelp.emutil.reporter_macros.source';
183985       %include temp;
183986       filename temp;
183987
183988       %setProperties;
183989
183990       %if %upcase(&EM_ACTION) = CREATE %then %do;
183991         filename temp catalog 'sashelp.emutil.reporter_create.source';
183992         %include temp;
183993         filename temp;
183994
183995         %create;
183996       %end;
183997
183998        %else
183999        %if %upcase(&EM_ACTION) = TRAIN %then %do;
184000
184001            filename temp catalog 'sashelp.emutil.reporter_train.source';
184002            %include temp;
184003            filename temp;
184004            %train;
184005        %end;
184006
184007        %doendm:
184008     %mend main;
184009
184010     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
184013    +%macro SetProperties;
184015    +     /* reporting options */
184016    +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
184017    +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
184018    +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
184019    +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
184021    +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
184022    +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
184023    +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
184024    +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
184025    +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
184026    +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
184027    +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
184029    +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
184031    +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
184032    +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
184033    +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
184034    +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
184036    +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
184037     *------------------------------------------------------------*;
184038     * End SCORE: Report;
184039     *------------------------------------------------------------*;
184040
 
184041     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
184042     * Report: Scoring DATA data;
MPRINT(EM_DIAGRAM):   * Report: Scoring DATA data;
184043     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
184044     data EMWS1.Report_TRAIN
184045     / view=EMWS1.Report_TRAIN
184046     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Report_TRAIN / view=EMWS1.Report_TRAIN ;
184047     set EMWS1.MdlComp_TRAIN
184048     ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_TRAIN ;
184049     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.REPORT_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
184050     quit;
 
184051     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
184052     * Report: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   * Report: Scoring VALIDATE data;
184053     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
184054     data EMWS1.Report_VALIDATE
184055     / view=EMWS1.Report_VALIDATE
184056     ;
MPRINT(EM_DIAGRAM):   data EMWS1.Report_VALIDATE / view=EMWS1.Report_VALIDATE ;
184057     set EMWS1.MdlComp_VALIDATE
184058     ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_VALIDATE ;
184059     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.REPORT_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.25 seconds
      cpu time            0.24 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
184060     quit;
 
184062     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
184063     * Report: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Report: Computing metadata for TRAIN data;
184064     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REPORT_TRAIN.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.26 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Report_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Report_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Report_TRAIN out=WORK.M0_X9J1R noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_X9J1R;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_X9J1R(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0_X9J1R;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0_X9J1R;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0N7WNDZ NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0N7WNDZ;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0N7WNDZ;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3OXBMLF(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0N7WNDZ;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0N7WNDZ;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0N7WNDZ;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0N7WNDZ;
MPRINT(EMADVISECOLUMNS):   set WORK.M0N7WNDZ;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.MdlComp_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Report_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Report";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.REPORT_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.23 seconds
 
NOTE: View EMWS1.REPORT_VALIDATE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:14:08" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 05, 2015
Time:                14:14:08
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O039ZKTM "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O039ZKTM new;
MPRINT(EM_DIAGRAM):   run;
184407     %let EMEXCEPTIONSTRING=;
184408     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
184409     * REPORT: Report;
MPRINT(EM_DIAGRAM):   * REPORT: Report;
184410     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
184411     %let EM_ACTION = REPORT;
184412     %let syscc = 0;
184413     %macro main;
184414
184415       filename temp catalog 'sashelp.emutil.reporter_macros.source';
184416       %include temp;
184417       filename temp;
184418
184419       %setProperties;
184420
184421       %if %upcase(&EM_ACTION) = CREATE %then %do;
184422         filename temp catalog 'sashelp.emutil.reporter_create.source';
184423         %include temp;
184424         filename temp;
184425
184426         %create;
184427       %end;
184428
184429        %else
184430        %if %upcase(&EM_ACTION) = TRAIN %then %do;
184431
184432            filename temp catalog 'sashelp.emutil.reporter_train.source';
184433            %include temp;
184434            filename temp;
184435            %train;
184436        %end;
184437
184438        %doendm:
184439     %mend main;
184440
184441     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
184444    +%macro SetProperties;
184446    +     /* reporting options */
184447    +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
184448    +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
184449    +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
184450    +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
184452    +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
184453    +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
184454    +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
184455    +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
184456    +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
184457    +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
184458    +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
184460    +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
184462    +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
184463    +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
184464    +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
184465    +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
184467    +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
184468     *------------------------------------------------------------*;
184469     * End REPORT: Report;
184470     *------------------------------------------------------------*;
184471
 
184472     /* Reset EM Options */
184473     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
184474     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
184475     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
