MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05, 
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:10:18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 05, 2015
Time:                14:10:18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O28_2G1B 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\EMSCORE.out"
 encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O28_2G1B new;
MPRINT(EM_DIAGRAM):   run;
80844      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
80845      set EMWS1.Neural4_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_OUTKEY;
80846      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
80847      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set EMWS1.NEURAL4_OUTKEY.
NOTE: The data set WORK.OUTKEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

80848      filename emflow
80848    ! "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\E
80848    ! MFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\EMFLOWSCORE.
sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
80849      *------------------------------------------------------------*;
80850      * Neural4: Scoring DATA data;
80851      *------------------------------------------------------------*;
80852      data EMWS1.Neural4_TRAIN
80853      / view=EMWS1.Neural4_TRAIN
80854      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_TRAIN / view=EMWS1.Neural4_TRAIN ;
80855      set EMWS1.Repl_TRAIN
80856      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_TRAIN ;
80857      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\EMFLOWS
      CORE.sas.
80858     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
80859     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
80860     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
80861     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
80862     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
80863     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
80864     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
80865     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
80866     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
80867     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
80868     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
80869     +LENGTH _WARN_ $4
80870     +      F_bad  $ 12
80871     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_bad $ 12 ;
80872     +      label S_REP_clage = 'Standard: REP_clage' ;
MPRINT(EM_DIAGRAM):   label S_REP_clage = 'Standard: REP_clage' ;
80873     +
80874     +      label S_REP_clno = 'Standard: REP_clno' ;
MPRINT(EM_DIAGRAM):   label S_REP_clno = 'Standard: REP_clno' ;
80875     +
80876     +      label S_REP_debtinc = 'Standard: REP_debtinc' ;
MPRINT(EM_DIAGRAM):   label S_REP_debtinc = 'Standard: REP_debtinc' ;
80877     +
80878     +      label S_REP_delinq = 'Standard: REP_delinq' ;
MPRINT(EM_DIAGRAM):   label S_REP_delinq = 'Standard: REP_delinq' ;
80879     +
80880     +      label S_REP_derog = 'Standard: REP_derog' ;
MPRINT(EM_DIAGRAM):   label S_REP_derog = 'Standard: REP_derog' ;
80881     +
80882     +      label S_REP_loan = 'Standard: REP_loan' ;
MPRINT(EM_DIAGRAM):   label S_REP_loan = 'Standard: REP_loan' ;
80883     +
80884     +      label S_REP_mortdue = 'Standard: REP_mortdue' ;
MPRINT(EM_DIAGRAM):   label S_REP_mortdue = 'Standard: REP_mortdue' ;
80885     +
80886     +      label S_REP_ninq = 'Standard: REP_ninq' ;
MPRINT(EM_DIAGRAM):   label S_REP_ninq = 'Standard: REP_ninq' ;
80887     +
80888     +      label S_REP_value = 'Standard: REP_value' ;
MPRINT(EM_DIAGRAM):   label S_REP_value = 'Standard: REP_value' ;
80889     +
80890     +      label S_REP_yoj = 'Standard: REP_yoj' ;
MPRINT(EM_DIAGRAM):   label S_REP_yoj = 'Standard: REP_yoj' ;
80891     +
80892     +      label jobMgr = 'Dummy: job=Mgr' ;
MPRINT(EM_DIAGRAM):   label jobMgr = 'Dummy: job=Mgr' ;
80893     +
80894     +      label jobOffice = 'Dummy: job=Office' ;
MPRINT(EM_DIAGRAM):   label jobOffice = 'Dummy: job=Office' ;
80895     +
80896     +      label jobOther = 'Dummy: job=Other' ;
MPRINT(EM_DIAGRAM):   label jobOther = 'Dummy: job=Other' ;
80897     +
80898     +      label jobProfEx = 'Dummy: job=ProfEx' ;
MPRINT(EM_DIAGRAM):   label jobProfEx = 'Dummy: job=ProfEx' ;
80899     +
80900     +      label jobSales = 'Dummy: job=Sales' ;
MPRINT(EM_DIAGRAM):   label jobSales = 'Dummy: job=Sales' ;
80901     +
80902     +      label reasonDebtCon = 'Dummy: reason=DebtCon' ;
MPRINT(EM_DIAGRAM):   label reasonDebtCon = 'Dummy: reason=DebtCon' ;
80903     +
80904     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
80905     +
80906     +      label I_bad = 'Into: bad' ;
MPRINT(EM_DIAGRAM):   label I_bad = 'Into: bad' ;
80907     +
80908     +      label F_bad = 'From: bad' ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
80909     +
80910     +      label U_bad = 'Unnormalized Into: bad' ;
MPRINT(EM_DIAGRAM):   label U_bad = 'Unnormalized Into: bad' ;
80911     +
80912     +      label P_bad1 = 'Predicted: bad=1' ;
MPRINT(EM_DIAGRAM):   label P_bad1 = 'Predicted: bad=1' ;
80913     +
80914     +      label R_bad1 = 'Residual: bad=1' ;
MPRINT(EM_DIAGRAM):   label R_bad1 = 'Residual: bad=1' ;
80915     +
80916     +      label P_bad0 = 'Predicted: bad=0' ;
MPRINT(EM_DIAGRAM):   label P_bad0 = 'Predicted: bad=0' ;
80917     +
80918     +      label R_bad0 = 'Residual: bad=0' ;
MPRINT(EM_DIAGRAM):   label R_bad0 = 'Residual: bad=0' ;
80919     +
80920     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
80921     +
80922     +*** Generate dummy variables for job ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for job ;
80923     +drop jobMgr jobOffice jobOther jobProfEx jobSales ;
MPRINT(EM_DIAGRAM):   drop jobMgr jobOffice jobOther jobProfEx jobSales ;
80924     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
80925     +jobMgr = 0;
MPRINT(EM_DIAGRAM):   jobMgr = 0;
80926     +jobOffice = 0;
MPRINT(EM_DIAGRAM):   jobOffice = 0;
80927     +jobOther = 0;
MPRINT(EM_DIAGRAM):   jobOther = 0;
80928     +jobProfEx = 0;
MPRINT(EM_DIAGRAM):   jobProfEx = 0;
80929     +jobSales = 0;
MPRINT(EM_DIAGRAM):   jobSales = 0;
80930     +if missing( job ) then do;
MPRINT(EM_DIAGRAM):   if missing( job ) then do;
80931     +   jobMgr = .;
MPRINT(EM_DIAGRAM):   jobMgr = .;
80932     +   jobOffice = .;
MPRINT(EM_DIAGRAM):   jobOffice = .;
80933     +   jobOther = .;
MPRINT(EM_DIAGRAM):   jobOther = .;
80934     +   jobProfEx = .;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
80935     +   jobSales = .;
MPRINT(EM_DIAGRAM):   jobSales = .;
80936     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
80937     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
80938     +end;
MPRINT(EM_DIAGRAM):   end;
80939     +else do;
MPRINT(EM_DIAGRAM):   else do;
80940     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
80941     +   %DMNORMCP( job , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(job,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
80942     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
80943     +   if _dm6 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OTHER' then do;
80944     +      if _dm6 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OFFICE' then do;
80945     +         if _dm6 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'MGR' then do;
80946     +            jobMgr = 1;
MPRINT(EM_DIAGRAM):   jobMgr = 1;
80947     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
80948     +         end;
MPRINT(EM_DIAGRAM):   end;
80949     +         else do;
MPRINT(EM_DIAGRAM):   else do;
80950     +            if _dm6 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OFFICE' then do;
80951     +               jobOffice = 1;
MPRINT(EM_DIAGRAM):   jobOffice = 1;
80952     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
80953     +            end;
MPRINT(EM_DIAGRAM):   end;
80954     +         end;
MPRINT(EM_DIAGRAM):   end;
80955     +      end;
MPRINT(EM_DIAGRAM):   end;
80956     +      else do;
MPRINT(EM_DIAGRAM):   else do;
80957     +         if _dm6 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OTHER' then do;
80958     +            jobOther = 1;
MPRINT(EM_DIAGRAM):   jobOther = 1;
80959     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
80960     +         end;
MPRINT(EM_DIAGRAM):   end;
80961     +      end;
MPRINT(EM_DIAGRAM):   end;
80962     +   end;
MPRINT(EM_DIAGRAM):   end;
80963     +   else do;
MPRINT(EM_DIAGRAM):   else do;
80964     +      if _dm6 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'SALES' then do;
80965     +         if _dm6 = 'PROFEX'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'PROFEX' then do;
80966     +            jobProfEx = 1;
MPRINT(EM_DIAGRAM):   jobProfEx = 1;
80967     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
80968     +         end;
MPRINT(EM_DIAGRAM):   end;
80969     +         else do;
MPRINT(EM_DIAGRAM):   else do;
80970     +            if _dm6 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SALES' then do;
80971     +               jobSales = 1;
MPRINT(EM_DIAGRAM):   jobSales = 1;
80972     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
80973     +            end;
MPRINT(EM_DIAGRAM):   end;
80974     +         end;
MPRINT(EM_DIAGRAM):   end;
80975     +      end;
MPRINT(EM_DIAGRAM):   end;
80976     +      else do;
MPRINT(EM_DIAGRAM):   else do;
80977     +         if _dm6 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SELF' then do;
80978     +            jobMgr = -1;
MPRINT(EM_DIAGRAM):   jobMgr = -1;
80979     +            jobOffice = -1;
MPRINT(EM_DIAGRAM):   jobOffice = -1;
80980     +            jobOther = -1;
MPRINT(EM_DIAGRAM):   jobOther = -1;
80981     +            jobProfEx = -1;
MPRINT(EM_DIAGRAM):   jobProfEx = -1;
80982     +            jobSales = -1;
MPRINT(EM_DIAGRAM):   jobSales = -1;
80983     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
80984     +         end;
MPRINT(EM_DIAGRAM):   end;
80985     +      end;
MPRINT(EM_DIAGRAM):   end;
80986     +   end;
MPRINT(EM_DIAGRAM):   end;
80987     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
80988     +      jobMgr = .;
MPRINT(EM_DIAGRAM):   jobMgr = .;
80989     +      jobOffice = .;
MPRINT(EM_DIAGRAM):   jobOffice = .;
80990     +      jobOther = .;
MPRINT(EM_DIAGRAM):   jobOther = .;
80991     +      jobProfEx = .;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
80992     +      jobSales = .;
MPRINT(EM_DIAGRAM):   jobSales = .;
80993     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
80994     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
80995     +   end;
MPRINT(EM_DIAGRAM):   end;
80996     +end;
MPRINT(EM_DIAGRAM):   end;
80997     +
80998     +*** Generate dummy variables for reason ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for reason ;
80999     +drop reasonDebtCon ;
MPRINT(EM_DIAGRAM):   drop reasonDebtCon ;
81000     +if missing( reason ) then do;
MPRINT(EM_DIAGRAM):   if missing( reason ) then do;
81001     +   reasonDebtCon = .;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
81002     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
81003     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81004     +end;
MPRINT(EM_DIAGRAM):   end;
81005     +else do;
MPRINT(EM_DIAGRAM):   else do;
81006     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
81007     +   %DMNORMCP( reason , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(reason,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
81008     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
81009     +      reasonDebtCon = 1;
MPRINT(EM_DIAGRAM):   reasonDebtCon = 1;
81010     +   end;
MPRINT(EM_DIAGRAM):   end;
81011     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
81012     +      reasonDebtCon = -1;
MPRINT(EM_DIAGRAM):   reasonDebtCon = -1;
81013     +   end;
MPRINT(EM_DIAGRAM):   end;
81014     +   else do;
MPRINT(EM_DIAGRAM):   else do;
81015     +      reasonDebtCon = .;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
81016     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
81017     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81018     +   end;
MPRINT(EM_DIAGRAM):   end;
81019     +end;
MPRINT(EM_DIAGRAM):   end;
81020     +
81021     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81022     +*** Checking missing input Interval
81023     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
81024     +
81025     +IF NMISS(
81026     +   REP_clage ,
81027     +   REP_clno ,
81028     +   REP_debtinc ,
81029     +   REP_delinq ,
81030     +   REP_derog ,
81031     +   REP_loan ,
81032     +   REP_mortdue ,
81033     +   REP_ninq ,
81034     +   REP_value ,
81035     +   REP_yoj   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( REP_clage , REP_clno , REP_debtinc , REP_delinq , REP_derog , 
REP_loan , REP_mortdue , REP_ninq , REP_value , REP_yoj ) THEN DO;
81036     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
81037     +
81038     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81039     +END;
MPRINT(EM_DIAGRAM):   END;
81040     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81041     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
81042     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81043     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
81044     +   S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage ;
MPRINT(EM_DIAGRAM):   S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
81045     +   S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
81046     +   S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 * REP_debtinc
81047     +         ;
MPRINT(EM_DIAGRAM):   S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
81048     +   S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 * REP_delinq ;
MPRINT(EM_DIAGRAM):   S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
81049     +   S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog ;
MPRINT(EM_DIAGRAM):   S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
81050     +   S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
81051     +   S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 * REP_mortdue
81052     +         ;
MPRINT(EM_DIAGRAM):   S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
81053     +   S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
81054     +   S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value ;
MPRINT(EM_DIAGRAM):   S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
81055     +   S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
81056     +END;
MPRINT(EM_DIAGRAM):   END;
81057     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
81058     +   IF MISSING( REP_clage ) THEN S_REP_clage  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clage ) THEN S_REP_clage = . ;
81059     +   ELSE S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage
81060     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
81061     +   IF MISSING( REP_clno ) THEN S_REP_clno  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clno ) THEN S_REP_clno = . ;
81062     +   ELSE S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
81063     +   IF MISSING( REP_debtinc ) THEN S_REP_debtinc  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_debtinc ) THEN S_REP_debtinc = . ;
81064     +   ELSE S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 *
81065     +        REP_debtinc ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
81066     +   IF MISSING( REP_delinq ) THEN S_REP_delinq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_delinq ) THEN S_REP_delinq = . ;
81067     +   ELSE S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 *
81068     +        REP_delinq ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
81069     +   IF MISSING( REP_derog ) THEN S_REP_derog  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_derog ) THEN S_REP_derog = . ;
81070     +   ELSE S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog
81071     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
81072     +   IF MISSING( REP_loan ) THEN S_REP_loan  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_loan ) THEN S_REP_loan = . ;
81073     +   ELSE S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
81074     +   IF MISSING( REP_mortdue ) THEN S_REP_mortdue  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_mortdue ) THEN S_REP_mortdue = . ;
81075     +   ELSE S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 *
81076     +        REP_mortdue ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
81077     +   IF MISSING( REP_ninq ) THEN S_REP_ninq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_ninq ) THEN S_REP_ninq = . ;
81078     +   ELSE S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
81079     +   IF MISSING( REP_value ) THEN S_REP_value  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_value ) THEN S_REP_value = . ;
81080     +   ELSE S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value
81081     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
81082     +   IF MISSING( REP_yoj ) THEN S_REP_yoj  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_yoj ) THEN S_REP_yoj = . ;
81083     +   ELSE S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
81084     +END;
MPRINT(EM_DIAGRAM):   END;
81085     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81086     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
81087     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81088     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81089     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
81090     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81091     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
81092     +   H11  =      0.5131908092698 * S_REP_clage  +    -0.33974756462434 *
81093     +        S_REP_clno  +    -1.84826332972638 * S_REP_debtinc
81094     +          +    -0.71894464986145 * S_REP_delinq  +    -0.21448745477968 *
81095     +        S_REP_derog  +     0.19091660069461 * S_REP_loan
81096     +          +     0.50208666423614 * S_REP_mortdue  +    -0.32535925288246 *
81097     +        S_REP_ninq  +    -0.59000285203392 * S_REP_value
81098     +          +    -0.23942462411482 * S_REP_yoj ;
MPRINT(EM_DIAGRAM):   H11 = 0.5131908092698 * S_REP_clage + -0.33974756462434 * S_REP_clno + 
-1.84826332972638 * S_REP_debtinc + -0.71894464986145 * S_REP_delinq + -0.21448745477968 * 
S_REP_derog + 0.19091660069461 * S_REP_loan + 0.50208666423614 * S_REP_mortdue + 
-0.32535925288246 * S_REP_ninq + -0.59000285203392 * S_REP_value + -0.23942462411482 * 
S_REP_yoj ;
81099     +   H11  = H11  +     -0.0612734207067 * jobMgr  +     1.95081480490553 *
81100     +        jobOffice  +     0.18802232089434 * jobOther
81101     +          +    -0.00052144666791 * jobProfEx  +    -1.47852896530515 *
81102     +        jobSales  +    -0.47538341232871 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.0612734207067 * jobMgr + 1.95081480490553 * jobOffice + 
0.18802232089434 * jobOther + -0.00052144666791 * jobProfEx + -1.47852896530515 * jobSales + 
-0.47538341232871 * reasonDebtCon ;
81103     +   H11  =     3.74030724693985 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 3.74030724693985 + H11 ;
81104     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
81105     +END;
MPRINT(EM_DIAGRAM):   END;
81106     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
81107     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
81108     +END;
MPRINT(EM_DIAGRAM):   END;
81109     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81110     +*** Writing the Node bad ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bad ;
81111     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81112     +
81113     +*** Generate dummy variables for bad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for bad ;
81114     +drop bad1 bad0 ;
MPRINT(EM_DIAGRAM):   drop bad1 bad0 ;
81115     +label F_bad = 'From: bad' ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
81116     +length F_bad $ 12;
MPRINT(EM_DIAGRAM):   length F_bad $ 12;
81117     +F_bad = put( bad , BEST12. );
MPRINT(EM_DIAGRAM):   F_bad = put( bad , BEST12. );
81118     +%DMNORMIP( F_bad )
MPRINT(DMNORMIP):   call dmnorm(F_bad,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
81119     +if missing( bad ) then do;
MPRINT(EM_DIAGRAM):   if missing( bad ) then do;
81120     +   bad1 = .;
MPRINT(EM_DIAGRAM):   bad1 = .;
81121     +   bad0 = .;
MPRINT(EM_DIAGRAM):   bad0 = .;
81122     +end;
MPRINT(EM_DIAGRAM):   end;
81123     +else do;
MPRINT(EM_DIAGRAM):   else do;
81124     +   if F_bad = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_bad = '0' then do;
81125     +      bad1 = 0;
MPRINT(EM_DIAGRAM):   bad1 = 0;
81126     +      bad0 = 1;
MPRINT(EM_DIAGRAM):   bad0 = 1;
81127     +   end;
MPRINT(EM_DIAGRAM):   end;
81128     +   else if F_bad = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_bad = '1' then do;
81129     +      bad1 = 1;
MPRINT(EM_DIAGRAM):   bad1 = 1;
81130     +      bad0 = 0;
MPRINT(EM_DIAGRAM):   bad0 = 0;
81131     +   end;
MPRINT(EM_DIAGRAM):   end;
81132     +   else do;
MPRINT(EM_DIAGRAM):   else do;
81133     +      bad1 = .;
MPRINT(EM_DIAGRAM):   bad1 = .;
81134     +      bad0 = .;
MPRINT(EM_DIAGRAM):   bad0 = .;
81135     +   end;
MPRINT(EM_DIAGRAM):   end;
81136     +end;
MPRINT(EM_DIAGRAM):   end;
81137     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
81138     +   P_bad1  =    -5.99760759404159 * H11 ;
MPRINT(EM_DIAGRAM):   P_bad1 = -5.99760759404159 * H11 ;
81139     +   P_bad1  =     2.97558722742604 + P_bad1 ;
MPRINT(EM_DIAGRAM):   P_bad1 = 2.97558722742604 + P_bad1 ;
81140     +   P_bad0  = 0;
MPRINT(EM_DIAGRAM):   P_bad0 = 0;
81141     +   _MAX_ = MAX (P_bad1 , P_bad0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_bad1 , P_bad0 );
81142     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
81143     +   P_bad1  = EXP(P_bad1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_bad1 = EXP(P_bad1 - _MAX_);
81144     +   _SUM_ = _SUM_ + P_bad1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad1 ;
81145     +   P_bad0  = EXP(P_bad0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_bad0 = EXP(P_bad0 - _MAX_);
81146     +   _SUM_ = _SUM_ + P_bad0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad0 ;
81147     +   P_bad1  = P_bad1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad1 = P_bad1 / _SUM_;
81148     +   P_bad0  = P_bad0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad0 = P_bad0 / _SUM_;
81149     +END;
MPRINT(EM_DIAGRAM):   END;
81150     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
81151     +   P_bad1  = .;
MPRINT(EM_DIAGRAM):   P_bad1 = .;
81152     +   P_bad0  = .;
MPRINT(EM_DIAGRAM):   P_bad0 = .;
81153     +END;
MPRINT(EM_DIAGRAM):   END;
81154     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
81155     +   P_bad1  =     0.08693115519253;
MPRINT(EM_DIAGRAM):   P_bad1 = 0.08693115519253;
81156     +   P_bad0  =     0.91306884480746;
MPRINT(EM_DIAGRAM):   P_bad0 = 0.91306884480746;
81157     +END;
MPRINT(EM_DIAGRAM):   END;
81158     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
81159     +*** Writing the Residuals  of the Node bad ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node bad ;
81160     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
81161     +IF MISSING( bad1 ) THEN R_bad1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( bad1 ) THEN R_bad1 = . ;
81162     +ELSE R_bad1  = bad1  - P_bad1 ;
MPRINT(EM_DIAGRAM):   ELSE R_bad1 = bad1 - P_bad1 ;
81163     +IF MISSING( bad0 ) THEN R_bad0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( bad0 ) THEN R_bad0 = . ;
81164     +ELSE R_bad0  = bad0  - P_bad0 ;
MPRINT(EM_DIAGRAM):   ELSE R_bad0 = bad0 - P_bad0 ;
81165     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81166     +*** Writing the I_bad  AND U_bad ;
MPRINT(EM_DIAGRAM):   *** Writing the I_bad AND U_bad ;
81167     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81168     +_MAXP_ = P_bad1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad1 ;
81169     +I_bad  = "1           " ;
MPRINT(EM_DIAGRAM):   I_bad = "1           " ;
81170     +U_bad  =                    1;
MPRINT(EM_DIAGRAM):   U_bad = 1;
81171     +IF( _MAXP_ LT P_bad0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_bad0 ) THEN DO;
81172     +   _MAXP_ = P_bad0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad0 ;
81173     +   I_bad  = "0           " ;
MPRINT(EM_DIAGRAM):   I_bad = "0           " ;
81174     +   U_bad  =                    0;
MPRINT(EM_DIAGRAM):   U_bad = 0;
81175     +END;
MPRINT(EM_DIAGRAM):   END;
81176     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
81177     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
81178     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
81179     +drop
81180     +H11
81181     +;
MPRINT(EM_DIAGRAM):   drop H11 ;
81182     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
81183      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_DIAGRAM):   quit;
81184      quit;
81185      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
81186      filename emflow
81186    ! "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\E
81186    ! MFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\EMFLOWSCORE.
sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural4: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
81187      *------------------------------------------------------------*;
81188      * Neural4: Scoring VALIDATE data;
81189      *------------------------------------------------------------*;
81190      data EMWS1.Neural4_VALIDATE
81191      / view=EMWS1.Neural4_VALIDATE
81192      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_VALIDATE / view=EMWS1.Neural4_VALIDATE ;
81193      set EMWS1.Repl_VALIDATE
81194      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_VALIDATE ;
81195      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\EMFLOWS
      CORE.sas.
81196     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
81197     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
81198     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
81199     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
81200     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
81201     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
81202     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
81203     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
81204     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
81205     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
81206     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
81207     +LENGTH _WARN_ $4
81208     +      F_bad  $ 12
81209     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_bad $ 12 ;
81210     +      label S_REP_clage = 'Standard: REP_clage' ;
MPRINT(EM_DIAGRAM):   label S_REP_clage = 'Standard: REP_clage' ;
81211     +
81212     +      label S_REP_clno = 'Standard: REP_clno' ;
MPRINT(EM_DIAGRAM):   label S_REP_clno = 'Standard: REP_clno' ;
81213     +
81214     +      label S_REP_debtinc = 'Standard: REP_debtinc' ;
MPRINT(EM_DIAGRAM):   label S_REP_debtinc = 'Standard: REP_debtinc' ;
81215     +
81216     +      label S_REP_delinq = 'Standard: REP_delinq' ;
MPRINT(EM_DIAGRAM):   label S_REP_delinq = 'Standard: REP_delinq' ;
81217     +
81218     +      label S_REP_derog = 'Standard: REP_derog' ;
MPRINT(EM_DIAGRAM):   label S_REP_derog = 'Standard: REP_derog' ;
81219     +
81220     +      label S_REP_loan = 'Standard: REP_loan' ;
MPRINT(EM_DIAGRAM):   label S_REP_loan = 'Standard: REP_loan' ;
81221     +
81222     +      label S_REP_mortdue = 'Standard: REP_mortdue' ;
MPRINT(EM_DIAGRAM):   label S_REP_mortdue = 'Standard: REP_mortdue' ;
81223     +
81224     +      label S_REP_ninq = 'Standard: REP_ninq' ;
MPRINT(EM_DIAGRAM):   label S_REP_ninq = 'Standard: REP_ninq' ;
81225     +
81226     +      label S_REP_value = 'Standard: REP_value' ;
MPRINT(EM_DIAGRAM):   label S_REP_value = 'Standard: REP_value' ;
81227     +
81228     +      label S_REP_yoj = 'Standard: REP_yoj' ;
MPRINT(EM_DIAGRAM):   label S_REP_yoj = 'Standard: REP_yoj' ;
81229     +
81230     +      label jobMgr = 'Dummy: job=Mgr' ;
MPRINT(EM_DIAGRAM):   label jobMgr = 'Dummy: job=Mgr' ;
81231     +
81232     +      label jobOffice = 'Dummy: job=Office' ;
MPRINT(EM_DIAGRAM):   label jobOffice = 'Dummy: job=Office' ;
81233     +
81234     +      label jobOther = 'Dummy: job=Other' ;
MPRINT(EM_DIAGRAM):   label jobOther = 'Dummy: job=Other' ;
81235     +
81236     +      label jobProfEx = 'Dummy: job=ProfEx' ;
MPRINT(EM_DIAGRAM):   label jobProfEx = 'Dummy: job=ProfEx' ;
81237     +
81238     +      label jobSales = 'Dummy: job=Sales' ;
MPRINT(EM_DIAGRAM):   label jobSales = 'Dummy: job=Sales' ;
81239     +
81240     +      label reasonDebtCon = 'Dummy: reason=DebtCon' ;
MPRINT(EM_DIAGRAM):   label reasonDebtCon = 'Dummy: reason=DebtCon' ;
81241     +
81242     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
81243     +
81244     +      label I_bad = 'Into: bad' ;
MPRINT(EM_DIAGRAM):   label I_bad = 'Into: bad' ;
81245     +
81246     +      label F_bad = 'From: bad' ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
81247     +
81248     +      label U_bad = 'Unnormalized Into: bad' ;
MPRINT(EM_DIAGRAM):   label U_bad = 'Unnormalized Into: bad' ;
81249     +
81250     +      label P_bad1 = 'Predicted: bad=1' ;
MPRINT(EM_DIAGRAM):   label P_bad1 = 'Predicted: bad=1' ;
81251     +
81252     +      label R_bad1 = 'Residual: bad=1' ;
MPRINT(EM_DIAGRAM):   label R_bad1 = 'Residual: bad=1' ;
81253     +
81254     +      label P_bad0 = 'Predicted: bad=0' ;
MPRINT(EM_DIAGRAM):   label P_bad0 = 'Predicted: bad=0' ;
81255     +
81256     +      label R_bad0 = 'Residual: bad=0' ;
MPRINT(EM_DIAGRAM):   label R_bad0 = 'Residual: bad=0' ;
81257     +
81258     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
81259     +
81260     +*** Generate dummy variables for job ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for job ;
81261     +drop jobMgr jobOffice jobOther jobProfEx jobSales ;
MPRINT(EM_DIAGRAM):   drop jobMgr jobOffice jobOther jobProfEx jobSales ;
81262     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
81263     +jobMgr = 0;
MPRINT(EM_DIAGRAM):   jobMgr = 0;
81264     +jobOffice = 0;
MPRINT(EM_DIAGRAM):   jobOffice = 0;
81265     +jobOther = 0;
MPRINT(EM_DIAGRAM):   jobOther = 0;
81266     +jobProfEx = 0;
MPRINT(EM_DIAGRAM):   jobProfEx = 0;
81267     +jobSales = 0;
MPRINT(EM_DIAGRAM):   jobSales = 0;
81268     +if missing( job ) then do;
MPRINT(EM_DIAGRAM):   if missing( job ) then do;
81269     +   jobMgr = .;
MPRINT(EM_DIAGRAM):   jobMgr = .;
81270     +   jobOffice = .;
MPRINT(EM_DIAGRAM):   jobOffice = .;
81271     +   jobOther = .;
MPRINT(EM_DIAGRAM):   jobOther = .;
81272     +   jobProfEx = .;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
81273     +   jobSales = .;
MPRINT(EM_DIAGRAM):   jobSales = .;
81274     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
81275     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81276     +end;
MPRINT(EM_DIAGRAM):   end;
81277     +else do;
MPRINT(EM_DIAGRAM):   else do;
81278     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
81279     +   %DMNORMCP( job , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(job,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
81280     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
81281     +   if _dm6 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OTHER' then do;
81282     +      if _dm6 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OFFICE' then do;
81283     +         if _dm6 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'MGR' then do;
81284     +            jobMgr = 1;
MPRINT(EM_DIAGRAM):   jobMgr = 1;
81285     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
81286     +         end;
MPRINT(EM_DIAGRAM):   end;
81287     +         else do;
MPRINT(EM_DIAGRAM):   else do;
81288     +            if _dm6 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OFFICE' then do;
81289     +               jobOffice = 1;
MPRINT(EM_DIAGRAM):   jobOffice = 1;
81290     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
81291     +            end;
MPRINT(EM_DIAGRAM):   end;
81292     +         end;
MPRINT(EM_DIAGRAM):   end;
81293     +      end;
MPRINT(EM_DIAGRAM):   end;
81294     +      else do;
MPRINT(EM_DIAGRAM):   else do;
81295     +         if _dm6 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OTHER' then do;
81296     +            jobOther = 1;
MPRINT(EM_DIAGRAM):   jobOther = 1;
81297     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
81298     +         end;
MPRINT(EM_DIAGRAM):   end;
81299     +      end;
MPRINT(EM_DIAGRAM):   end;
81300     +   end;
MPRINT(EM_DIAGRAM):   end;
81301     +   else do;
MPRINT(EM_DIAGRAM):   else do;
81302     +      if _dm6 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'SALES' then do;
81303     +         if _dm6 = 'PROFEX'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'PROFEX' then do;
81304     +            jobProfEx = 1;
MPRINT(EM_DIAGRAM):   jobProfEx = 1;
81305     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
81306     +         end;
MPRINT(EM_DIAGRAM):   end;
81307     +         else do;
MPRINT(EM_DIAGRAM):   else do;
81308     +            if _dm6 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SALES' then do;
81309     +               jobSales = 1;
MPRINT(EM_DIAGRAM):   jobSales = 1;
81310     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
81311     +            end;
MPRINT(EM_DIAGRAM):   end;
81312     +         end;
MPRINT(EM_DIAGRAM):   end;
81313     +      end;
MPRINT(EM_DIAGRAM):   end;
81314     +      else do;
MPRINT(EM_DIAGRAM):   else do;
81315     +         if _dm6 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SELF' then do;
81316     +            jobMgr = -1;
MPRINT(EM_DIAGRAM):   jobMgr = -1;
81317     +            jobOffice = -1;
MPRINT(EM_DIAGRAM):   jobOffice = -1;
81318     +            jobOther = -1;
MPRINT(EM_DIAGRAM):   jobOther = -1;
81319     +            jobProfEx = -1;
MPRINT(EM_DIAGRAM):   jobProfEx = -1;
81320     +            jobSales = -1;
MPRINT(EM_DIAGRAM):   jobSales = -1;
81321     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
81322     +         end;
MPRINT(EM_DIAGRAM):   end;
81323     +      end;
MPRINT(EM_DIAGRAM):   end;
81324     +   end;
MPRINT(EM_DIAGRAM):   end;
81325     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
81326     +      jobMgr = .;
MPRINT(EM_DIAGRAM):   jobMgr = .;
81327     +      jobOffice = .;
MPRINT(EM_DIAGRAM):   jobOffice = .;
81328     +      jobOther = .;
MPRINT(EM_DIAGRAM):   jobOther = .;
81329     +      jobProfEx = .;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
81330     +      jobSales = .;
MPRINT(EM_DIAGRAM):   jobSales = .;
81331     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
81332     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81333     +   end;
MPRINT(EM_DIAGRAM):   end;
81334     +end;
MPRINT(EM_DIAGRAM):   end;
81335     +
81336     +*** Generate dummy variables for reason ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for reason ;
81337     +drop reasonDebtCon ;
MPRINT(EM_DIAGRAM):   drop reasonDebtCon ;
81338     +if missing( reason ) then do;
MPRINT(EM_DIAGRAM):   if missing( reason ) then do;
81339     +   reasonDebtCon = .;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
81340     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
81341     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81342     +end;
MPRINT(EM_DIAGRAM):   end;
81343     +else do;
MPRINT(EM_DIAGRAM):   else do;
81344     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
81345     +   %DMNORMCP( reason , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(reason,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
81346     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
81347     +      reasonDebtCon = 1;
MPRINT(EM_DIAGRAM):   reasonDebtCon = 1;
81348     +   end;
MPRINT(EM_DIAGRAM):   end;
81349     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
81350     +      reasonDebtCon = -1;
MPRINT(EM_DIAGRAM):   reasonDebtCon = -1;
81351     +   end;
MPRINT(EM_DIAGRAM):   end;
81352     +   else do;
MPRINT(EM_DIAGRAM):   else do;
81353     +      reasonDebtCon = .;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
81354     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
81355     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81356     +   end;
MPRINT(EM_DIAGRAM):   end;
81357     +end;
MPRINT(EM_DIAGRAM):   end;
81358     +
81359     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81360     +*** Checking missing input Interval
81361     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
81362     +
81363     +IF NMISS(
81364     +   REP_clage ,
81365     +   REP_clno ,
81366     +   REP_debtinc ,
81367     +   REP_delinq ,
81368     +   REP_derog ,
81369     +   REP_loan ,
81370     +   REP_mortdue ,
81371     +   REP_ninq ,
81372     +   REP_value ,
81373     +   REP_yoj   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( REP_clage , REP_clno , REP_debtinc , REP_delinq , REP_derog , 
REP_loan , REP_mortdue , REP_ninq , REP_value , REP_yoj ) THEN DO;
81374     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
81375     +
81376     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
81377     +END;
MPRINT(EM_DIAGRAM):   END;
81378     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81379     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
81380     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81381     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
81382     +   S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage ;
MPRINT(EM_DIAGRAM):   S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
81383     +   S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
81384     +   S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 * REP_debtinc
81385     +         ;
MPRINT(EM_DIAGRAM):   S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
81386     +   S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 * REP_delinq ;
MPRINT(EM_DIAGRAM):   S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
81387     +   S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog ;
MPRINT(EM_DIAGRAM):   S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
81388     +   S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
81389     +   S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 * REP_mortdue
81390     +         ;
MPRINT(EM_DIAGRAM):   S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
81391     +   S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
81392     +   S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value ;
MPRINT(EM_DIAGRAM):   S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
81393     +   S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
81394     +END;
MPRINT(EM_DIAGRAM):   END;
81395     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
81396     +   IF MISSING( REP_clage ) THEN S_REP_clage  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clage ) THEN S_REP_clage = . ;
81397     +   ELSE S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage
81398     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
81399     +   IF MISSING( REP_clno ) THEN S_REP_clno  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clno ) THEN S_REP_clno = . ;
81400     +   ELSE S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
81401     +   IF MISSING( REP_debtinc ) THEN S_REP_debtinc  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_debtinc ) THEN S_REP_debtinc = . ;
81402     +   ELSE S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 *
81403     +        REP_debtinc ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
81404     +   IF MISSING( REP_delinq ) THEN S_REP_delinq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_delinq ) THEN S_REP_delinq = . ;
81405     +   ELSE S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 *
81406     +        REP_delinq ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
81407     +   IF MISSING( REP_derog ) THEN S_REP_derog  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_derog ) THEN S_REP_derog = . ;
81408     +   ELSE S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog
81409     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
81410     +   IF MISSING( REP_loan ) THEN S_REP_loan  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_loan ) THEN S_REP_loan = . ;
81411     +   ELSE S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
81412     +   IF MISSING( REP_mortdue ) THEN S_REP_mortdue  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_mortdue ) THEN S_REP_mortdue = . ;
81413     +   ELSE S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 *
81414     +        REP_mortdue ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
81415     +   IF MISSING( REP_ninq ) THEN S_REP_ninq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_ninq ) THEN S_REP_ninq = . ;
81416     +   ELSE S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
81417     +   IF MISSING( REP_value ) THEN S_REP_value  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_value ) THEN S_REP_value = . ;
81418     +   ELSE S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value
81419     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
81420     +   IF MISSING( REP_yoj ) THEN S_REP_yoj  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_yoj ) THEN S_REP_yoj = . ;
81421     +   ELSE S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
81422     +END;
MPRINT(EM_DIAGRAM):   END;
81423     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81424     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
81425     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81426     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81427     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
81428     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81429     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
81430     +   H11  =      0.5131908092698 * S_REP_clage  +    -0.33974756462434 *
81431     +        S_REP_clno  +    -1.84826332972638 * S_REP_debtinc
81432     +          +    -0.71894464986145 * S_REP_delinq  +    -0.21448745477968 *
81433     +        S_REP_derog  +     0.19091660069461 * S_REP_loan
81434     +          +     0.50208666423614 * S_REP_mortdue  +    -0.32535925288246 *
81435     +        S_REP_ninq  +    -0.59000285203392 * S_REP_value
81436     +          +    -0.23942462411482 * S_REP_yoj ;
MPRINT(EM_DIAGRAM):   H11 = 0.5131908092698 * S_REP_clage + -0.33974756462434 * S_REP_clno + 
-1.84826332972638 * S_REP_debtinc + -0.71894464986145 * S_REP_delinq + -0.21448745477968 * 
S_REP_derog + 0.19091660069461 * S_REP_loan + 0.50208666423614 * S_REP_mortdue + 
-0.32535925288246 * S_REP_ninq + -0.59000285203392 * S_REP_value + -0.23942462411482 * 
S_REP_yoj ;
81437     +   H11  = H11  +     -0.0612734207067 * jobMgr  +     1.95081480490553 *
81438     +        jobOffice  +     0.18802232089434 * jobOther
81439     +          +    -0.00052144666791 * jobProfEx  +    -1.47852896530515 *
81440     +        jobSales  +    -0.47538341232871 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.0612734207067 * jobMgr + 1.95081480490553 * jobOffice + 
0.18802232089434 * jobOther + -0.00052144666791 * jobProfEx + -1.47852896530515 * jobSales + 
-0.47538341232871 * reasonDebtCon ;
81441     +   H11  =     3.74030724693985 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 3.74030724693985 + H11 ;
81442     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
81443     +END;
MPRINT(EM_DIAGRAM):   END;
81444     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
81445     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
81446     +END;
MPRINT(EM_DIAGRAM):   END;
81447     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81448     +*** Writing the Node bad ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bad ;
81449     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81450     +
81451     +*** Generate dummy variables for bad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for bad ;
81452     +drop bad1 bad0 ;
MPRINT(EM_DIAGRAM):   drop bad1 bad0 ;
81453     +label F_bad = 'From: bad' ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
81454     +length F_bad $ 12;
MPRINT(EM_DIAGRAM):   length F_bad $ 12;
81455     +F_bad = put( bad , BEST12. );
MPRINT(EM_DIAGRAM):   F_bad = put( bad , BEST12. );
81456     +%DMNORMIP( F_bad )
MPRINT(DMNORMIP):   call dmnorm(F_bad,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
81457     +if missing( bad ) then do;
MPRINT(EM_DIAGRAM):   if missing( bad ) then do;
81458     +   bad1 = .;
MPRINT(EM_DIAGRAM):   bad1 = .;
81459     +   bad0 = .;
MPRINT(EM_DIAGRAM):   bad0 = .;
81460     +end;
MPRINT(EM_DIAGRAM):   end;
81461     +else do;
MPRINT(EM_DIAGRAM):   else do;
81462     +   if F_bad = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_bad = '0' then do;
81463     +      bad1 = 0;
MPRINT(EM_DIAGRAM):   bad1 = 0;
81464     +      bad0 = 1;
MPRINT(EM_DIAGRAM):   bad0 = 1;
81465     +   end;
MPRINT(EM_DIAGRAM):   end;
81466     +   else if F_bad = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_bad = '1' then do;
81467     +      bad1 = 1;
MPRINT(EM_DIAGRAM):   bad1 = 1;
81468     +      bad0 = 0;
MPRINT(EM_DIAGRAM):   bad0 = 0;
81469     +   end;
MPRINT(EM_DIAGRAM):   end;
81470     +   else do;
MPRINT(EM_DIAGRAM):   else do;
81471     +      bad1 = .;
MPRINT(EM_DIAGRAM):   bad1 = .;
81472     +      bad0 = .;
MPRINT(EM_DIAGRAM):   bad0 = .;
81473     +   end;
MPRINT(EM_DIAGRAM):   end;
81474     +end;
MPRINT(EM_DIAGRAM):   end;
81475     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
81476     +   P_bad1  =    -5.99760759404159 * H11 ;
MPRINT(EM_DIAGRAM):   P_bad1 = -5.99760759404159 * H11 ;
81477     +   P_bad1  =     2.97558722742604 + P_bad1 ;
MPRINT(EM_DIAGRAM):   P_bad1 = 2.97558722742604 + P_bad1 ;
81478     +   P_bad0  = 0;
MPRINT(EM_DIAGRAM):   P_bad0 = 0;
81479     +   _MAX_ = MAX (P_bad1 , P_bad0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_bad1 , P_bad0 );
81480     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
81481     +   P_bad1  = EXP(P_bad1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_bad1 = EXP(P_bad1 - _MAX_);
81482     +   _SUM_ = _SUM_ + P_bad1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad1 ;
81483     +   P_bad0  = EXP(P_bad0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_bad0 = EXP(P_bad0 - _MAX_);
81484     +   _SUM_ = _SUM_ + P_bad0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad0 ;
81485     +   P_bad1  = P_bad1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad1 = P_bad1 / _SUM_;
81486     +   P_bad0  = P_bad0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad0 = P_bad0 / _SUM_;
81487     +END;
MPRINT(EM_DIAGRAM):   END;
81488     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
81489     +   P_bad1  = .;
MPRINT(EM_DIAGRAM):   P_bad1 = .;
81490     +   P_bad0  = .;
MPRINT(EM_DIAGRAM):   P_bad0 = .;
81491     +END;
MPRINT(EM_DIAGRAM):   END;
81492     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
81493     +   P_bad1  =     0.08693115519253;
MPRINT(EM_DIAGRAM):   P_bad1 = 0.08693115519253;
81494     +   P_bad0  =     0.91306884480746;
MPRINT(EM_DIAGRAM):   P_bad0 = 0.91306884480746;
81495     +END;
MPRINT(EM_DIAGRAM):   END;
81496     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
81497     +*** Writing the Residuals  of the Node bad ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node bad ;
81498     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
81499     +IF MISSING( bad1 ) THEN R_bad1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( bad1 ) THEN R_bad1 = . ;
81500     +ELSE R_bad1  = bad1  - P_bad1 ;
MPRINT(EM_DIAGRAM):   ELSE R_bad1 = bad1 - P_bad1 ;
81501     +IF MISSING( bad0 ) THEN R_bad0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( bad0 ) THEN R_bad0 = . ;
81502     +ELSE R_bad0  = bad0  - P_bad0 ;
MPRINT(EM_DIAGRAM):   ELSE R_bad0 = bad0 - P_bad0 ;
81503     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81504     +*** Writing the I_bad  AND U_bad ;
MPRINT(EM_DIAGRAM):   *** Writing the I_bad AND U_bad ;
81505     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
81506     +_MAXP_ = P_bad1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad1 ;
81507     +I_bad  = "1           " ;
MPRINT(EM_DIAGRAM):   I_bad = "1           " ;
81508     +U_bad  =                    1;
MPRINT(EM_DIAGRAM):   U_bad = 1;
81509     +IF( _MAXP_ LT P_bad0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_bad0 ) THEN DO;
81510     +   _MAXP_ = P_bad0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad0 ;
81511     +   I_bad  = "0           " ;
MPRINT(EM_DIAGRAM):   I_bad = "0           " ;
81512     +   U_bad  =                    0;
MPRINT(EM_DIAGRAM):   U_bad = 0;
81513     +END;
MPRINT(EM_DIAGRAM):   END;
81514     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
81515     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
81516     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
81517     +drop
81518     +H11
81519     +;
MPRINT(EM_DIAGRAM):   drop H11 ;
81520     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
81521      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_DIAGRAM):   quit;
81522      quit;
81523      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
81524      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
81525      * Neural4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural4: Computing metadata for TRAIN data;
81526      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL4_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\CDELTA_TRAIN
.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural4_TRAIN out=WORK.M0IP9BJP noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0IP9BJP;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0IP9BJP(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0IP9BJP;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0IP9BJP;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1FY8SNV NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FY8SNV;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FY8SNV;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10I9YO9(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FY8SNV;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FY8SNV;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FY8SNV;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1FY8SNV;
MPRINT(EMADVISECOLUMNS):   set WORK.M1FY8SNV;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural4";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_BAD1") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("R_BAD1") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("P_BAD0") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("R_BAD0") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("F_BAD") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("I_BAD") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("U_BAD") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural4";
MPRINT(EM_DIAGRAM):   when("BAD") model = "Neural4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
81861      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
81862      set EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO;
81863      where DATA='Neural4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 
'MODEL');
81864      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE (DATA='Neural4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

81865      data EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural4_EMINFO;
81866      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
81867      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
81868      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
81872      run;
81873      data EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMINFO;
81874      set EMWS1.Neural4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO WORK.MODELTEMP_INFO;
81875      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

81876      proc sort data = EMWS1.Neural4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural4_EMINFO NOTHREADS;
81877      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
81878      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL4_EMINFO.
NOTE: The data set EMWS1.NEURAL4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

81879      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
81880      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
81881      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

81882      proc sort data = EMWS1.Neural4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
81883      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
81884      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

81885      data EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural4_EMINFO;
81886      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
81887      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
81888      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

81889      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
81890      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
81891      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
81892      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

NOTE: View EMWS1.NEURAL4_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
      
NOTE: View EMWS1.NEURAL4_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
