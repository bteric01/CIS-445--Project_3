MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:09:42" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 05, 2015
Time:                14:09:42
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1TC_72T "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1TC_72T new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
49080      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
49081      set EMWS1.Neural6_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_OUTKEY;
49082      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
49083      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS1.NEURAL6_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

49084      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural6: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
49085      *------------------------------------------------------------*;
49086      * Neural6: Scoring DATA data;
49087      *------------------------------------------------------------*;
49088      data EMWS1.Neural6_TRAIN
49089      / view=EMWS1.Neural6_TRAIN
49090      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural6_TRAIN / view=EMWS1.Neural6_TRAIN ;
49091      set EMWS1.Repl_TRAIN
49092      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_TRAIN ;
49093      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMFLOWSCORE.sas.
49094     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
49095     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
49096     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
49097     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
49098     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
49099     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
49100     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
49101     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
49102     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
49103     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
49104     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
49105     +LENGTH _WARN_ $4
49106     +      F_bad  $ 12
49107     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_bad $ 12 ;
49108     +      label S_REP_clage = 'Standard: REP_clage' ;
MPRINT(EM_DIAGRAM):   label S_REP_clage = 'Standard: REP_clage' ;
49109     +
49110     +      label S_REP_clno = 'Standard: REP_clno' ;
MPRINT(EM_DIAGRAM):   label S_REP_clno = 'Standard: REP_clno' ;
49111     +
49112     +      label S_REP_debtinc = 'Standard: REP_debtinc' ;
MPRINT(EM_DIAGRAM):   label S_REP_debtinc = 'Standard: REP_debtinc' ;
49113     +
49114     +      label S_REP_delinq = 'Standard: REP_delinq' ;
MPRINT(EM_DIAGRAM):   label S_REP_delinq = 'Standard: REP_delinq' ;
49115     +
49116     +      label S_REP_derog = 'Standard: REP_derog' ;
MPRINT(EM_DIAGRAM):   label S_REP_derog = 'Standard: REP_derog' ;
49117     +
49118     +      label S_REP_loan = 'Standard: REP_loan' ;
MPRINT(EM_DIAGRAM):   label S_REP_loan = 'Standard: REP_loan' ;
49119     +
49120     +      label S_REP_mortdue = 'Standard: REP_mortdue' ;
MPRINT(EM_DIAGRAM):   label S_REP_mortdue = 'Standard: REP_mortdue' ;
49121     +
49122     +      label S_REP_ninq = 'Standard: REP_ninq' ;
MPRINT(EM_DIAGRAM):   label S_REP_ninq = 'Standard: REP_ninq' ;
49123     +
49124     +      label S_REP_value = 'Standard: REP_value' ;
MPRINT(EM_DIAGRAM):   label S_REP_value = 'Standard: REP_value' ;
49125     +
49126     +      label S_REP_yoj = 'Standard: REP_yoj' ;
MPRINT(EM_DIAGRAM):   label S_REP_yoj = 'Standard: REP_yoj' ;
49127     +
49128     +      label jobMgr = 'Dummy: job=Mgr' ;
MPRINT(EM_DIAGRAM):   label jobMgr = 'Dummy: job=Mgr' ;
49129     +
49130     +      label jobOffice = 'Dummy: job=Office' ;
MPRINT(EM_DIAGRAM):   label jobOffice = 'Dummy: job=Office' ;
49131     +
49132     +      label jobOther = 'Dummy: job=Other' ;
MPRINT(EM_DIAGRAM):   label jobOther = 'Dummy: job=Other' ;
49133     +
49134     +      label jobProfEx = 'Dummy: job=ProfEx' ;
MPRINT(EM_DIAGRAM):   label jobProfEx = 'Dummy: job=ProfEx' ;
49135     +
49136     +      label jobSales = 'Dummy: job=Sales' ;
MPRINT(EM_DIAGRAM):   label jobSales = 'Dummy: job=Sales' ;
49137     +
49138     +      label reasonDebtCon = 'Dummy: reason=DebtCon' ;
MPRINT(EM_DIAGRAM):   label reasonDebtCon = 'Dummy: reason=DebtCon' ;
49139     +
49140     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
49141     +
49142     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
49143     +
49144     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
49145     +
49146     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
49147     +
49148     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
49149     +
49150     +      label I_bad = 'Into: bad' ;
MPRINT(EM_DIAGRAM):   label I_bad = 'Into: bad' ;
49151     +
49152     +      label F_bad = 'From: bad' ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
49153     +
49154     +      label U_bad = 'Unnormalized Into: bad' ;
MPRINT(EM_DIAGRAM):   label U_bad = 'Unnormalized Into: bad' ;
49155     +
49156     +      label P_bad1 = 'Predicted: bad=1' ;
MPRINT(EM_DIAGRAM):   label P_bad1 = 'Predicted: bad=1' ;
49157     +
49158     +      label R_bad1 = 'Residual: bad=1' ;
MPRINT(EM_DIAGRAM):   label R_bad1 = 'Residual: bad=1' ;
49159     +
49160     +      label P_bad0 = 'Predicted: bad=0' ;
MPRINT(EM_DIAGRAM):   label P_bad0 = 'Predicted: bad=0' ;
49161     +
49162     +      label R_bad0 = 'Residual: bad=0' ;
MPRINT(EM_DIAGRAM):   label R_bad0 = 'Residual: bad=0' ;
49163     +
49164     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
49165     +
49166     +*** Generate dummy variables for job ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for job ;
49167     +drop jobMgr jobOffice jobOther jobProfEx jobSales ;
MPRINT(EM_DIAGRAM):   drop jobMgr jobOffice jobOther jobProfEx jobSales ;
49168     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
49169     +jobMgr = 0;
MPRINT(EM_DIAGRAM):   jobMgr = 0;
49170     +jobOffice = 0;
MPRINT(EM_DIAGRAM):   jobOffice = 0;
49171     +jobOther = 0;
MPRINT(EM_DIAGRAM):   jobOther = 0;
49172     +jobProfEx = 0;
MPRINT(EM_DIAGRAM):   jobProfEx = 0;
49173     +jobSales = 0;
MPRINT(EM_DIAGRAM):   jobSales = 0;
49174     +if missing( job ) then do;
MPRINT(EM_DIAGRAM):   if missing( job ) then do;
49175     +   jobMgr = .;
MPRINT(EM_DIAGRAM):   jobMgr = .;
49176     +   jobOffice = .;
MPRINT(EM_DIAGRAM):   jobOffice = .;
49177     +   jobOther = .;
MPRINT(EM_DIAGRAM):   jobOther = .;
49178     +   jobProfEx = .;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
49179     +   jobSales = .;
MPRINT(EM_DIAGRAM):   jobSales = .;
49180     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
49181     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49182     +end;
MPRINT(EM_DIAGRAM):   end;
49183     +else do;
MPRINT(EM_DIAGRAM):   else do;
49184     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
49185     +   %DMNORMCP( job , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(job,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OTHER' then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OFFICE' then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'MGR' then do;
MPRINT(EM_DIAGRAM):   jobMgr = 1;
49186     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49187     +   if _dm6 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   end;
49188     +      if _dm6 <= 'OFFICE'  then do;
49189     +         if _dm6 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   else do;
49190     +            jobMgr = 1;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OFFICE' then do;
49191     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   jobOffice = 1;
49192     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49193     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
49194     +            if _dm6 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   end;
49195     +               jobOffice = 1;
49196     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
49197     +            end;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OTHER' then do;
49198     +         end;
MPRINT(EM_DIAGRAM):   jobOther = 1;
49199     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49200     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
49201     +         if _dm6 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   end;
49202     +            jobOther = 1;
49203     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
49204     +         end;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'SALES' then do;
49205     +      end;
MPRINT(EM_DIAGRAM):   if _dm6 = 'PROFEX' then do;
49206     +   end;
MPRINT(EM_DIAGRAM):   jobProfEx = 1;
49207     +   else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
49208     +      if _dm6 <= 'SALES'  then do;
49209     +         if _dm6 = 'PROFEX'  then do;
MPRINT(EM_DIAGRAM):   else do;
49210     +            jobProfEx = 1;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SALES' then do;
49211     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   jobSales = 1;
49212     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49213     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
49214     +            if _dm6 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   end;
49215     +               jobSales = 1;
49216     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
49217     +            end;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SELF' then do;
49218     +         end;
MPRINT(EM_DIAGRAM):   jobMgr = -1;
49219     +      end;
MPRINT(EM_DIAGRAM):   jobOffice = -1;
49220     +      else do;
MPRINT(EM_DIAGRAM):   jobOther = -1;
MPRINT(EM_DIAGRAM):   jobProfEx = -1;
49221     +         if _dm6 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   jobSales = -1;
49222     +            jobMgr = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49223     +            jobOffice = -1;
MPRINT(EM_DIAGRAM):   end;
49224     +            jobOther = -1;
MPRINT(EM_DIAGRAM):   end;
49225     +            jobProfEx = -1;
MPRINT(EM_DIAGRAM):   end;
49226     +            jobSales = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
49227     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   jobMgr = .;
49228     +         end;
MPRINT(EM_DIAGRAM):   jobOffice = .;
49229     +      end;
MPRINT(EM_DIAGRAM):   jobOther = .;
49230     +   end;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
49231     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   jobSales = .;
49232     +      jobMgr = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
49233     +      jobOffice = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49234     +      jobOther = .;
MPRINT(EM_DIAGRAM):   end;
49235     +      jobProfEx = .;
MPRINT(EM_DIAGRAM):   end;
49236     +      jobSales = .;
49237     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for reason ;
49238     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop reasonDebtCon ;
49239     +   end;
MPRINT(EM_DIAGRAM):   if missing( reason ) then do;
49240     +end;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
49241     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
49242     +*** Generate dummy variables for reason ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49243     +drop reasonDebtCon ;
MPRINT(EM_DIAGRAM):   end;
49244     +if missing( reason ) then do;
49245     +   reasonDebtCon = .;
MPRINT(EM_DIAGRAM):   else do;
49246     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
49247     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
49248     +end;
49249     +else do;
49250     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(DMNORMCP):   _dm7=dmnorm(reason,
49251     +   %DMNORMCP( reason , _dm7 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
MPRINT(EM_DIAGRAM):   reasonDebtCon = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
49252     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   reasonDebtCon = -1;
49253     +      reasonDebtCon = 1;
MPRINT(EM_DIAGRAM):   end;
49254     +   end;
49255     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
49256     +      reasonDebtCon = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
49257     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49258     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
49259     +      reasonDebtCon = .;
49260     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** *************************;
49261     +      _DM_BAD = 1;
49262     +   end;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
49263     +end;
49264     +
49265     +*** *************************;
49266     +*** Checking missing input Interval
49267     +*** *************************;
49268     +
49269     +IF NMISS(
49270     +   REP_clage ,
49271     +   REP_clno ,
49272     +   REP_debtinc ,
49273     +   REP_delinq ,
49274     +   REP_derog ,
MPRINT(EM_DIAGRAM):   IF NMISS( REP_clage , REP_clno , REP_debtinc , REP_delinq , REP_derog , REP_loan , REP_mortdue , REP_ninq , REP_value , REP_yoj ) THEN DO;
49275     +   REP_loan ,
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
49276     +   REP_mortdue ,
49277     +   REP_ninq ,
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49278     +   REP_value ,
MPRINT(EM_DIAGRAM):   END;
49279     +   REP_yoj   ) THEN DO;
MPRINT(EM_DIAGRAM):   *** *************************;
49280     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
49281     +
MPRINT(EM_DIAGRAM):   *** *************************;
49282     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
49283     +END;
MPRINT(EM_DIAGRAM):   S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
49284     +*** *************************;
MPRINT(EM_DIAGRAM):   S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
49285     +*** Writing the Node intvl ;
49286     +*** *************************;
MPRINT(EM_DIAGRAM):   S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
49287     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
49288     +   S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage ;
MPRINT(EM_DIAGRAM):   S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
49289     +   S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
49290     +   S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 * REP_debtinc
49291     +         ;
MPRINT(EM_DIAGRAM):   S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
49292     +   S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 * REP_delinq ;
MPRINT(EM_DIAGRAM):   S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
49293     +   S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog ;
MPRINT(EM_DIAGRAM):   S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
49294     +   S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
49295     +   S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 * REP_mortdue
MPRINT(EM_DIAGRAM):   END;
49296     +         ;
49297     +   S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   ELSE DO;
49298     +   S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clage ) THEN S_REP_clage = . ;
49299     +   S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
49300     +END;
49301     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clno ) THEN S_REP_clno = . ;
49302     +   IF MISSING( REP_clage ) THEN S_REP_clage  = . ;
49303     +   ELSE S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage
MPRINT(EM_DIAGRAM):   ELSE S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_debtinc ) THEN S_REP_debtinc = . ;
49304     +         ;
49305     +   IF MISSING( REP_clno ) THEN S_REP_clno  = . ;
49306     +   ELSE S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_delinq ) THEN S_REP_delinq = . ;
49307     +   IF MISSING( REP_debtinc ) THEN S_REP_debtinc  = . ;
49308     +   ELSE S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 *
MPRINT(EM_DIAGRAM):   ELSE S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
49309     +        REP_debtinc ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_derog ) THEN S_REP_derog = . ;
49310     +   IF MISSING( REP_delinq ) THEN S_REP_delinq  = . ;
49311     +   ELSE S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 *
MPRINT(EM_DIAGRAM):   ELSE S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
49312     +        REP_delinq ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_loan ) THEN S_REP_loan = . ;
49313     +   IF MISSING( REP_derog ) THEN S_REP_derog  = . ;
49314     +   ELSE S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog
MPRINT(EM_DIAGRAM):   ELSE S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_mortdue ) THEN S_REP_mortdue = . ;
49315     +         ;
49316     +   IF MISSING( REP_loan ) THEN S_REP_loan  = . ;
49317     +   ELSE S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_ninq ) THEN S_REP_ninq = . ;
49318     +   IF MISSING( REP_mortdue ) THEN S_REP_mortdue  = . ;
49319     +   ELSE S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 *
MPRINT(EM_DIAGRAM):   ELSE S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_value ) THEN S_REP_value = . ;
49320     +        REP_mortdue ;
49321     +   IF MISSING( REP_ninq ) THEN S_REP_ninq  = . ;
49322     +   ELSE S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_yoj ) THEN S_REP_yoj = . ;
49323     +   IF MISSING( REP_value ) THEN S_REP_value  = . ;
49324     +   ELSE S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value
MPRINT(EM_DIAGRAM):   ELSE S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   END;
49325     +         ;
MPRINT(EM_DIAGRAM):   *** *************************;
49326     +   IF MISSING( REP_yoj ) THEN S_REP_yoj  = . ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
49327     +   ELSE S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49328     +END;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
49329     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49330     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
49331     +*** *************************;
49332     +*** *************************;
49333     +*** Writing the Node H1 ;
49334     +*** *************************;
49335     +IF _DM_BAD EQ 0 THEN DO;
49336     +   H11  =    -0.62908691581503 * S_REP_clage  +    -0.32501825337077 *
49337     +        S_REP_clno  +    -0.55063341593129 * S_REP_debtinc
MPRINT(EM_DIAGRAM):   H11 = -0.62908691581503 * S_REP_clage + -0.32501825337077 * S_REP_clno + -0.55063341593129 * S_REP_debtinc + 0.53610311600309 * S_REP_delinq + 0.31760313380137 * S_REP_derog + 0.76066880320622 * S_REP_loan + -0.28789263834612 * 
S_REP_mortdue + 0.40621809124292 * S_REP_ninq + 0.13015938731861 * S_REP_value + -0.32068519738691 * S_REP_yoj ;
49338     +          +     0.53610311600309 * S_REP_delinq  +     0.31760313380137 *
49339     +        S_REP_derog  +     0.76066880320622 * S_REP_loan
49340     +          +    -0.28789263834612 * S_REP_mortdue  +     0.40621809124292 *
49341     +        S_REP_ninq  +     0.13015938731861 * S_REP_value
49342     +          +    -0.32068519738691 * S_REP_yoj ;
49343     +   H12  =     1.00990224082991 * S_REP_clage  +     1.00507167206229 *
49344     +        S_REP_clno  +    -1.10662026428082 * S_REP_debtinc
MPRINT(EM_DIAGRAM):   H12 = 1.00990224082991 * S_REP_clage + 1.00507167206229 * S_REP_clno + -1.10662026428082 * S_REP_debtinc + 0.6998948133866 * S_REP_delinq + -0.38060034861396 * S_REP_derog + 0.23802876244022 * S_REP_loan + 1.46223703828863 * 
S_REP_mortdue + 0.16221973340289 * S_REP_ninq + 0.20580076033145 * S_REP_value + -0.36336973234685 * S_REP_yoj ;
49345     +          +      0.6998948133866 * S_REP_delinq  +    -0.38060034861396 *
49346     +        S_REP_derog  +     0.23802876244022 * S_REP_loan
49347     +          +     1.46223703828863 * S_REP_mortdue  +     0.16221973340289 *
49348     +        S_REP_ninq  +     0.20580076033145 * S_REP_value
49349     +          +    -0.36336973234685 * S_REP_yoj ;
49350     +   H13  =    -0.35847141424276 * S_REP_clage  +    -0.05395567288207 *
49351     +        S_REP_clno  +    -1.56713434921689 * S_REP_debtinc
MPRINT(EM_DIAGRAM):   H13 = -0.35847141424276 * S_REP_clage + -0.05395567288207 * S_REP_clno + -1.56713434921689 * S_REP_debtinc + 0.40008753846173 * S_REP_delinq + -0.33466356832386 * S_REP_derog + 1.10371225343116 * S_REP_loan + 0.69224357492781 * 
S_REP_mortdue + 0.51037405190683 * S_REP_ninq + 0.44808525211083 * S_REP_value + -0.26760253087166 * S_REP_yoj ;
49352     +          +     0.40008753846173 * S_REP_delinq  +    -0.33466356832386 *
49353     +        S_REP_derog  +     1.10371225343116 * S_REP_loan
49354     +          +     0.69224357492781 * S_REP_mortdue  +     0.51037405190683 *
49355     +        S_REP_ninq  +     0.44808525211083 * S_REP_value
49356     +          +    -0.26760253087166 * S_REP_yoj ;
49357     +   H14  =    -0.11766819029086 * S_REP_clage  +     0.37675155536102 *
49358     +        S_REP_clno  +    -1.40176529461934 * S_REP_debtinc
MPRINT(EM_DIAGRAM):   H14 = -0.11766819029086 * S_REP_clage + 0.37675155536102 * S_REP_clno + -1.40176529461934 * S_REP_debtinc + -0.33347887334955 * S_REP_delinq + -0.93189382300241 * S_REP_derog + 0.14773119868753 * S_REP_loan + 0.65553319202921 * 
S_REP_mortdue + -0.51245471898902 * S_REP_ninq + -0.09683863673345 * S_REP_value + -0.13774995720744 * S_REP_yoj ;
49359     +          +    -0.33347887334955 * S_REP_delinq  +    -0.93189382300241 *
49360     +        S_REP_derog  +     0.14773119868753 * S_REP_loan
49361     +          +     0.65553319202921 * S_REP_mortdue  +    -0.51245471898902 *
49362     +        S_REP_ninq  +    -0.09683863673345 * S_REP_value
49363     +          +    -0.13774995720744 * S_REP_yoj ;
49364     +   H15  =    -1.45700837806533 * S_REP_clage  +    -0.52984215542527 *
49365     +        S_REP_clno  +     1.15948789842713 * S_REP_debtinc
MPRINT(EM_DIAGRAM):   H15 = -1.45700837806533 * S_REP_clage + -0.52984215542527 * S_REP_clno + 1.15948789842713 * S_REP_debtinc + 0.19011409641161 * S_REP_delinq + -2.02616431453247 * S_REP_derog + -0.6553627920171 * S_REP_loan + -0.14566068551477 * 
S_REP_mortdue + 0.18837895409628 * S_REP_ninq + 0.03023882849475 * S_REP_value + -0.2272136712169 * S_REP_yoj ;
49366     +          +     0.19011409641161 * S_REP_delinq  +    -2.02616431453247 *
49367     +        S_REP_derog  +     -0.6553627920171 * S_REP_loan
49368     +          +    -0.14566068551477 * S_REP_mortdue  +     0.18837895409628 *
49369     +        S_REP_ninq  +     0.03023882849475 * S_REP_value
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.4971837585444 * jobMgr + 0.99108600553959 * jobOffice + -0.0175936835238 * jobOther + -0.64974941484421 * jobProfEx + 0.54418567034446 * jobSales + -0.14052025055858 * reasonDebtCon ;
49370     +          +     -0.2272136712169 * S_REP_yoj ;
49371     +   H11  = H11  +      0.4971837585444 * jobMgr  +     0.99108600553959 *
49372     +        jobOffice  +     -0.0175936835238 * jobOther
49373     +          +    -0.64974941484421 * jobProfEx  +     0.54418567034446 *
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.11996971867833 * jobMgr + -0.89911075787109 * jobOffice + 0.94148156880893 * jobOther + 0.00858214852939 * jobProfEx + 0.94780143279274 * jobSales + -0.17986016486928 * reasonDebtCon ;
49374     +        jobSales  +    -0.14052025055858 * reasonDebtCon ;
49375     +   H12  = H12  +    -0.11996971867833 * jobMgr  +    -0.89911075787109 *
49376     +        jobOffice  +     0.94148156880893 * jobOther
49377     +          +     0.00858214852939 * jobProfEx  +     0.94780143279274 *
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.42171167869344 * jobMgr + 1.69024912052118 * jobOffice + 0.29962164605448 * jobOther + -1.00495563265965 * jobProfEx + -0.29049612384344 * jobSales + -0.51335639253942 * reasonDebtCon ;
49378     +        jobSales  +    -0.17986016486928 * reasonDebtCon ;
49379     +   H13  = H13  +     0.42171167869344 * jobMgr  +     1.69024912052118 *
49380     +        jobOffice  +     0.29962164605448 * jobOther
49381     +          +    -1.00495563265965 * jobProfEx  +    -0.29049612384344 *
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.33821409519278 * jobMgr + -0.32425917467918 * jobOffice + 1.25593183968499 * jobOther + -0.46533260470105 * jobProfEx + 0.63773311846622 * jobSales + 0.60689300908065 * reasonDebtCon ;
49382     +        jobSales  +    -0.51335639253942 * reasonDebtCon ;
49383     +   H14  = H14  +     0.33821409519278 * jobMgr  +    -0.32425917467918 *
49384     +        jobOffice  +     1.25593183968499 * jobOther
49385     +          +    -0.46533260470105 * jobProfEx  +     0.63773311846622 *
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.04254576236664 * jobMgr + -0.82337471757333 * jobOffice + 0.26980517777569 * jobOther + -1.04647618149321 * jobProfEx + -0.77143124331498 * jobSales + 0.60454409349743 * reasonDebtCon ;
49386     +        jobSales  +     0.60689300908065 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H11 = -0.20425314196788 + H11 ;
49387     +   H15  = H15  +    -0.04254576236664 * jobMgr  +    -0.82337471757333 *
MPRINT(EM_DIAGRAM):   H12 = -1.18134511087683 + H12 ;
49388     +        jobOffice  +     0.26980517777569 * jobOther
MPRINT(EM_DIAGRAM):   H13 = 1.36835995204487 + H13 ;
49389     +          +    -1.04647618149321 * jobProfEx  +    -0.77143124331498 *
MPRINT(EM_DIAGRAM):   H14 = 1.82309032577926 + H14 ;
49390     +        jobSales  +     0.60454409349743 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H15 = -1.21360634280242 + H15 ;
49391     +   H11  =    -0.20425314196788 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
49392     +   H12  =    -1.18134511087683 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
49393     +   H13  =     1.36835995204487 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
49394     +   H14  =     1.82309032577926 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
49395     +   H15  =    -1.21360634280242 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
49396     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   END;
49397     +   H12  = TANH(H12 );
49398     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   ELSE DO;
49399     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H11 = .;
49400     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H12 = .;
49401     +END;
MPRINT(EM_DIAGRAM):   H13 = .;
49402     +ELSE DO;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
49403     +   H11  = .;
MPRINT(EM_DIAGRAM):   END;
49404     +   H12  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
49405     +   H13  = .;
MPRINT(EM_DIAGRAM):   *** Writing the Node bad ;
49406     +   H14  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
49407     +   H15  = .;
49408     +END;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for bad ;
49409     +*** *************************;
MPRINT(EM_DIAGRAM):   drop bad1 bad0 ;
49410     +*** Writing the Node bad ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
49411     +*** *************************;
49412     +
MPRINT(EM_DIAGRAM):   length F_bad $ 12;
49413     +*** Generate dummy variables for bad ;
49414     +drop bad1 bad0 ;
MPRINT(EM_DIAGRAM):   F_bad = put( bad , BEST12. );
49415     +label F_bad = 'From: bad' ;
49416     +length F_bad $ 12;
49417     +F_bad = put( bad , BEST12. );
49418     +%DMNORMIP( F_bad )
MPRINT(DMNORMIP):   call dmnorm(F_bad,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( bad ) then do;
MPRINT(EM_DIAGRAM):   bad1 = .;
MPRINT(EM_DIAGRAM):   bad0 = .;
MPRINT(EM_DIAGRAM):   end;
49419     +if missing( bad ) then do;
MPRINT(EM_DIAGRAM):   else do;
49420     +   bad1 = .;
MPRINT(EM_DIAGRAM):   if F_bad = '0' then do;
49421     +   bad0 = .;
MPRINT(EM_DIAGRAM):   bad1 = 0;
49422     +end;
MPRINT(EM_DIAGRAM):   bad0 = 1;
49423     +else do;
MPRINT(EM_DIAGRAM):   end;
49424     +   if F_bad = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_bad = '1' then do;
49425     +      bad1 = 0;
MPRINT(EM_DIAGRAM):   bad1 = 1;
49426     +      bad0 = 1;
MPRINT(EM_DIAGRAM):   bad0 = 0;
49427     +   end;
MPRINT(EM_DIAGRAM):   end;
49428     +   else if F_bad = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
49429     +      bad1 = 1;
MPRINT(EM_DIAGRAM):   bad1 = .;
49430     +      bad0 = 0;
MPRINT(EM_DIAGRAM):   bad0 = .;
49431     +   end;
MPRINT(EM_DIAGRAM):   end;
49432     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
49433     +      bad1 = .;
49434     +      bad0 = .;
49435     +   end;
MPRINT(EM_DIAGRAM):   P_bad1 = 3.04827710427339 * H11 + 2.87488930274442 * H12 + -3.13322020184657 * H13 + -2.05104855569441 * H14 + 1.75557568090107 * H15 ;
49436     +end;
MPRINT(EM_DIAGRAM):   P_bad1 = 1.21289221953622 + P_bad1 ;
49437     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_bad0 = 0;
49438     +   P_bad1  =     3.04827710427339 * H11  +     2.87488930274442 * H12
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_bad1 , P_bad0 );
49439     +          +    -3.13322020184657 * H13  +    -2.05104855569441 * H14
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
49440     +          +     1.75557568090107 * H15 ;
MPRINT(EM_DIAGRAM):   P_bad1 = EXP(P_bad1 - _MAX_);
49441     +   P_bad1  =     1.21289221953622 + P_bad1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad1 ;
49442     +   P_bad0  = 0;
MPRINT(EM_DIAGRAM):   P_bad0 = EXP(P_bad0 - _MAX_);
49443     +   _MAX_ = MAX (P_bad1 , P_bad0 );
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad0 ;
49444     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_bad1 = P_bad1 / _SUM_;
49445     +   P_bad1  = EXP(P_bad1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_bad0 = P_bad0 / _SUM_;
49446     +   _SUM_ = _SUM_ + P_bad1 ;
MPRINT(EM_DIAGRAM):   END;
49447     +   P_bad0  = EXP(P_bad0  - _MAX_);
49448     +   _SUM_ = _SUM_ + P_bad0 ;
MPRINT(EM_DIAGRAM):   ELSE DO;
49449     +   P_bad1  = P_bad1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad1 = .;
49450     +   P_bad0  = P_bad0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad0 = .;
49451     +END;
MPRINT(EM_DIAGRAM):   END;
49452     +ELSE DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_bad1 = 0.08693115519253;
49453     +   P_bad1  = .;
MPRINT(EM_DIAGRAM):   P_bad0 = 0.91306884480746;
49454     +   P_bad0  = .;
MPRINT(EM_DIAGRAM):   END;
49455     +END;
MPRINT(EM_DIAGRAM):   *** *****************************;
49456     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node bad ;
49457     +   P_bad1  =     0.08693115519253;
MPRINT(EM_DIAGRAM):   *** ******************************;
49458     +   P_bad0  =     0.91306884480746;
MPRINT(EM_DIAGRAM):   IF MISSING( bad1 ) THEN R_bad1 = . ;
49459     +END;
49460     +*** *****************************;
MPRINT(EM_DIAGRAM):   ELSE R_bad1 = bad1 - P_bad1 ;
49461     +*** Writing the Residuals  of the Node bad ;
MPRINT(EM_DIAGRAM):   IF MISSING( bad0 ) THEN R_bad0 = . ;
49462     +*** ******************************;
49463     +IF MISSING( bad1 ) THEN R_bad1  = . ;
MPRINT(EM_DIAGRAM):   ELSE R_bad0 = bad0 - P_bad0 ;
49464     +ELSE R_bad1  = bad1  - P_bad1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_bad AND U_bad ;
49465     +IF MISSING( bad0 ) THEN R_bad0  = . ;
MPRINT(EM_DIAGRAM):   *** *************************;
49466     +ELSE R_bad0  = bad0  - P_bad0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad1 ;
MPRINT(EM_DIAGRAM):   I_bad = "1           " ;
49467     +*** *************************;
MPRINT(EM_DIAGRAM):   U_bad = 1;
49468     +*** Writing the I_bad  AND U_bad ;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_bad0 ) THEN DO;
49469     +*** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad0 ;
49470     +_MAXP_ = P_bad1 ;
MPRINT(EM_DIAGRAM):   I_bad = "0           " ;
49471     +I_bad  = "1           " ;
MPRINT(EM_DIAGRAM):   U_bad = 0;
49472     +U_bad  =                    1;
MPRINT(EM_DIAGRAM):   END;
49473     +IF( _MAXP_ LT P_bad0  ) THEN DO;
MPRINT(EM_DIAGRAM):   ********************************;
49474     +   _MAXP_ = P_bad0 ;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
49475     +   I_bad  = "0           " ;
MPRINT(EM_DIAGRAM):   ********************************;
49476     +   U_bad  =                    0;
49477     +END;
49478     +********************************;
49479     +*** End Scoring Code for Neural;
49480     +********************************;
49481     +drop
49482     +H11
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
49483     +H12
MPRINT(EM_DIAGRAM):   drop S_:;
49484     +H13
49485     +H14
49486     +H15
49487     +;
49488     +drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
49489      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL6_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_DIAGRAM):   quit;
49490      quit;
49491      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
49492      filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural6: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
49493      *------------------------------------------------------------*;
49494      * Neural6: Scoring VALIDATE data;
49495      *------------------------------------------------------------*;
49496      data EMWS1.Neural6_VALIDATE
49497      / view=EMWS1.Neural6_VALIDATE
49498      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural6_VALIDATE / view=EMWS1.Neural6_VALIDATE ;
49499      set EMWS1.Repl_VALIDATE
49500      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_VALIDATE ;
49501      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\EMFLOWSCORE.sas.
49502     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
49503     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
49504     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
49505     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
49506     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
49507     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
49508     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
49509     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
49510     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
49511     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
49512     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
49513     +LENGTH _WARN_ $4
49514     +      F_bad  $ 12
49515     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_bad $ 12 ;
49516     +      label S_REP_clage = 'Standard: REP_clage' ;
MPRINT(EM_DIAGRAM):   label S_REP_clage = 'Standard: REP_clage' ;
49517     +
49518     +      label S_REP_clno = 'Standard: REP_clno' ;
MPRINT(EM_DIAGRAM):   label S_REP_clno = 'Standard: REP_clno' ;
49519     +
49520     +      label S_REP_debtinc = 'Standard: REP_debtinc' ;
MPRINT(EM_DIAGRAM):   label S_REP_debtinc = 'Standard: REP_debtinc' ;
49521     +
49522     +      label S_REP_delinq = 'Standard: REP_delinq' ;
MPRINT(EM_DIAGRAM):   label S_REP_delinq = 'Standard: REP_delinq' ;
49523     +
49524     +      label S_REP_derog = 'Standard: REP_derog' ;
MPRINT(EM_DIAGRAM):   label S_REP_derog = 'Standard: REP_derog' ;
49525     +
49526     +      label S_REP_loan = 'Standard: REP_loan' ;
MPRINT(EM_DIAGRAM):   label S_REP_loan = 'Standard: REP_loan' ;
49527     +
49528     +      label S_REP_mortdue = 'Standard: REP_mortdue' ;
MPRINT(EM_DIAGRAM):   label S_REP_mortdue = 'Standard: REP_mortdue' ;
49529     +
49530     +      label S_REP_ninq = 'Standard: REP_ninq' ;
MPRINT(EM_DIAGRAM):   label S_REP_ninq = 'Standard: REP_ninq' ;
49531     +
49532     +      label S_REP_value = 'Standard: REP_value' ;
MPRINT(EM_DIAGRAM):   label S_REP_value = 'Standard: REP_value' ;
49533     +
49534     +      label S_REP_yoj = 'Standard: REP_yoj' ;
MPRINT(EM_DIAGRAM):   label S_REP_yoj = 'Standard: REP_yoj' ;
49535     +
49536     +      label jobMgr = 'Dummy: job=Mgr' ;
MPRINT(EM_DIAGRAM):   label jobMgr = 'Dummy: job=Mgr' ;
49537     +
49538     +      label jobOffice = 'Dummy: job=Office' ;
MPRINT(EM_DIAGRAM):   label jobOffice = 'Dummy: job=Office' ;
49539     +
49540     +      label jobOther = 'Dummy: job=Other' ;
MPRINT(EM_DIAGRAM):   label jobOther = 'Dummy: job=Other' ;
49541     +
49542     +      label jobProfEx = 'Dummy: job=ProfEx' ;
MPRINT(EM_DIAGRAM):   label jobProfEx = 'Dummy: job=ProfEx' ;
49543     +
49544     +      label jobSales = 'Dummy: job=Sales' ;
MPRINT(EM_DIAGRAM):   label jobSales = 'Dummy: job=Sales' ;
49545     +
49546     +      label reasonDebtCon = 'Dummy: reason=DebtCon' ;
MPRINT(EM_DIAGRAM):   label reasonDebtCon = 'Dummy: reason=DebtCon' ;
49547     +
49548     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
49549     +
49550     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
49551     +
49552     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
49553     +
49554     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
49555     +
49556     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
49557     +
49558     +      label I_bad = 'Into: bad' ;
MPRINT(EM_DIAGRAM):   label I_bad = 'Into: bad' ;
49559     +
49560     +      label F_bad = 'From: bad' ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
49561     +
49562     +      label U_bad = 'Unnormalized Into: bad' ;
MPRINT(EM_DIAGRAM):   label U_bad = 'Unnormalized Into: bad' ;
49563     +
49564     +      label P_bad1 = 'Predicted: bad=1' ;
MPRINT(EM_DIAGRAM):   label P_bad1 = 'Predicted: bad=1' ;
49565     +
49566     +      label R_bad1 = 'Residual: bad=1' ;
MPRINT(EM_DIAGRAM):   label R_bad1 = 'Residual: bad=1' ;
49567     +
49568     +      label P_bad0 = 'Predicted: bad=0' ;
MPRINT(EM_DIAGRAM):   label P_bad0 = 'Predicted: bad=0' ;
49569     +
49570     +      label R_bad0 = 'Residual: bad=0' ;
MPRINT(EM_DIAGRAM):   label R_bad0 = 'Residual: bad=0' ;
49571     +
49572     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
49573     +
49574     +*** Generate dummy variables for job ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for job ;
49575     +drop jobMgr jobOffice jobOther jobProfEx jobSales ;
MPRINT(EM_DIAGRAM):   drop jobMgr jobOffice jobOther jobProfEx jobSales ;
49576     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
49577     +jobMgr = 0;
MPRINT(EM_DIAGRAM):   jobMgr = 0;
49578     +jobOffice = 0;
MPRINT(EM_DIAGRAM):   jobOffice = 0;
49579     +jobOther = 0;
MPRINT(EM_DIAGRAM):   jobOther = 0;
49580     +jobProfEx = 0;
MPRINT(EM_DIAGRAM):   jobProfEx = 0;
49581     +jobSales = 0;
MPRINT(EM_DIAGRAM):   jobSales = 0;
49582     +if missing( job ) then do;
MPRINT(EM_DIAGRAM):   if missing( job ) then do;
49583     +   jobMgr = .;
MPRINT(EM_DIAGRAM):   jobMgr = .;
49584     +   jobOffice = .;
MPRINT(EM_DIAGRAM):   jobOffice = .;
49585     +   jobOther = .;
MPRINT(EM_DIAGRAM):   jobOther = .;
49586     +   jobProfEx = .;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
49587     +   jobSales = .;
MPRINT(EM_DIAGRAM):   jobSales = .;
49588     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
49589     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49590     +end;
MPRINT(EM_DIAGRAM):   end;
49591     +else do;
MPRINT(EM_DIAGRAM):   else do;
49592     +   length _dm6 $ 6; drop _dm6 ;
MPRINT(EM_DIAGRAM):   length _dm6 $ 6;
MPRINT(EM_DIAGRAM):   drop _dm6 ;
49593     +   %DMNORMCP( job , _dm6 )
MPRINT(DMNORMCP):   _dm6=dmnorm(job,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
49594     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
49595     +   if _dm6 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OTHER' then do;
49596     +      if _dm6 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'OFFICE' then do;
49597     +         if _dm6 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'MGR' then do;
49598     +            jobMgr = 1;
MPRINT(EM_DIAGRAM):   jobMgr = 1;
49599     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49600     +         end;
MPRINT(EM_DIAGRAM):   end;
49601     +         else do;
MPRINT(EM_DIAGRAM):   else do;
49602     +            if _dm6 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OFFICE' then do;
49603     +               jobOffice = 1;
MPRINT(EM_DIAGRAM):   jobOffice = 1;
49604     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49605     +            end;
MPRINT(EM_DIAGRAM):   end;
49606     +         end;
MPRINT(EM_DIAGRAM):   end;
49607     +      end;
MPRINT(EM_DIAGRAM):   end;
49608     +      else do;
MPRINT(EM_DIAGRAM):   else do;
49609     +         if _dm6 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'OTHER' then do;
49610     +            jobOther = 1;
MPRINT(EM_DIAGRAM):   jobOther = 1;
49611     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49612     +         end;
MPRINT(EM_DIAGRAM):   end;
49613     +      end;
MPRINT(EM_DIAGRAM):   end;
49614     +   end;
MPRINT(EM_DIAGRAM):   end;
49615     +   else do;
MPRINT(EM_DIAGRAM):   else do;
49616     +      if _dm6 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 <= 'SALES' then do;
49617     +         if _dm6 = 'PROFEX'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'PROFEX' then do;
49618     +            jobProfEx = 1;
MPRINT(EM_DIAGRAM):   jobProfEx = 1;
49619     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49620     +         end;
MPRINT(EM_DIAGRAM):   end;
49621     +         else do;
MPRINT(EM_DIAGRAM):   else do;
49622     +            if _dm6 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SALES' then do;
49623     +               jobSales = 1;
MPRINT(EM_DIAGRAM):   jobSales = 1;
49624     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49625     +            end;
MPRINT(EM_DIAGRAM):   end;
49626     +         end;
MPRINT(EM_DIAGRAM):   end;
49627     +      end;
MPRINT(EM_DIAGRAM):   end;
49628     +      else do;
MPRINT(EM_DIAGRAM):   else do;
49629     +         if _dm6 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm6 = 'SELF' then do;
49630     +            jobMgr = -1;
MPRINT(EM_DIAGRAM):   jobMgr = -1;
49631     +            jobOffice = -1;
MPRINT(EM_DIAGRAM):   jobOffice = -1;
49632     +            jobOther = -1;
MPRINT(EM_DIAGRAM):   jobOther = -1;
49633     +            jobProfEx = -1;
MPRINT(EM_DIAGRAM):   jobProfEx = -1;
49634     +            jobSales = -1;
MPRINT(EM_DIAGRAM):   jobSales = -1;
49635     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
49636     +         end;
MPRINT(EM_DIAGRAM):   end;
49637     +      end;
MPRINT(EM_DIAGRAM):   end;
49638     +   end;
MPRINT(EM_DIAGRAM):   end;
49639     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
49640     +      jobMgr = .;
MPRINT(EM_DIAGRAM):   jobMgr = .;
49641     +      jobOffice = .;
MPRINT(EM_DIAGRAM):   jobOffice = .;
49642     +      jobOther = .;
MPRINT(EM_DIAGRAM):   jobOther = .;
49643     +      jobProfEx = .;
MPRINT(EM_DIAGRAM):   jobProfEx = .;
49644     +      jobSales = .;
MPRINT(EM_DIAGRAM):   jobSales = .;
49645     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
49646     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49647     +   end;
MPRINT(EM_DIAGRAM):   end;
49648     +end;
MPRINT(EM_DIAGRAM):   end;
49649     +
49650     +*** Generate dummy variables for reason ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for reason ;
49651     +drop reasonDebtCon ;
MPRINT(EM_DIAGRAM):   drop reasonDebtCon ;
49652     +if missing( reason ) then do;
MPRINT(EM_DIAGRAM):   if missing( reason ) then do;
49653     +   reasonDebtCon = .;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
49654     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
49655     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49656     +end;
MPRINT(EM_DIAGRAM):   end;
49657     +else do;
MPRINT(EM_DIAGRAM):   else do;
49658     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
49659     +   %DMNORMCP( reason , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(reason,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
49660     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
49661     +      reasonDebtCon = 1;
MPRINT(EM_DIAGRAM):   reasonDebtCon = 1;
49662     +   end;
MPRINT(EM_DIAGRAM):   end;
49663     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
49664     +      reasonDebtCon = -1;
MPRINT(EM_DIAGRAM):   reasonDebtCon = -1;
49665     +   end;
MPRINT(EM_DIAGRAM):   end;
49666     +   else do;
MPRINT(EM_DIAGRAM):   else do;
49667     +      reasonDebtCon = .;
MPRINT(EM_DIAGRAM):   reasonDebtCon = .;
49668     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
49669     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49670     +   end;
MPRINT(EM_DIAGRAM):   end;
49671     +end;
MPRINT(EM_DIAGRAM):   end;
49672     +
49673     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49674     +*** Checking missing input Interval
49675     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
49676     +
49677     +IF NMISS(
49678     +   REP_clage ,
49679     +   REP_clno ,
49680     +   REP_debtinc ,
49681     +   REP_delinq ,
49682     +   REP_derog ,
49683     +   REP_loan ,
49684     +   REP_mortdue ,
49685     +   REP_ninq ,
49686     +   REP_value ,
49687     +   REP_yoj   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( REP_clage , REP_clno , REP_debtinc , REP_delinq , REP_derog , REP_loan , REP_mortdue , REP_ninq , REP_value , REP_yoj ) THEN DO;
49688     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
49689     +
49690     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
49691     +END;
MPRINT(EM_DIAGRAM):   END;
49692     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49693     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
49694     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49695     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
49696     +   S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage ;
MPRINT(EM_DIAGRAM):   S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
49697     +   S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
49698     +   S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 * REP_debtinc
49699     +         ;
MPRINT(EM_DIAGRAM):   S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
49700     +   S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 * REP_delinq ;
MPRINT(EM_DIAGRAM):   S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
49701     +   S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog ;
MPRINT(EM_DIAGRAM):   S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
49702     +   S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
49703     +   S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 * REP_mortdue
49704     +         ;
MPRINT(EM_DIAGRAM):   S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
49705     +   S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
49706     +   S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value ;
MPRINT(EM_DIAGRAM):   S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
49707     +   S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
49708     +END;
MPRINT(EM_DIAGRAM):   END;
49709     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
49710     +   IF MISSING( REP_clage ) THEN S_REP_clage  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clage ) THEN S_REP_clage = . ;
49711     +   ELSE S_REP_clage  =    -2.22677700256924 +     0.01237131443959 * REP_clage
49712     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_clage = -2.22677700256924 + 0.01237131443959 * REP_clage ;
49713     +   IF MISSING( REP_clno ) THEN S_REP_clno  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_clno ) THEN S_REP_clno = . ;
49714     +   ELSE S_REP_clno  =    -2.09120083900206 +     0.09845331494994 * REP_clno ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_clno = -2.09120083900206 + 0.09845331494994 * REP_clno ;
49715     +   IF MISSING( REP_debtinc ) THEN S_REP_debtinc  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_debtinc ) THEN S_REP_debtinc = . ;
49716     +   ELSE S_REP_debtinc  =    -4.49488150643288 +      0.1336303906768 *
49717     +        REP_debtinc ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_debtinc = -4.49488150643288 + 0.1336303906768 * REP_debtinc ;
49718     +   IF MISSING( REP_delinq ) THEN S_REP_delinq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_delinq ) THEN S_REP_delinq = . ;
49719     +   ELSE S_REP_delinq  =    -0.43760021579916 +     1.05734701625827 *
49720     +        REP_delinq ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_delinq = -0.43760021579916 + 1.05734701625827 * REP_delinq ;
49721     +   IF MISSING( REP_derog ) THEN S_REP_derog  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_derog ) THEN S_REP_derog = . ;
49722     +   ELSE S_REP_derog  =    -0.35522020416509 +     1.75384737051562 * REP_derog
49723     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_derog = -0.35522020416509 + 1.75384737051562 * REP_derog ;
49724     +   IF MISSING( REP_loan ) THEN S_REP_loan  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_loan ) THEN S_REP_loan = . ;
49725     +   ELSE S_REP_loan  =    -1.78683141618052 +     0.00009714343259 * REP_loan ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_loan = -1.78683141618052 + 0.00009714343259 * REP_loan ;
49726     +   IF MISSING( REP_mortdue ) THEN S_REP_mortdue  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_mortdue ) THEN S_REP_mortdue = . ;
49727     +   ELSE S_REP_mortdue  =    -1.78622038098681 +     0.00002451193439 *
49728     +        REP_mortdue ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_mortdue = -1.78622038098681 + 0.00002451193439 * REP_mortdue ;
49729     +   IF MISSING( REP_ninq ) THEN S_REP_ninq  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_ninq ) THEN S_REP_ninq = . ;
49730     +   ELSE S_REP_ninq  =    -0.74860118195179 +     0.67778389006928 * REP_ninq ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_ninq = -0.74860118195179 + 0.67778389006928 * REP_ninq ;
49731     +   IF MISSING( REP_value ) THEN S_REP_value  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_value ) THEN S_REP_value = . ;
49732     +   ELSE S_REP_value  =    -1.98311022661579 +     0.00001954597062 * REP_value
49733     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_value = -1.98311022661579 + 0.00001954597062 * REP_value ;
49734     +   IF MISSING( REP_yoj ) THEN S_REP_yoj  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_yoj ) THEN S_REP_yoj = . ;
49735     +   ELSE S_REP_yoj  =    -1.16891375661418 +     0.13208548345713 * REP_yoj ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_yoj = -1.16891375661418 + 0.13208548345713 * REP_yoj ;
49736     +END;
MPRINT(EM_DIAGRAM):   END;
49737     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49738     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
49739     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49740     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49741     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
49742     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49743     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
49744     +   H11  =    -0.62908691581503 * S_REP_clage  +    -0.32501825337077 *
49745     +        S_REP_clno  +    -0.55063341593129 * S_REP_debtinc
49746     +          +     0.53610311600309 * S_REP_delinq  +     0.31760313380137 *
49747     +        S_REP_derog  +     0.76066880320622 * S_REP_loan
49748     +          +    -0.28789263834612 * S_REP_mortdue  +     0.40621809124292 *
49749     +        S_REP_ninq  +     0.13015938731861 * S_REP_value
49750     +          +    -0.32068519738691 * S_REP_yoj ;
MPRINT(EM_DIAGRAM):   H11 = -0.62908691581503 * S_REP_clage + -0.32501825337077 * S_REP_clno + -0.55063341593129 * S_REP_debtinc + 0.53610311600309 * S_REP_delinq + 0.31760313380137 * S_REP_derog + 0.76066880320622 * S_REP_loan + -0.28789263834612 * 
S_REP_mortdue + 0.40621809124292 * S_REP_ninq + 0.13015938731861 * S_REP_value + -0.32068519738691 * S_REP_yoj ;
49751     +   H12  =     1.00990224082991 * S_REP_clage  +     1.00507167206229 *
49752     +        S_REP_clno  +    -1.10662026428082 * S_REP_debtinc
49753     +          +      0.6998948133866 * S_REP_delinq  +    -0.38060034861396 *
49754     +        S_REP_derog  +     0.23802876244022 * S_REP_loan
49755     +          +     1.46223703828863 * S_REP_mortdue  +     0.16221973340289 *
49756     +        S_REP_ninq  +     0.20580076033145 * S_REP_value
49757     +          +    -0.36336973234685 * S_REP_yoj ;
MPRINT(EM_DIAGRAM):   H12 = 1.00990224082991 * S_REP_clage + 1.00507167206229 * S_REP_clno + -1.10662026428082 * S_REP_debtinc + 0.6998948133866 * S_REP_delinq + -0.38060034861396 * S_REP_derog + 0.23802876244022 * S_REP_loan + 1.46223703828863 * 
S_REP_mortdue + 0.16221973340289 * S_REP_ninq + 0.20580076033145 * S_REP_value + -0.36336973234685 * S_REP_yoj ;
49758     +   H13  =    -0.35847141424276 * S_REP_clage  +    -0.05395567288207 *
49759     +        S_REP_clno  +    -1.56713434921689 * S_REP_debtinc
49760     +          +     0.40008753846173 * S_REP_delinq  +    -0.33466356832386 *
49761     +        S_REP_derog  +     1.10371225343116 * S_REP_loan
49762     +          +     0.69224357492781 * S_REP_mortdue  +     0.51037405190683 *
49763     +        S_REP_ninq  +     0.44808525211083 * S_REP_value
49764     +          +    -0.26760253087166 * S_REP_yoj ;
MPRINT(EM_DIAGRAM):   H13 = -0.35847141424276 * S_REP_clage + -0.05395567288207 * S_REP_clno + -1.56713434921689 * S_REP_debtinc + 0.40008753846173 * S_REP_delinq + -0.33466356832386 * S_REP_derog + 1.10371225343116 * S_REP_loan + 0.69224357492781 * 
S_REP_mortdue + 0.51037405190683 * S_REP_ninq + 0.44808525211083 * S_REP_value + -0.26760253087166 * S_REP_yoj ;
49765     +   H14  =    -0.11766819029086 * S_REP_clage  +     0.37675155536102 *
49766     +        S_REP_clno  +    -1.40176529461934 * S_REP_debtinc
49767     +          +    -0.33347887334955 * S_REP_delinq  +    -0.93189382300241 *
49768     +        S_REP_derog  +     0.14773119868753 * S_REP_loan
49769     +          +     0.65553319202921 * S_REP_mortdue  +    -0.51245471898902 *
49770     +        S_REP_ninq  +    -0.09683863673345 * S_REP_value
49771     +          +    -0.13774995720744 * S_REP_yoj ;
MPRINT(EM_DIAGRAM):   H14 = -0.11766819029086 * S_REP_clage + 0.37675155536102 * S_REP_clno + -1.40176529461934 * S_REP_debtinc + -0.33347887334955 * S_REP_delinq + -0.93189382300241 * S_REP_derog + 0.14773119868753 * S_REP_loan + 0.65553319202921 * 
S_REP_mortdue + -0.51245471898902 * S_REP_ninq + -0.09683863673345 * S_REP_value + -0.13774995720744 * S_REP_yoj ;
49772     +   H15  =    -1.45700837806533 * S_REP_clage  +    -0.52984215542527 *
49773     +        S_REP_clno  +     1.15948789842713 * S_REP_debtinc
49774     +          +     0.19011409641161 * S_REP_delinq  +    -2.02616431453247 *
49775     +        S_REP_derog  +     -0.6553627920171 * S_REP_loan
49776     +          +    -0.14566068551477 * S_REP_mortdue  +     0.18837895409628 *
49777     +        S_REP_ninq  +     0.03023882849475 * S_REP_value
49778     +          +     -0.2272136712169 * S_REP_yoj ;
MPRINT(EM_DIAGRAM):   H15 = -1.45700837806533 * S_REP_clage + -0.52984215542527 * S_REP_clno + 1.15948789842713 * S_REP_debtinc + 0.19011409641161 * S_REP_delinq + -2.02616431453247 * S_REP_derog + -0.6553627920171 * S_REP_loan + -0.14566068551477 * 
S_REP_mortdue + 0.18837895409628 * S_REP_ninq + 0.03023882849475 * S_REP_value + -0.2272136712169 * S_REP_yoj ;
49779     +   H11  = H11  +      0.4971837585444 * jobMgr  +     0.99108600553959 *
49780     +        jobOffice  +     -0.0175936835238 * jobOther
49781     +          +    -0.64974941484421 * jobProfEx  +     0.54418567034446 *
49782     +        jobSales  +    -0.14052025055858 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 0.4971837585444 * jobMgr + 0.99108600553959 * jobOffice + -0.0175936835238 * jobOther + -0.64974941484421 * jobProfEx + 0.54418567034446 * jobSales + -0.14052025055858 * reasonDebtCon ;
49783     +   H12  = H12  +    -0.11996971867833 * jobMgr  +    -0.89911075787109 *
49784     +        jobOffice  +     0.94148156880893 * jobOther
49785     +          +     0.00858214852939 * jobProfEx  +     0.94780143279274 *
49786     +        jobSales  +    -0.17986016486928 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.11996971867833 * jobMgr + -0.89911075787109 * jobOffice + 0.94148156880893 * jobOther + 0.00858214852939 * jobProfEx + 0.94780143279274 * jobSales + -0.17986016486928 * reasonDebtCon ;
49787     +   H13  = H13  +     0.42171167869344 * jobMgr  +     1.69024912052118 *
49788     +        jobOffice  +     0.29962164605448 * jobOther
49789     +          +    -1.00495563265965 * jobProfEx  +    -0.29049612384344 *
49790     +        jobSales  +    -0.51335639253942 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H13 = H13 + 0.42171167869344 * jobMgr + 1.69024912052118 * jobOffice + 0.29962164605448 * jobOther + -1.00495563265965 * jobProfEx + -0.29049612384344 * jobSales + -0.51335639253942 * reasonDebtCon ;
49791     +   H14  = H14  +     0.33821409519278 * jobMgr  +    -0.32425917467918 *
49792     +        jobOffice  +     1.25593183968499 * jobOther
49793     +          +    -0.46533260470105 * jobProfEx  +     0.63773311846622 *
49794     +        jobSales  +     0.60689300908065 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.33821409519278 * jobMgr + -0.32425917467918 * jobOffice + 1.25593183968499 * jobOther + -0.46533260470105 * jobProfEx + 0.63773311846622 * jobSales + 0.60689300908065 * reasonDebtCon ;
49795     +   H15  = H15  +    -0.04254576236664 * jobMgr  +    -0.82337471757333 *
49796     +        jobOffice  +     0.26980517777569 * jobOther
49797     +          +    -1.04647618149321 * jobProfEx  +    -0.77143124331498 *
49798     +        jobSales  +     0.60454409349743 * reasonDebtCon ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.04254576236664 * jobMgr + -0.82337471757333 * jobOffice + 0.26980517777569 * jobOther + -1.04647618149321 * jobProfEx + -0.77143124331498 * jobSales + 0.60454409349743 * reasonDebtCon ;
49799     +   H11  =    -0.20425314196788 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.20425314196788 + H11 ;
49800     +   H12  =    -1.18134511087683 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -1.18134511087683 + H12 ;
49801     +   H13  =     1.36835995204487 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 1.36835995204487 + H13 ;
49802     +   H14  =     1.82309032577926 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.82309032577926 + H14 ;
49803     +   H15  =    -1.21360634280242 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -1.21360634280242 + H15 ;
49804     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
49805     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
49806     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
49807     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
49808     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
49809     +END;
MPRINT(EM_DIAGRAM):   END;
49810     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
49811     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
49812     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
49813     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
49814     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
49815     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
49816     +END;
MPRINT(EM_DIAGRAM):   END;
49817     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49818     +*** Writing the Node bad ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bad ;
49819     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49820     +
49821     +*** Generate dummy variables for bad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for bad ;
49822     +drop bad1 bad0 ;
MPRINT(EM_DIAGRAM):   drop bad1 bad0 ;
49823     +label F_bad = 'From: bad' ;
MPRINT(EM_DIAGRAM):   label F_bad = 'From: bad' ;
49824     +length F_bad $ 12;
MPRINT(EM_DIAGRAM):   length F_bad $ 12;
49825     +F_bad = put( bad , BEST12. );
MPRINT(EM_DIAGRAM):   F_bad = put( bad , BEST12. );
49826     +%DMNORMIP( F_bad )
MPRINT(DMNORMIP):   call dmnorm(F_bad,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
49827     +if missing( bad ) then do;
MPRINT(EM_DIAGRAM):   if missing( bad ) then do;
49828     +   bad1 = .;
MPRINT(EM_DIAGRAM):   bad1 = .;
49829     +   bad0 = .;
MPRINT(EM_DIAGRAM):   bad0 = .;
49830     +end;
MPRINT(EM_DIAGRAM):   end;
49831     +else do;
MPRINT(EM_DIAGRAM):   else do;
49832     +   if F_bad = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_bad = '0' then do;
49833     +      bad1 = 0;
MPRINT(EM_DIAGRAM):   bad1 = 0;
49834     +      bad0 = 1;
MPRINT(EM_DIAGRAM):   bad0 = 1;
49835     +   end;
MPRINT(EM_DIAGRAM):   end;
49836     +   else if F_bad = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_bad = '1' then do;
49837     +      bad1 = 1;
MPRINT(EM_DIAGRAM):   bad1 = 1;
49838     +      bad0 = 0;
MPRINT(EM_DIAGRAM):   bad0 = 0;
49839     +   end;
MPRINT(EM_DIAGRAM):   end;
49840     +   else do;
MPRINT(EM_DIAGRAM):   else do;
49841     +      bad1 = .;
MPRINT(EM_DIAGRAM):   bad1 = .;
49842     +      bad0 = .;
MPRINT(EM_DIAGRAM):   bad0 = .;
49843     +   end;
MPRINT(EM_DIAGRAM):   end;
49844     +end;
MPRINT(EM_DIAGRAM):   end;
49845     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
49846     +   P_bad1  =     3.04827710427339 * H11  +     2.87488930274442 * H12
49847     +          +    -3.13322020184657 * H13  +    -2.05104855569441 * H14
49848     +          +     1.75557568090107 * H15 ;
MPRINT(EM_DIAGRAM):   P_bad1 = 3.04827710427339 * H11 + 2.87488930274442 * H12 + -3.13322020184657 * H13 + -2.05104855569441 * H14 + 1.75557568090107 * H15 ;
49849     +   P_bad1  =     1.21289221953622 + P_bad1 ;
MPRINT(EM_DIAGRAM):   P_bad1 = 1.21289221953622 + P_bad1 ;
49850     +   P_bad0  = 0;
MPRINT(EM_DIAGRAM):   P_bad0 = 0;
49851     +   _MAX_ = MAX (P_bad1 , P_bad0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_bad1 , P_bad0 );
49852     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
49853     +   P_bad1  = EXP(P_bad1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_bad1 = EXP(P_bad1 - _MAX_);
49854     +   _SUM_ = _SUM_ + P_bad1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad1 ;
49855     +   P_bad0  = EXP(P_bad0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_bad0 = EXP(P_bad0 - _MAX_);
49856     +   _SUM_ = _SUM_ + P_bad0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_bad0 ;
49857     +   P_bad1  = P_bad1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad1 = P_bad1 / _SUM_;
49858     +   P_bad0  = P_bad0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_bad0 = P_bad0 / _SUM_;
49859     +END;
MPRINT(EM_DIAGRAM):   END;
49860     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
49861     +   P_bad1  = .;
MPRINT(EM_DIAGRAM):   P_bad1 = .;
49862     +   P_bad0  = .;
MPRINT(EM_DIAGRAM):   P_bad0 = .;
49863     +END;
MPRINT(EM_DIAGRAM):   END;
49864     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
49865     +   P_bad1  =     0.08693115519253;
MPRINT(EM_DIAGRAM):   P_bad1 = 0.08693115519253;
49866     +   P_bad0  =     0.91306884480746;
MPRINT(EM_DIAGRAM):   P_bad0 = 0.91306884480746;
49867     +END;
MPRINT(EM_DIAGRAM):   END;
49868     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
49869     +*** Writing the Residuals  of the Node bad ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node bad ;
49870     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
49871     +IF MISSING( bad1 ) THEN R_bad1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( bad1 ) THEN R_bad1 = . ;
49872     +ELSE R_bad1  = bad1  - P_bad1 ;
MPRINT(EM_DIAGRAM):   ELSE R_bad1 = bad1 - P_bad1 ;
49873     +IF MISSING( bad0 ) THEN R_bad0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( bad0 ) THEN R_bad0 = . ;
49874     +ELSE R_bad0  = bad0  - P_bad0 ;
MPRINT(EM_DIAGRAM):   ELSE R_bad0 = bad0 - P_bad0 ;
49875     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49876     +*** Writing the I_bad  AND U_bad ;
MPRINT(EM_DIAGRAM):   *** Writing the I_bad AND U_bad ;
49877     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
49878     +_MAXP_ = P_bad1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad1 ;
49879     +I_bad  = "1           " ;
MPRINT(EM_DIAGRAM):   I_bad = "1           " ;
49880     +U_bad  =                    1;
MPRINT(EM_DIAGRAM):   U_bad = 1;
49881     +IF( _MAXP_ LT P_bad0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_bad0 ) THEN DO;
49882     +   _MAXP_ = P_bad0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_bad0 ;
49883     +   I_bad  = "0           " ;
MPRINT(EM_DIAGRAM):   I_bad = "0           " ;
49884     +   U_bad  =                    0;
MPRINT(EM_DIAGRAM):   U_bad = 0;
49885     +END;
MPRINT(EM_DIAGRAM):   END;
49886     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
49887     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
49888     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
49889     +drop
49890     +H11
49891     +H12
49892     +H13
49893     +H14
49894     +H15
49895     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
49896     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
49897      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL6_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_DIAGRAM):   quit;
49898      quit;
49899      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
49900      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
49901      * Neural6: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural6: Computing metadata for TRAIN data;
49902      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL6_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural6_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural6_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural6_TRAIN out=WORK.M086U0DO noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M086U0DO;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M086U0DO(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M086U0DO;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M086U0DO;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0QZ62_J NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QZ62_J;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QZ62_J;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1EDIADT(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QZ62_J;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QZ62_J;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QZ62_J;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0QZ62_J;
MPRINT(EMADVISECOLUMNS):   set WORK.M0QZ62_J;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural6_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural6";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_BAD1") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("R_BAD1") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("P_BAD0") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("R_BAD0") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("F_BAD") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("I_BAD") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("U_BAD") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural6";
MPRINT(EM_DIAGRAM):   when("BAD") model = "Neural6";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural6: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
50237      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
50238      set EMWS1.Neural6_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMINFO;
50239      where DATA='Neural6' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural6' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
50240      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMINFO.
      WHERE (DATA='Neural6') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

50241      data EMWS1.Neural6_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural6_EMINFO;
50242      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
50243      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
50244      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL6_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
50248      run;
50249      data EMWS1.Neural6_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural6_EMINFO;
50250      set EMWS1.Neural6_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMINFO WORK.MODELTEMP_INFO;
50251      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL6_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL6_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

50252      proc sort data = EMWS1.Neural6_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural6_EMINFO NOTHREADS;
50253      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
50254      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL6_EMINFO.
NOTE: The data set EMWS1.NEURAL6_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

50255      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
50256      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
50257      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

50258      proc sort data = EMWS1.Neural6_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural6_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
50259      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
50260      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL6_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

50261      data EMWS1.Neural6_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural6_EMINFO;
50262      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
50263      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
50264      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL6_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

50265      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
50266      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
50267      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
50268      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

NOTE: View EMWS1.NEURAL6_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.NEURAL6_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
