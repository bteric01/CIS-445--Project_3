NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: Traverser invoked.  MPCONNECT command is !sascmdv -nosyntaxcheck -noasynchio -noobjectserver. 
Traverser: Beginning flow traversal 
15780      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
15781      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
15782      put '<Node Id="Ids" Event="Run" Pid="3196" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Ids" Event="Run" Pid="3196" Gridid=""/>';
15783      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M12,
      Local Host IP addr=fe80::8122:fbb2:9f30:be01%11,
      Peer Hostname Name=COB-IT-M12.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=61850,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 49.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15784      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Ids : Beginning update before running 
* datetime : 05NOV2015:14:08:58 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Ids\PROPERTIES.xml' encoding="UTF-8" NOBOM;
15786      %let _HPDMGRIDHOST=;
15787      %let _HPDMGRIDINSTALLLOC=;
15788      %let _HPDMGRIDDATASERVER=;
15789      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Ids : End update 
* datetime : 05NOV2015:14:08:58 
* 
*------------------------------------------------------------* 
15790      %em_getactionstatus(emlib =EMWS1, nodeid=Ids);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

15791      proc compare base=EMWS1.Ids_emtrainvariable compare=EMWS1.Ids_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.Ids_emtrainvariable compare=EMWS1.Ids_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
15792      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 13 observations read from the data set EMWS1.IDS_EMTRAINVARIABLE.
NOTE: There were 13 observations read from the data set EMWS1.IDS_VARIABLESET.
NOTE: The data set WORK.DIFFDS has 3 observations and 8 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15793      %let diffVar = N;
15794      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
15795      set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
15796      if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
15797      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 3 observations read from the data set WORK.DIFFDS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15798      %let em_Train = Y;
15799      %let em_Score = N;
15800      %let em_Report = N;
15801      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):    
MPRINT(EM_DIAGRAM):  ;

15802      %let emloopmode =;
15803      %let emloopnumber =0;
15804      %let emloopId =Ids;
*------------------------------------------------------------* 
* 
* Ids : Running 
* datetime : 05NOV2015:14:08:58 
* 
*------------------------------------------------------------* 
15805      %let SYSCC =0;
15806      %let EMGROUPMODE =;
15807      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L3Q_X9L5 "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Ids\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L3Q_X9L5 new;
MPRINT(EM_DIAGRAM):   run;
NK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16017      %let emexceptionString =;
16018      %let EMEXCEPTIONSTRING=;
16019      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16020      * UPDATE: GrfExpl;
MPRINT(EM_DIAGRAM):   * UPDATE: GrfExpl;
16021      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16022      %let EM_ACTION = UPDATE;
16023      %let syscc = 0;
16024      %macro main;
16025         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
16026         %include temp;
16027         filename temp;
16028      
16029         %SetProperties;
16030      
16031         %if %upcase(&EM_ACTION) = CREATE %then %do;
16032      
16033             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
16034             %include temp;
16035             filename temp;
16036             %create;
16037         %end;
16038         %else
16039         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16040      
16041             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
16042             %include temp;
16043             filename temp;
16044             %train;
16045      
16046         %end;
16047         %else
16048         %if %upcase(&EM_ACTION) = REPORT %then %do;
16049      
16050             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
16051             %include temp;
16052             filename temp;
16053      
16054             %report;
16055         %end;
16056      
16057      %mend main;
16058      
16059      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
16060     +%macro SetProperties;
16061     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
16062     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
16063     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
16064     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
16065     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
16066     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
16067     +
16068     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16069      *------------------------------------------------------------*;
16070      * End UPDATE: GrfExpl;
16071      *------------------------------------------------------------*;
16072      

16073      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\GrfExpl\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16075      %let _HPDMGRIDHOST=;
16076      %let _HPDMGRIDINSTALLLOC=;
16077      %let _HPDMGRIDDATASERVER=;
16078      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* GrfExpl : End update 
* datetime : 05NOV2015:05:46:47 
* 
*------------------------------------------------------------* 
16079      %em_getactionstatus(emlib =EMWS1, nodeid=GrfExpl);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16080      %let em_filemodtime=;
16081      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16082      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16083      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16084      where fileref eq "#LN00146";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00146";
16085      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16086      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00146';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

16087      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16088      %let em_Train = N;
16089      %let em_Score = N;
16090      %let em_Report = N;
16091      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "GrfExpl" has already run. 
Node "GrfExpl" succeeded. 
16092      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16093      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16094      put '<Node Id="GrfExpl" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="GrfExpl" Event="Complete" Pid="4996" Gridid=""/>';
16095      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "REPL" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16096      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16097      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16098      put '<Node Id="Part" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Run" Pid="4996" Gridid=""/>';
16099      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16100      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Part : Beginning update before running 
* datetime : 05NOV2015:05:46:47 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Part_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.GrfExpl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "DOCUMENT" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Part\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16119      %let _HPDMGRIDHOST=;
16120      %let _HPDMGRIDINSTALLLOC=;
16121      %let _HPDMGRIDDATASERVER=;
16122      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Part : End update 
* datetime : 05NOV2015:05:46:47 
* 
*------------------------------------------------------------* 
16123      %em_getactionstatus(emlib =EMWS1, nodeid=Part);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16124      %let em_Train = N;
16125      %let em_Score = N;
16126      %let em_Report = N;
16127      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Part" has already run. 
Node "Part" succeeded. 
16128      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16129      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16130      put '<Node Id="Part" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Part" Event="Complete" Pid="4996" Gridid=""/>';
16131      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "TRANS" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "NEURAL4" 
Traverser: WaitingNode "NEURAL5" 
Traverser: WaitingNode "NEURAL6" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16132      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16133      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16134      put '<Node Id="Repl" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl" Event="Run" Pid="4996" Gridid=""/>';
16135      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 50.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16136      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Repl : Beginning update before running 
* datetime : 05NOV2015:05:46:48 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Repl_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16362      %let emexceptionString =;
16363      %let EMEXCEPTIONSTRING=;
16364      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16365      * UPDATE: Repl;
MPRINT(EM_DIAGRAM):   * UPDATE: Repl;
16366      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16367      %let EM_ACTION = UPDATE;
16368      %let syscc = 0;
16369      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
16370      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
16371     +
16372     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=);
16373     +
16374     +   filename macFile catalog 'work.emutil.macro.source';
16375     +   %let _METAOBS = 0;
16376     +
16377     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
16378     +                   or (&metadata eq ) %then %do;
16379     +       %put * No metadata data set defined;
16380     +       %goto doend;
16381     +   %end;
16382     +
16383     +   data _null_;
16384     +      length _STRING_ $80;
16385     +      retain _STRING_;
16386     +      set &metadata end=eof;
16387     +      file macFile;
16388     +      %if %nrbquote(&where) ne %then %do;
16389     +          %let whereClause = where (%nrbquote(&where));
16390     +          %unquote(&whereClause);
16391     +      %end;
16392     +      if _N_=1 then do;
16393     +         string = "%"!!"macro &name;";
16394     +         put string;
16395     +      end;
16396     +      if (length(_STRING_) + length(trim(&key))+ 1 < 80) then do;
16397     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
16398     +         if eof then do;
16399     +            put _STRING_;
16400     +            string = "%"!!"mend &name;";
16401     +            put string;
16402     +            %if (&nummacro ne ) %then %do;
16403     +                string = strip(put(_N_, best.));
16404     +                put "%" "global &nummacro;";
16405     +                put "%" "let &nummacro = " string ";";
16406     +                call symput('_METAOBS', string);
16407     +            %end;
16408     +         end;
16409     +      end;
16410     +      else do;
16411     +         put _STRING_;
16412     +         _string_ = TRIM(&key);
16413     +         if eof then do;
16414     +            put _STRING_;
16415     +            string = "%"!!"mend &name;";
16416     +            put string;
16417     +        end;
16418     +      end;
16419     +      if eof then do;
16420     +         string = strip(put(_N_, best.));
16421     +         call symput('_METAOBS', string);
16422     +         %if (&nummacro ne ) %then %do;
16423     +             put "%" "global &nummacro;";
16424     +             put "%" "let &nummacro = " string ";";
16425     +         %end;
16426     +      end;
16427     +   run;
16428     +
16429     +   %doend:
16430     +   %if ^&_METAOBS %then %do;
16431     +       data _null_;
16432     +          file macFile;
16433     +          put "%" "macro &name;";
16434     +          put "%" "mend &name;";
16435     +          %if (&nummacro ne ) %then %do;
16436     +              put "%" "global &nummacro;";
16437     +              put "%" "let &nummacro = 0;";
16438     +          %end;
16439     +      run;
16440     +   %end;
16441     +   %inc macFile;
16442     +   filename macFile;
16443     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
16444      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
16445       %macro main;
16446      
16447         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
16448         %include temp;
16449         filename temp;
16450      
16451         %if %upcase(&EM_ACTION) = CREATE %then %do;
16452      
16453             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
16454             %include temp;
16455             filename temp;
16456             %create;
16457         %end;
16458         %else
16459         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16460      
16461             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
16462             %include temp;
16463             filename temp;
16464             %train;
16465         %end;
16466         %else
16467         %if %upcase(&EM_ACTION) = SCORE %then %do;
16468      
16469             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
16470             %include temp;
16471             filename temp;
16472             %score;
16473         %end;
16474         %if %upcase(&EM_ACTION) = REPORT %then %do;
16475      
16476             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
16477             %include temp;
16478             filename temp;
16479             %report;
16480         %end;
16481         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
16482             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
16483             %include temp;
16484             filename temp;
16485             %em_replace_openoutclass;
16486         %end;
16487         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
16488             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
16489             %include temp;
16490             filename temp;
16491             %em_replace_closeoutclass;
16492         %end;
16493      %mend main;
16494      
16495      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
16496     +%macro SetProperties;
16497     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
16498     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
16499     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
16500     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
16501     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
16502     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
16503     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
16504     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
16505     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
16506     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
16507     +
16508     +%mend SetProperties;
16509     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16510      *------------------------------------------------------------*;
16511      * End UPDATE: Repl;
16512      *------------------------------------------------------------*;
16513      

16514      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Repl\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16516      %let _HPDMGRIDHOST=;
16517      %let _HPDMGRIDINSTALLLOC=;
16518      %let _HPDMGRIDDATASERVER=;
16519      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Repl : End update 
* datetime : 05NOV2015:05:46:48 
* 
*------------------------------------------------------------* 
16520      %em_getactionstatus(emlib =EMWS1, nodeid=Repl);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16521      %let em_filemodtime=;
16522      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16523      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16524      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16525      where fileref eq "#LN00196";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00196";
16526      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16527      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00196';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16528      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
NOTE: View EMWS1.REPL_NEWVALUES.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
16529      %let em_Train = N;
16530      %let em_Score = N;
16531      %let em_Report = N;
16532      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Repl" has already run. 
Node "Repl" succeeded. 
16533      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16534      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16535      put '<Node Id="Repl" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Repl" Event="Complete" Pid="4996" Gridid=""/>';
16536      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 55.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16537      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16538      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16539      put '<Node Id="Neural6" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural6" Event="Run" Pid="4996" Gridid=""/>';
16540      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16541      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural6 : Beginning update before running 
* datetime : 05NOV2015:05:46:49 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural6_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural6\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16561      %let _HPDMGRIDHOST=;
16562      %let _HPDMGRIDINSTALLLOC=;
16563      %let _HPDMGRIDDATASERVER=;
16564      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural6 : End update 
* datetime : 05NOV2015:05:46:49 
* 
*------------------------------------------------------------* 
16565      %em_getactionstatus(emlib =EMWS1, nodeid=Neural6);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16566      %let em_Train = N;
16567      %let em_Score = N;
16568      %let em_Report = N;
16569      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural6" has already run. 
Node "Neural6" succeeded. 
16570      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16571      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16572      put '<Node Id="Neural6" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural6" Event="Complete" Pid="4996" Gridid=""/>';
16573      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
16574      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16575      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16576      put '<Node Id="Neural5" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural5" Event="Run" Pid="4996" Gridid=""/>';
16577      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16578      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural5 : Beginning update before running 
* datetime : 05NOV2015:05:46:50 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural5_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural5\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16598      %let _HPDMGRIDHOST=;
16599      %let _HPDMGRIDINSTALLLOC=;
16600      %let _HPDMGRIDDATASERVER=;
16601      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural5 : End update 
* datetime : 05NOV2015:05:46:50 
* 
*------------------------------------------------------------* 
16602      %em_getactionstatus(emlib =EMWS1, nodeid=Neural5);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16603      %let em_Train = N;
16604      %let em_Score = N;
16605      %let em_Report = N;
16606      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural5" has already run. 
Node "Neural5" succeeded. 
16607      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16608      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16609      put '<Node Id="Neural5" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural5" Event="Complete" Pid="4996" Gridid=""/>';
16610      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
16611      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16612      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16613      put '<Node Id="Neural4" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural4" Event="Run" Pid="4996" Gridid=""/>';
16614      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16615      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural4 : Beginning update before running 
* datetime : 05NOV2015:05:46:51 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural4_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural4\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16635      %let _HPDMGRIDHOST=;
16636      %let _HPDMGRIDINSTALLLOC=;
16637      %let _HPDMGRIDDATASERVER=;
16638      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural4 : End update 
* datetime : 05NOV2015:05:46:51 
* 
*------------------------------------------------------------* 
16639      %em_getactionstatus(emlib =EMWS1, nodeid=Neural4);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16640      %let em_Train = N;
16641      %let em_Score = N;
16642      %let em_Report = N;
16643      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural4" has already run. 
Node "Neural4" succeeded. 
16644      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16645      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16646      put '<Node Id="Neural4" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural4" Event="Complete" Pid="4996" Gridid=""/>';
16647      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "BINNING" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16648      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16649      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16650      put '<Node Id="Trans" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Run" Pid="4996" Gridid=""/>';
16651      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 51.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

16652      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Trans : Beginning update before running 
* datetime : 05NOV2015:05:46:51 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Trans_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\PROPERTIES.xml' encoding="UTF-8" NOBOM;
16672      %let _HPDMGRIDHOST=;
16673      %let _HPDMGRIDINSTALLLOC=;
16674      %let _HPDMGRIDDATASERVER=;
16675      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Trans : End update 
* datetime : 05NOV2015:05:46:51 
* 
*------------------------------------------------------------* 
16676      %em_getactionstatus(emlib =EMWS1, nodeid=Trans);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

16677      %let em_filemodtime=;
16678      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
16679      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16680      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16681      where fileref eq "#LN00285";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00285";
16682      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16683      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00285';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16684      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16685      %let em_filemodtime=;
16686      data _null_;
MPRINT(EM_GETACTIONSTATUS):     data _null_;
16687      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16688      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16689      where fileref eq "#LN00286";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00286";
16690      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16691      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00286';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16692      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16693      %let em_filemodtime=;
16694      data _null_;
MPRINT(EM_GETACTIONSTATUS):     data _null_;
16695      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
16696      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
16697      where fileref eq "#LN00287";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00287";
16698      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
16699      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00287';
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

16700      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
16701      %let em_Train = N;
16702      %let em_Score = N;
16703      %let em_Report = N;
16704      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "Trans" has already run. 
Node "Trans" succeeded. 
16705      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16706      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16707      put '<Node Id="Trans" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Trans" Event="Complete" Pid="4996" Gridid=""/>';
16708      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 56.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "NEURAL" 
Traverser: WaitingNode "NEURAL2" 
Traverser: WaitingNode "NEURAL3" 
Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
16709      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
16710      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
16711      put '<Node Id="BINNING" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="BINNING" Event="Run" Pid="4996" Gridid=""/>';
16712      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

16713      %let emloopmode =;
*------------------------------------------------------------* 
* 
* BINNING : Beginning update before running 
* datetime : 05NOV2015:05:46:52 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.BINNING_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16962      %let emexceptionString =;
16963      %let EMEXCEPTIONSTRING=;
16964      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
16965      * UPDATE: BINNING;
MPRINT(EM_DIAGRAM):   * UPDATE: BINNING;
16966      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
16967      %let EM_ACTION = UPDATE;
16968      %let syscc = 0;
16969      %macro main;
16970      
16971        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
16972        %include temp;
16973        filename temp;
16974      
16975        %setProperties;
16976      
16977        %if %upcase(&EM_ACTION) = CREATE %then %do;
16978          filename temp catalog 'sashelp.emmdfy.binning_create.source';
16979          %include temp;
16980          filename temp;
16981      
16982          %create;
16983        %end;
16984      
16985         %else
16986         %if %upcase(&EM_ACTION) = TRAIN %then %do;
16987      
16988             filename temp catalog 'sashelp.emmdfy.binning_train.source';
16989             %include temp;
16990             filename temp;
16991             %train;
16992         %end;
16993      
16994        %else
16995        %if %upcase(&EM_ACTION) = SCORE %then %do;
16996          filename temp catalog 'sashelp.emmdfy.binning_score.source';
16997          %include temp;
16998          filename temp;
16999      
17000          %score;
17001      
17002        %end;
17003      
17004        %else
17005        %if %upcase(&EM_ACTION) = REPORT %then %do;
17006      
17007             filename temp catalog 'sashelp.emmdfy.binning_report.source';
17008             %include temp;
17009             filename temp;
17010      
17011             %report;
17012         %end;
17013      
17014         %doendm:
17015      %mend main;
17016      
17017      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
17018     +
17019     +%macro SetProperties;
17020     +
17021     +     /* IGN options */
17022     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
17023     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
17024     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
17025     +
17026     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
17027     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
17028     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
17029     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
17030     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
17031     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
17032     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
17033     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
17034     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
17035     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
17036     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
17037     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
17038     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
17039     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
17040     +
17041     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
17042     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
17043     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
17044     +
17045     +
17046     +%mend SetProperties;
17047     +%macro appendfiles(fileref1, fileref2);
17048     +     data _null_;
17049     +       length c $256;
17050     +       fid1=fopen("&fileref1",'A');
17051     +       fid2=fopen("&fileref2",'I');
17052     +       cval = finfo(fid2,'lrecl');
17053     +       put cval= fid1= fid2=;
17054     +       if (fid2 > 0) then
17055     +         do while(fread(fid2)=0);
17056     +           rc = fget(fid2,c,256);
17057     +           _msg_=sysmsg();
17058     +           /* put rc= c= _msg_=; */
17059     +           rc = fput(fid1,strip(c));
17060     +           rc = fwrite(fid1);
17061     +         end;
17062     +         _msg_=sysmsg();
17063     +         put _msg_=;
17064     +       rc = fclose(fid1);
17065     +       rc = fclose(fid2);
17066     +     run;
17067     +%mend appendfiles;
17068     +
17069     +%macro buildOptScoreCode;
17070     +
17071     +    %em_register(key=BINCODE, type=FOLDER);
17072     +
17073     +    filename x catalog 'sashelp.emutil.em_deldir.source';
17074     +    %inc x;
17075     +    filename x;
17076     +    %delDir(folder=%nrbquote(&em_user_bincode));
17077     +
17078     +    data _null_; length rc $200;
17079     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
17080     +    run;
17081     +
17082     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
17083     +
17084     +    %let dsid = %sysfunc(open(class_nosv));
17085     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
17086     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
17087     +
17088     +    %let oldname=;
17089     +    %do %while(^%sysfunc(fetch(&dsid)));
17090     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
17091     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
17092     +
17093     +        %if &name ne &oldname %then %do;
17094     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
17095     +             data _null_;
17096     +                length string $200 flag endflag 8;
17097     +                retain string flag endflag;
17098     +                set class_nosv end=eof;
17099     +                where DISPLAY_VAR ="&name";
17100     +                by _variable_ _group_;
17101     +                file _F1;
17102     +                index = kindex(_variable_, "BIN_");
17103     +                if index gt 0 then do;
17104     +                   if first._variable_ then do;
17105     +                      put ' ';
17106     +                      put "&EM_CODEBAR;";
17107     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
17108     +                      put string;
17109     +                      put "&EM_CODEBAR;";
17110     +
17111     +                      if origLabel ne "" then do;
17112     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
17113     +                            put string;
17114     +                            string = tranwrd(origLabel,"'","''");
17115     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
17116     +                            put string;
17117     +                      end;
17118     +                      else do;
17119     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
17120     +                             put string;
17121     +                      end;
17122     +
17123     +                      put ' ';
17124     +
17125     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17126     +                      put string;
17127     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17128     +                      put string;
17129     +                      put "end;";
17130     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17131     +                      put string;
17132     +                   end;
17133     +                   if first._group_ then do;
17134     +                      flag = 0;
17135     +                      endflag = 1;
17136     +                      if ^first._variable_ then do;
17137     +                         put "else";
17138     +                      end;
17139     +                      if LB ne . then do;
17140     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
17141     +                      end;
17142     +                      else do;
17143     +                         flag = 1;
17144     +                         string = "if";
17145     +                      end;
17146     +                   end;
17147     +                   if last._Group_ then do;
17148     +                      if UB ne . then do;
17149     +                        if flag ne 1 then do;
17150     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
17151     +                        end;
17152     +                        else do;
17153     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
17154     +                        end;
17155     +                      end;
17156     +                      else do;
17157     +                         if flag=1 then do;
17158     +                            string = strip(DISPLAY_VAR) ;
17159     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
17160     +                            endflag=0;
17161     +                            string="";
17162     +                         end;
17163     +                         else do;
17164     +                            string = strip(string)!!" then do;";
17165     +                         end;
17166     +                      end;
17167     +                      put string;
17168     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17169     +                      put string;
17170     +                      if endflag eq 1 then do;
17171     +                        put "end;";
17172     +                      end;
17173     +                   end;
17174     +                   if last._variable_ then do;
17175     +                     string = "end;";
17176     +                     put string;
17177     +                   end;
17178     +
17179     +                end;
17180     +                else do;
17181     +                   _split_value_ = tranwrd(_split_value_,"'","''");
17182     +                   if first._group_ then do;
17183     +                      flag=0;
17184     +                      if ^first._variable_ then
17185     +                         put 'else';
17186     +                      else do;
17187     +                         put ' ';
17188     +                         put "&EM_CODEBAR;";
17189     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
17190     +                         put string;
17191     +                         put "&EM_CODEBAR;";
17192     +
17193     +                         if origLabel ne "" then do;
17194     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
17195     +                               put string;
17196     +                               string = tranwrd(origLabel,"'","''");
17197     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
17198     +                               put string;
17199     +                         end;
17200     +                         else do;
17201     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
17202     +                               put string;
17203     +                         end;
17204     +
17205     +                         put ' ';
17206     +
17207     +                         if format ne '' then do;
17208     +                            if first._variable_ then do;
17209     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
17210     +                               put string;
17211     +                               string = '%dmnormip(_UFormat);';
17212     +                               put string;
17213     +
17214     +                               string ="if MISSING(_UFORMAT) then do;";
17215     +                               put string;
17216     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17217     +                               put string;
17218     +                               put "end;";
17219     +
17220     +                               string="else if NOT MISSING(_UFORMAT) then do;";
17221     +                               put string;
17222     +
17223     +                            end;
17224     +                         end;
17225     +                         else do;
17226     +                            if type = 'N' then do;
17227     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17228     +                              put string;
17229     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17230     +                              put string;
17231     +                              put "end;";
17232     +
17233     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17234     +                              put string;
17235     +                            end;
17236     +                            else if type='C' then do;
17237     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
17238     +                              put string;
17239     +                              string = '%dmnormip(_UFormat);';
17240     +                              put string;
17241     +
17242     +                              string ="if MISSING(_UFORMAT) then do;";
17243     +                              put string;
17244     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17245     +                              put string;
17246     +                              put "end;";
17247     +
17248     +                              string="else if NOT MISSING(_UFORMAT) then do;";
17249     +                              put string;
17250     +                              string = '%dmnormip(_UFormat);';
17251     +                              put string;
17252     +                           end;
17253     +                         end;
17254     +                      end;
17255     +                      if format ne '' OR type='C' then do;
17256     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
17257     +                      end;
17258     +                      else do;
17259     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17260     +                      end;
17261     +                   end;
17262     +                   else do;
17263     +                      if flag ne 1 then do;
17264     +                       if format ne '' OR type='C' then do;
17265     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
17266     +                       end;
17267     +                       else do;
17268     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17269     +                       end;
17270     +                         length = length(tempstring);
17271     +
17272     +                         if length < 195 then do;
17273     +                            string = tempstring;
17274     +                         end;
17275     +                         else do;
17276     +
17277     +                            string = strip(string);
17278     +                            put string;
17279     +                            string = ") then do;";
17280     +                            put string;
17281     +
17282     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17283     +                            put string;
17284     +                            put "end;";
17285     +
17286     +                            put 'else';
17287     +                            if format ne '' OR type='C' then do;
17288     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
17289     +                            end;
17290     +                            else do;
17291     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
17292     +                            end;
17293     +                         end;
17294     +                      end;
17295     +                   end;
17296     +
17297     +                   if last._group_ then do;
17298     +                      string = strip(string);
17299     +                      put string;
17300     +
17301     +                      string = ") then do;";
17302     +                      put string;
17303     +
17304     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17305     +                      put string;
17306     +                      put "end;";
17307     +                   end;
17308     +
17309     +                   if last._variable_ then do;
17310     +                     put "else do;";
17311     +
17312     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17313     +                     put string;
17314     +
17315     +                     put "end;";
17316     +                     put "end;";
17317     +                   end;
17318     +                end;
17319     +             run;
17320     +
17321     +             %let oldname = &name;
17322     +        %end;
17323     +    %end;
17324     +    %let dsid = %sysfunc(close(&dsid));
17325     +
17326     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
17327     +    data _null_;
17328     +       file _F1;
17329     +       put "length _UFormat $200;";
17330     +       put "drop _UFormat;";
17331     +       put "_UFormat='';";
17332     +    run;
17333     +    filename _F1;
17334     +
17335     +   %em_register(key=EMSCOREVAR, type=DATA);
17336     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
17337     +   proc datasets lib=&em_lib nolist;
17338     +      delete &scorevarDs;
17339     +   run;
17340     +   quit;
17341     +
17342     +   %let filrf=mydir;
17343     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
17344     +   %let did=%sysfunc(dopen(&filrf));
17345     +
17346     +   %if &did %then %do;  %PUT  did= &did;
17347     +       %let memcount=%sysfunc(dnum(&did));
17348     +       %if &memcount > 0 %then %do;
17349     +           data &em_user_emscorevar;
17350     +              length Name $32 formula $70 file $200;
17351     +              keep NAME Formula file;
17352     +              formula  = '';
17353     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
17354     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
17355     +               output;
17356     +           %end;
17357     +           %do i=1 %to &memcount;
17358     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
17359     +               %let newvar = %scan(&name, 1, .);
17360     +               %if "&newvar" ne "_ALL_" %then %do;
17361     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
17362     +                   output;
17363     +               %end;
17364     +           %end;
17365     +
17366     +           run;
17367     +       %end;
17368     +       %let did = %sysfunc(dclose(&did));
17369     +  %end;
17370     +
17371     +   %doendu:
17372     +%mend buildOptScoreCode;
17373     +
17374     +
17375     +%macro buildScoreCode(flowCode, publishCode);
17376     +
17377     +
17378     +  filename x "&flowCode";
17379     +
17380     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
17381     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
17382     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
17383     +
17384     +  data temp;
17385     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
17386     +    by display_var _Split_value_;
17387     +     if upcase(_Split_value_) ne 'MISSING';
17388     +   run;
17389     +
17390     +   data temp_missing;
17391     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
17392     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
17393     +     by display_var _Split_value_;
17394     +     if upcase(_Split_value_) eq 'MISSING';
17395     +     keep _variable_ display_var missgrp;
17396     +   run;
17397     +
17398     +   proc sort data=temp_missing; by display_var missgrp; run;
17399     +
17400     +   data temp_missing;
17401     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
17402     +     by display_var missgrp;
17403     +     if ^_a then delete;
17404     +     keep _variable_ display_var missgrp ;
17405     +   run;
17406     +
17407     +   data temp;
17408     +     merge temp temp_missing;
17409     +     by display_var;
17410     +     if display_Var eq '' then delete;
17411     +    run;
17412     +
17413     +    /* pull in wtev values */
17414     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
17415     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
17416     +    proc sort data=temp;  by display_var _group_; run;
17417     +
17418     +   data temp;
17419     +      merge temp tempcoarse(keep=display_var _group_  role) ;
17420     +      by display_var _group_;
17421     +    run;
17422     +
17423     +    data temp;
17424     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
17425     +      by display_var;
17426     +
17427     +      if _group_ = . then delete;
17428     +      if _variable_ = '' then delete;
17429     +    run;
17430     +
17431     +    proc sort data=temp out=class;
17432     +       by _variable_ _group_ LB;
17433     +    run;
17434     +
17435     +    data _null_;
17436     +      file X;
17437     +
17438     +      put "length _UFormat $200;";
17439     +      put "drop _UFormat;";
17440     +      put "_UFormat='';";
17441     +    run;
17442     +
17443     +    data class_nosv;
17444     +      set class;
17445     +      if upcase(role)="INPUT";
17446     +    run;
17447     +
17448     +    data _null_;
17449     +       file X MOD;
17450     +       length string $200 flag endflag 8;
17451     +       retain string flag endflag;
17452     +       set class_nosv end=eof;
17453     +       by _variable_ _group_;
17454     +
17455     +       index = kindex(_variable_, "BIN_");
17456     +       if index gt 0 then do;
17457     +
17458     +         if first._variable_ then do;
17459     +            put ' ';
17460     +            put "&EM_CODEBAR;";
17461     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
17462     +            put string;
17463     +            put "&EM_CODEBAR;";
17464     +
17465     +
17466     +            if origLabel ne "" then do;
17467     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
17468     +              put string;
17469     +              string = tranwrd(origLabel,"'","''");
17470     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
17471     +              put string;
17472     +            end;
17473     +            else do;
17474     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
17475     +             put string;
17476     +            end;
17477     +
17478     +            put ' ';
17479     +
17480     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17481     +            put string;
17482     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17483     +            put string;
17484     +            put "end;";
17485     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17486     +            put string;
17487     +          end;
17488     +           if first._group_ then do;
17489     +              flag = 0;
17490     +              endflag = 1;
17491     +              if ^first._variable_ then do;
17492     +                put "else";
17493     +              end;
17494     +              if LB ne . then do;
17495     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
17496     +              end;
17497     +              else do;
17498     +                 flag = 1;
17499     +                 string = "if";
17500     +              end;
17501     +
17502     +           end;
17503     +           if last._Group_ then do;
17504     +              if UB ne . then do;
17505     +                if flag ne 1 then do;
17506     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
17507     +                end;
17508     +                else do;
17509     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
17510     +                end;
17511     +              end;
17512     +              else do;
17513     +                 if flag=1 then do;
17514     +                   string = strip(DISPLAY_VAR) ;
17515     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
17516     +                   endflag = 0;
17517     +                   string="";
17518     +                 end;
17519     +                 else do;
17520     +                   string = strip(string)!!" then do;";
17521     +                 end;
17522     +              end;
17523     +              put string;
17524     +
17525     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17526     +              put string;
17527     +              if endflag eq 1 then do;
17528     +                put "end;";
17529     +              end;
17530     +           end;
17531     +           if last._variable_ then do;
17532     +             string = "end;";
17533     +             put string;
17534     +           end;
17535     +       end;
17536     +       else do;
17537     +           _split_value_ = tranwrd(_split_value_,"'","''");
17538     +           if first._group_ then do;
17539     +              flag=0;
17540     +              if ^first._variable_ then
17541     +                 put 'else';
17542     +              else do;
17543     +                 put ' ';
17544     +                 put "&EM_CODEBAR;";
17545     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
17546     +                 put string;
17547     +                 put "&EM_CODEBAR;";
17548     +
17549     +                 if origLabel ne "" then do;
17550     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
17551     +                   put string;
17552     +                   string = tranwrd(origLabel,"'","''");
17553     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
17554     +                   put string;
17555     +                 end;
17556     +                 else do;
17557     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
17558     +                   put string;
17559     +                 end;
17560     +
17561     +                 put ' ';
17562     +
17563     +                if format ne '' then do;
17564     +                  if first._variable_ then do;
17565     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
17566     +                    put string;
17567     +                    string = '%dmnormip(_UFormat);';
17568     +                    put string;
17569     +
17570     +                     string ="if MISSING(_UFORMAT) then do;";
17571     +                     put string;
17572     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17573     +                     put string;
17574     +                     put "end;";
17575     +
17576     +                     string="else if NOT MISSING(_UFORMAT) then do;";
17577     +                     put string;
17578     +
17579     +                  end;
17580     +                end;
17581     +                else do;
17582     +                     if type = 'N' then do;
17583     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17584     +                       put string;
17585     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17586     +                       put string;
17587     +                       put "end;";
17588     +
17589     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
17590     +                       put string;
17591     +
17592     +                     end;
17593     +                     else if type='C' then do;
17594     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
17595     +                        put string;
17596     +                        string = '%dmnormip(_UFormat);';
17597     +                        put string;
17598     +
17599     +                        string ="if MISSING(_UFORMAT) then do;";
17600     +                        put string;
17601     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17602     +                        put string;
17603     +                        put "end;";
17604     +
17605     +                        string="else if NOT MISSING(_UFORMAT) then do;";
17606     +                        put string;
17607     +                        string = '%dmnormip(_UFormat);';
17608     +                        put string;
17609     +                    end;
17610     +                end;
17611     +              end;
17612     +              if format ne '' OR type='C' then do;
17613     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
17614     +              end;
17615     +              else do;
17616     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17617     +              end;
17618     +           end;
17619     +           else do;
17620     +              if flag ne 1 then do;
17621     +                if format ne '' OR type='C' then do;
17622     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
17623     +                end;
17624     +                else do;
17625     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17626     +                end;
17627     +                length = klength(tempstring);
17628     +
17629     +                if length < 195 then do;
17630     +                   string = tempstring;
17631     +                end;
17632     +                else do;
17633     +
17634     +                   string = strip(string);
17635     +                   put string;
17636     +                   string = ") then do;";
17637     +                   put string;
17638     +
17639     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17640     +                   put string;
17641     +                   put "end;";
17642     +
17643     +                 /*  string = strip(string)||",'...';"; */
17644     +
17645     +                   put 'else';
17646     +                   if format ne '' OR type='C' then do;
17647     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
17648     +                   end;
17649     +                   else do;
17650     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
17651     +                   end;
17652     +
17653     +
17654     +                end;
17655     +              end;
17656     +           end;
17657     +
17658     +           if last._group_ then do;
17659     +              string = strip(string);
17660     +              put string;
17661     +              string = ") then do;";
17662     +              put string;
17663     +
17664     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
17665     +              put string;
17666     +              put "end;";
17667     +           end;
17668     +
17669     +           if last._variable_ then do;
17670     +             put "else do;";
17671     +
17672     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
17673     +             put string;
17674     +
17675     +             put "end;";
17676     +             put "end;";
17677     +           end;
17678     +         *end;
17679     +       end;
17680     +    run;
17681     +
17682     +    /* generate PublishCode the same as flowscorecode */
17683     +    filename Y "&publishCode";
17684     +
17685     +    /* if publishCode already exists, wipe it out first */
17686     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
17687     +      %let rc = %sysfunc(fdelete(Y));
17688     +    %end;
17689     +
17690     +    %appendfiles(Y, X);
17691     +
17692     +    %if %EM_BINARY_TARGET= %then %do;
17693     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
17694     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
17695     +      %end;
17696     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
17697     +      %let ibn_inttarget_orig = &ibn_inttarget;
17698     +
17699     +      %if %symexist(IGNBinTarget)=0 %then %do;
17700     +         %global ignbintarget ignfreqvar;
17701     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
17702     +         %include temp;
17703     +         filename temp;
17704     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
17705     +
17706     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
17707     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
17708     +         %end;
17709     +      %end;
17710     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
17711     +         proc sql noprint;
17712     +            %if %EM_FREQ ne %then %do;
17713     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
17714     +            %end;
17715     +            %else %do;
17716     +               select mean(&ibn_inttarget)
17717     +            %end;
17718     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
17719     +         quit;
17720     +      %end;
17721     +
17722     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
17723     +      %if &dsid %then %do;
17724     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
17725     +         %let rc=%sysfunc(close(&dsid));
17726     +      %end;
17727     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
17728     +
17729     +      data _null_;
17730     +         file x mod;
17731     +         put ' ';
17732     +
17733     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
17734     +             put "&EM_CODEBAR;";
17735     +             %let note = Mean Cutoff Binary Transformation for Target;
17736     +             put "* &note;";
17737     +             put "&EM_CODEBAR;";
17738     +         %end;
17739     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
17740     +             put "&EM_CODEBAR;";
17741     +             %let note = User-Specified Cutoff Binary Transformation for Target;
17742     +             put "* &note;";
17743     +             put "&EM_CODEBAR;";
17744     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
17745     +         %end;
17746     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
17747     +         put "else do;";
17748     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
17749     +         put "   else &IGNBinTarget=0;";
17750     +         put "end;";
17751     +
17752     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
17753     +      run;
17754     +
17755     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
17756     +
17757     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
17758     +
17759     +         data _null_;
17760     +            file deltaref;
17761     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
17762     +            put "if name='&IGNBinTarget' then do;";
17763     +            put "   role='TARGET';";
17764     +            put "   level='BINARY';";
17765     +            put "end;";
17766     +         run;
17767     +
17768     +      %end;
17769     +      %else %do;
17770     +
17771     +         data _null_;
17772     +            file deltaref;
17773     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
17774     +            put "if name='&IGNBinTarget' then do;";
17775     +            put "   role='REJECTED';";
17776     +            put "   level='BINARY';";
17777     +            put "end;";
17778     +         run;
17779     +      %end;
17780     +
17781     +      filename deltaref;
17782     +
17783     +   %end;
17784     +
17785     +    filename X;
17786     +    filename Y;
17787     +
17788     +    %buildOptScoreCode;
17789     +
17790     +    proc datasets library=work nolist;
17791     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
17792     +    run;
17793     +    quit;
17794     +
17795     +%mend buildScoreCode;
17796     +
17797     +%macro buildMetaCode(DeltaCodeFile=);
17798     +
17799     +   /* set variable roles based on New Role column in the Results table */
17800     +   data _null_;
17801     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
17802     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
17803     +      %if &dsid %then %do;
17804     +        %let obs = %sysfunc(fetch(&dsid));
17805     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
17806     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
17807     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
17808     +
17809     +        %do %while(&obs=0);
17810     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
17811     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
17812     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
17813     +
17814     +          /* retrieve grp and woe names from varmappings dataset */
17815     +          %let choice = _VARIABLE_ = "&inputname";
17816     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
17817     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
17818     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
17819     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
17820     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
17821     +
17822     +          put "if name = '&inputname' then role='REJECTED';";
17823     +          %if "&role" ne "DEFAULT" %then %do;
17824     +            put "if name = '&grpname' then role='&role';";
17825     +          %end;
17826     +          %else %do;
17827     +            put "if name = '&grpname' then role='&oldrole';";
17828     +          %end;
17829     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
17830     +
17831     +          %let obs = %sysfunc(fetch(&dsid));
17832     +        %end;
17833     +      %end;
17834     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17835     +   run;
17836     +
17837     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
17838     +   data _null_;
17839     +      file &DeltaCodeFile MOD;
17840     +
17841     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
17842     +      %if &sdsid %then %do;
17843     +        %let sobs = %sysfunc(fetch(&sdsid));
17844     +        %do %while(&sobs=0);
17845     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
17846     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
17847     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
17848     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
17849     +
17850     +          %let checkgrp = GRP_&checkname;
17851     +          %let lenname = %length(&checkgrp);
17852     +          %if %eval(&lenname-32) > 0 %then %do;
17853     +            %let checkgrp = %substr(&checkgrp, 1, 32);
17854     +          %end;
17855     +
17856     +          %let choice = _VARIABLE_ ="&checkname";
17857     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
17858     +
17859     +          /* if var not found in varmappings, delete variables; */
17860     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
17861     +          %if &vdsid eq 0 %then %do;
17862     +            put 'if name="&displayvar" then delete;';
17863     +            %let dispgrp = GRP_&displayvar;
17864     +            put 'if name="&dispgrp" then delete;';
17865     +          %end;
17866     +
17867     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
17868     +          %let sobs = %sysfunc(fetch(&sdsid));
17869     +        %end;
17870     +      %end;
17871     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
17872     +   run;
17873     +
17874     +%mend buildMetaCode;
17875     +
17876     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
17877     +
17878     +   proc sort data=&coarse out=sortedcoarse nodupkey;
17879     +     by display_var;
17880     +   run;
17881     +   proc sort data=&varmappings nodupkey;
17882     +     by _variable_;
17883     +   run;
17884     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
17885     +     proc sort data=&resultstable; by display_var; run;
17886     +   %end;
17887     +
17888     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
17889     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
17890     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
17891     +        &resultstable (keep = display_var _new_role_ )
17892     +     %end;
17893     +     ;
17894     +     by display_var;
17895     +     length _role_ _new_role_ $10;
17896     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
17897     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
17898     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
17899     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
17900     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
17901     +           ;
17902     +
17903     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
17904     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
17905     +                _role_ = "Rejected";
17906     +             else _role_ = "Input";
17907     +           %end;
17908     +           %else %do;
17909     +             _role_ = "Input";
17910     +           %end;
17911     +           if _new_role_ eq "" then _new_role_="Default";
17912     +      if ^_a then do;
17913     +        _gini_ = 0;
17914     +        _role_ = 'Rejected';
17915     +        if _new_role_ eq "" then _new_role_="Default";
17916     +      end;
17917     +   run;
17918     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
17919     +     by NAME;
17920     +   run;
17921     +   data outlabel;
17922     +     set outlabel;
17923     +     if _label_ = '' then _label_ = _variable_;
17924     +   run;
17925     +   data &resultstable;
17926     +     merge &resultstable(in=_a_) outlabel;
17927     +     by display_Var;
17928     +     if _a_ then output;
17929     +   run;
17930     +   proc datasets library=work nolist;
17931     +     delete sortedcoarse outlabel;
17932     +   run;
17933     +   quit;
17934     +   proc sort data=&resultstable nodupkey;
17935     +      by DESCENDING
17936     +        _gini_ display_Var;
17937     +   run;
17938     +   data &resultstable;
17939     +     set &resultstable;
17940     +
17941     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
17942     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
17943     +     giniOrder = _N_;
17944     +     _gini_ = round(_GINI_, .001);
17945     +     drop _variable_;
17946     +   run;
17947     +
17948     +   proc print data=&resultstable label;
17949     +   run;
17950     +
17951     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
17952     +   data &coarse;
17953     +     set &coarse;
17954     +     length role $10;
17955     +     %let dsid = %sysfunc(open(&resultstable));
17956     +     %if &dsid %then %do;
17957     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
17958     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
17959     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
17960     +
17961     +       %let obs = %sysfunc(fetch(&dsid));
17962     +       %do %while(&obs=0);
17963     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
17964     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
17965     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
17966     +
17967     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
17968     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
17969     +            giniOrder = &order;
17970     +            role = "&role";
17971     +          end;
17972     +
17973     +          %let obs = %sysfunc(fetch(&dsid));
17974     +       %end;
17975     +     %end;
17976     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
17977     +   run;
17978     +
17979     +
17980     +%mend EM_GENERATE_RESULTSTABLE;
17981     +
17982     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
17983     +
17984     +    /* instantiate the zchar macro to be used in adding bin definition */
17985     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
17986     +    %inc _temp;
17987     +    filename _temp;
17988     +
17989     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
17990     +      by _variable_ binFlag _group_ LB;
17991     +    run;
17992     +
17993     +    data tempExport;
17994     +      set sortedFine;
17995     +      by _variable_ binFlag _group_;
17996     +      length _split_value_ $200;
17997     +
17998     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
17999     +      if binFlag = 0 then do;
18000     +        index = kindex(_variable_, "BIN_");
18001     +        if index gt 0 then do;
18002     +          _LEVEL_ = "INTERVAL";
18003     +        end;
18004     +        _Split_value_ = _split_value_;
18005     +        output;
18006     +      end;
18007     +      else do;
18008     +         * if last._group_ then do;
18009     +          index = kindex(_variable_, "BIN_");
18010     +          if index gt 0 then do;
18011     +            _LEVEL_ = "INTERVAL";
18012     +          end;
18013     +          _Split_value_ = %zchar(UB);
18014     +          output;
18015     +         * end;
18016     +      end;
18017     +
18018     +      rename display_Var = _variable_;
18019     +      keep display_var _level_ _group_ _split_value_ binFlag;
18020     +    run;
18021     +
18022     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
18023     +       data &EXPORTGROUPING;
18024     +         set tempexport;
18025     +       run;
18026     +    %end;
18027     +    %else %do;
18028     +       /* determine if EXPORTGROUPING already exists */
18029     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
18030     +         data &EXPORTGROUPING;
18031     +            set &EXPORTGROUPING tempexport;
18032     +         run;
18033     +       %end;
18034     +       %else %do;
18035     +         data &EXPORTGROUPING;
18036     +            set tempexport;
18037     +         run;
18038     +       %end;
18039     +    %end;
18040     +
18041     +    proc datasets lib=work nolist;
18042     +      delete sortedFine tempexport;
18043     +    run;
18044     +    quit;
18045     +
18046     +%mend EM_GENERATE_EXPORTGROUP;
18047     +
18048     +
18049     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18050      *------------------------------------------------------------*;
18051      * End UPDATE: BINNING;
18052      *------------------------------------------------------------*;
18053      

18054      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\BINNING\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18056      %let _HPDMGRIDHOST=;
18057      %let _HPDMGRIDINSTALLLOC=;
18058      %let _HPDMGRIDDATASERVER=;
18059      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* BINNING : End update 
* datetime : 05NOV2015:05:46:52 
* 
*------------------------------------------------------------* 
18060      %em_getactionstatus(emlib =EMWS1, nodeid=BINNING);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18061      %let em_filemodtime=;
18062      data _null_;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
18063      format modate best.;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
18064      set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
18065      where fileref eq "#LN00315";
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN00315";
18066      call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
18067      run;
MPRINT(EM_GETACTIONSTATUS):   run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00315';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18068      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18069      %let em_Train = N;
18070      %let em_Score = N;
18071      %let em_Report = N;
18072      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;

Node "BINNING" has already run. 
Node "BINNING" succeeded. 
18073      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18074      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18075      put '<Node Id="BINNING" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="BINNING" Event="Complete" Pid="4996" Gridid=""/>';
18076      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
traverser_readyNode_note 
18077      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18078      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18079      put '<Node Id="Neural3" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural3" Event="Run" Pid="4996" Gridid=""/>';
18080      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18081      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural3 : Beginning update before running 
* datetime : 05NOV2015:05:46:53 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural3_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural3\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18101      %let _HPDMGRIDHOST=;
18102      %let _HPDMGRIDINSTALLLOC=;
18103      %let _HPDMGRIDDATASERVER=;
18104      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural3 : End update 
* datetime : 05NOV2015:05:46:53 
* 
*------------------------------------------------------------* 
18105      %em_getactionstatus(emlib =EMWS1, nodeid=Neural3);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18106      %let em_Train = N;
18107      %let em_Score = N;
18108      %let em_Report = N;
18109      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural3" has already run. 
Node "Neural3" succeeded. 
18110      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18111      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18112      put '<Node Id="Neural3" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural3" Event="Complete" Pid="4996" Gridid=""/>';
18113      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
traverser_readyNode_note 
18114      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18115      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18116      put '<Node Id="Neural2" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural2" Event="Run" Pid="4996" Gridid=""/>';
18117      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18118      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural2 : Beginning update before running 
* datetime : 05NOV2015:05:46:54 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural2_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural2\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18138      %let _HPDMGRIDHOST=;
18139      %let _HPDMGRIDINSTALLLOC=;
18140      %let _HPDMGRIDDATASERVER=;
18141      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural2 : End update 
* datetime : 05NOV2015:05:46:54 
* 
*------------------------------------------------------------* 
18142      %em_getactionstatus(emlib =EMWS1, nodeid=Neural2);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18143      %let em_Train = N;
18144      %let em_Score = N;
18145      %let em_Report = N;
18146      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural2" has already run. 
Node "Neural2" succeeded. 
18147      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18148      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18149      put '<Node Id="Neural2" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural2" Event="Complete" Pid="4996" Gridid=""/>';
18150      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: WaitingNode "MDLCOMP" 
Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
18151      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18152      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18153      put '<Node Id="Neural" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Run" Pid="4996" Gridid=""/>';
18154      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18155      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Neural : Beginning update before running 
* datetime : 05NOV2015:05:46:55 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Neural_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Neural\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18175      %let _HPDMGRIDHOST=;
18176      %let _HPDMGRIDINSTALLLOC=;
18177      %let _HPDMGRIDDATASERVER=;
18178      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Neural : End update 
* datetime : 05NOV2015:05:46:55 
* 
*------------------------------------------------------------* 
18179      %em_getactionstatus(emlib =EMWS1, nodeid=Neural);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18180      %let em_Train = N;
18181      %let em_Score = N;
18182      %let em_Report = N;
18183      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "Neural" has already run. 
Node "Neural" succeeded. 
18184      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18185      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18186      put '<Node Id="Neural" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Neural" Event="Complete" Pid="4996" Gridid=""/>';
18187      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 57.
      The maximum record length was 57.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Traverser: WaitingNode "REPORT" 
traverser_readyNode_note 
18188      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18189      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18190      put '<Node Id="MdlComp" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Run" Pid="4996" Gridid=""/>';
18191      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 53.
      The maximum record length was 53.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18192      %let emloopmode =;
*------------------------------------------------------------* 
* 
* MdlComp : Beginning update before running 
* datetime : 05NOV2015:05:46:55 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.MdlComp_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT export needupdate;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_exportSet EMWS1.Neural2_exportSet EMWS1.Neural3_exportSet EMWS1.Neural4_exportSet EMWS1.Neural5_exportSet EMWS1.Neural6_exportSet ;
MPRINT(EM_DIAGRAM):   where EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   drop export needupdate;
MPRINT(EM_DIAGRAM):   port = upcase(trim(NODELABEL)!!'_'!!left(NODEPORT));
MPRINT(EM_DIAGRAM):   if port = upcase("NEURAL_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL2_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL3_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL4_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL5_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_TRAIN") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_VALIDATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else if port = upcase("NEURAL6_ESTIMATE") then USE="Y";
MPRINT(EM_DIAGRAM):   else USE="Y";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0NR47BK as select * from WORK.M2H0I6KS order by PORT;
MPRINT(EM_DIAGRAM):   create view work._comp0NR47BK as select * from WORK.M0ULPLYG order by PORT;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0NR47BK compare=work._comp0NR47BK out=WORK._DIFF3QC1N9C noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id PORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\MdlComp\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18255      %let _HPDMGRIDHOST=;
18256      %let _HPDMGRIDINSTALLLOC=;
18257      %let _HPDMGRIDDATASERVER=;
18258      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* MdlComp : End update 
* datetime : 05NOV2015:05:46:56 
* 
*------------------------------------------------------------* 
18259      %em_getactionstatus(emlib =EMWS1, nodeid=MdlComp);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18260      %let em_Train = N;
18261      %let em_Score = N;
18262      %let em_Report = N;
18263      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

Node "MdlComp" has already run. 
Node "MdlComp" succeeded. 
18264      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18265      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18266      put '<Node Id="MdlComp" Event="Complete" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="MdlComp" Event="Complete" Pid="4996" Gridid=""/>';
18267      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 58.
      The maximum record length was 58.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

traverser_readyNode_note 
18268      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18269      file emwipmsg;
MPRINT(EM_DIAGRAM):   file emwipmsg;
18270      put '<Node Id="Report" Event="Run" Pid="4996" Gridid=""/>';
MPRINT(EM_DIAGRAM):   put '<Node Id="Report" Event="Run" Pid="4996" Gridid=""/>';
18271      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file EMWIPMSG is:
      Local Host Name=COB-IT-M15,
      Local Host IP addr=fe80::44df:70dd:5d01:710a%11,
      Peer Hostname Name=COB-IT-M15.ad.louisville.edu,
      Peer IP addr=127.0.0.1,Peer Name=N/A,
      Peer Portno=60499,Lrecl=32767,Recfm=Variable

NOTE: 1 record was written to the file EMWIPMSG.
      The minimum record length was 52.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18272      %let emloopmode =;
*------------------------------------------------------------* 
* 
* Report : Beginning update before running 
* datetime : 05NOV2015:05:46:56 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):     data WORK.Report_FILTERSET;
MPRINT(EM_DIAGRAM):   length PORT $32 USE $1;
MPRINT(EM_DIAGRAM):   DROP DELTACODE APPLYDELTA APPLYSCORE IMPORTPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_exportSet ;
MPRINT(EM_DIAGRAM):   PORT = '';
MPRINT(EM_DIAGRAM):   USE = '';
MPRINT(EM_DIAGRAM):   where role in( "RAW" "TRAIN" "VALIDATE" "TEST" "SCORE" "TRANSACTION" "DOCUMENT" "RULES" "REPORTFIT" "RANK" "SCOREDIST" "ESTIMATE" "TREE" "CLUSSTAT" "CLUSMEAN" "VARMAP" ) and EXPORT = 'Y' ;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
18303      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18304      set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
18305      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18306      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
18307      set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_CMeta_TRAIN (obs=1);
18308      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18309      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
18310      * Report: Update Variables Set;
MPRINT(EM_DIAGRAM):   * Report: Update Variables Set;
18311      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

18312      data EMWS1.Report_VariableSet;
MPRINT(EM_DIAGRAM):    data EMWS1.Report_VariableSet;
18313      length USE $1;
MPRINT(EM_DIAGRAM):   length USE $1;
18314      label USE = "Use";
MPRINT(EM_DIAGRAM):   label USE = "Use";
18315      length REPORT $1;
MPRINT(EM_DIAGRAM):   length REPORT $1;
18316      label REPORT = "Report";
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
18317      set EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_CMeta_TRAIN;
18318      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable USE is uninitialized.
NOTE: There were 33 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
NOTE: The data set EMWS1.REPORT_VARIABLESET has 33 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

18319      * Report: End of Update Variables Set;
MPRINT(EM_DIAGRAM):    * Report: End of Update Variables Set;
18320      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
18531      %let emexceptionString =;
18532      %let EMEXCEPTIONSTRING=;
18533      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
18534      * UPDATE: Report;
MPRINT(EM_DIAGRAM):   * UPDATE: Report;
18535      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18536      %let EM_ACTION = UPDATE;
18537      %let syscc = 0;
18538      %macro main;
18539      
18540        filename temp catalog 'sashelp.emutil.reporter_macros.source';
18541        %include temp;
18542        filename temp;
18543      
18544        %setProperties;
18545      
18546        %if %upcase(&EM_ACTION) = CREATE %then %do;
18547          filename temp catalog 'sashelp.emutil.reporter_create.source';
18548          %include temp;
18549          filename temp;
18550      
18551          %create;
18552        %end;
18553      
18554         %else
18555         %if %upcase(&EM_ACTION) = TRAIN %then %do;
18556      
18557             filename temp catalog 'sashelp.emutil.reporter_train.source';
18558             %include temp;
18559             filename temp;
18560             %train;
18561         %end;
18562      
18563         %doendm:
18564      %mend main;
18565      
18566      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
18569     +%macro SetProperties;
18571     +     /* reporting options */
18572     +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
18573     +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
18574     +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
18575     +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
18577     +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
18578     +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
18579     +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
18580     +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
18581     +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
18582     +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
18583     +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
18585     +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
18587     +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
18588     +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
18589     +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
18590     +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
18592     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End UPDATE: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
18593      *------------------------------------------------------------*;
18594      * End UPDATE: Report;
18595      *------------------------------------------------------------*;
18596      

18597      %em_delMacro;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\PROPERTIES.xml' encoding="UTF-8" NOBOM;
18599      %let _HPDMGRIDHOST=;
18600      %let _HPDMGRIDINSTALLLOC=;
18601      %let _HPDMGRIDDATASERVER=;
18602      %hpdm_gridSetOPtions;
MPRINT(EM_DIAGRAM):   
MPRINT(HPDM_GRIDSETOPTIONS):   data _null_;
MPRINT(HPDM_GRIDSETOPTIONS):   length optionString string $2000;
MPRINT(HPDM_GRIDSETOPTIONS):   optionString = reverse(getoption('SET'));
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDHOST'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   host = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDHOST', strip(host));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDINSTALLLOC'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   install = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDINSTALLLOC', strip(install));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   index = index(optionString, reverse('GRIDDATASERVER'));
MPRINT(HPDM_GRIDSETOPTIONS):   if index then do;
MPRINT(HPDM_GRIDSETOPTIONS):   string = reverse(substr(optionString, 1, index-4));
MPRINT(HPDM_GRIDSETOPTIONS):   server = '"'!!strip(tranwrd(scan(string, 1, ']'), '"', ''))!!'"';
MPRINT(HPDM_GRIDSETOPTIONS):   call symput('_HPDMGRIDDATASERVER', strip(server));
MPRINT(HPDM_GRIDSETOPTIONS):   end;
MPRINT(HPDM_GRIDSETOPTIONS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):  ;

*------------------------------------------------------------* 
* 
* Report : End update 
* datetime : 05NOV2015:05:46:57 
* 
*------------------------------------------------------------* 
18603      %em_getactionstatus(emlib =EMWS1, nodeid=Report);
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;

18604      %let em_Train = Y;
18605      %let em_Report = Y;
18606      %let em_Score = Y;
18607      %let em_Run = Y;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;

18608      %let emloopmode =;
18609      %let emloopnumber =0;
18610      %let emloopId =Report;
*------------------------------------------------------------* 
* 
* Report : Running 
* datetime : 05NOV2015:05:46:57 
* 
*------------------------------------------------------------* 
18611      %let SYSCC =0;
18612      %let EMGROUPMODE =;
18613      %let EMGROUPID =;
MPRINT(EM_DIAGRAM):      filename temp catalog 'sashelp.emutil.em_vardist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_classdist.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checksetinit.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_checkerror.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odsliston.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_odslistoff.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_getvarname.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    filename L0NF4UNY "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Report\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto log=L0NF4UNY new;
MPRINT(EM_DIAGRAM):   run;
