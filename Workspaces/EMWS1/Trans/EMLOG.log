*------------------------------------------------------------*
User:                bteric01
Date:                November 05, 2015
Time:                14:10:34
Site:                70080760
Platform:            X64_7PRO
Maintenance Release: 9.04.01M1P120413
EM Version:          13.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:10:27" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 05, 2015
Time:                14:10:27
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_4CN4J
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMTRAIN.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_4CN4J new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMLOG.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:10:27" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080760";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMTRAIN.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMSCORE.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMREPORT.log"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMOUTPUT.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:10:27" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                bteric01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMTRAIN.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMSCORE.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMREPORT.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMRUNSTATUS.xm
l' encoding="UTF-8" NOBOM;
96165      proc freq data=EMWS1.Trans_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Trans_VariableSet noprint;
96166      table ROLE*LEVEL/out=WORK.TransMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TransMETA;
96167      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TRANS_VARIABLESET.
NOTE: The data set WORK.TRANSMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
96168      proc print data=WORK.TransMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TransMETA label noobs;
96169      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
96170      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
96170    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
96170    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
96171      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
96172      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
96173      run;
 
NOTE: There were 4 observations read from the data set WORK.TRANSMETA.
NOTE: The PROCEDURE PRINT printed page 47.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
96174      title10;
MPRINT(EM_DIAGRAM):   title10;
96175      data WORK.M0_A6UO6;
MPRINT(EM_DIAGRAM):    data WORK.M0_A6UO6;
96176      set WORK.M0_A6UO6;
MPRINT(EM_DIAGRAM):   set WORK.M0_A6UO6;
96177      if (METHOD='NONE' and ROLE ne 'FREQ') or (role = 'REJECTED' and METHOD = 'DEFAULT')
96177    ! then delete;
MPRINT(EM_DIAGRAM):   if (METHOD='NONE' and ROLE ne 'FREQ') or (role = 'REJECTED' and METHOD =
'DEFAULT') then delete;
96178      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.M0_A6UO6.
NOTE: The data set WORK.M0_A6UO6 has 14 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS1.Repl_TRAIN;
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
96243      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
96244      * Trans: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Trans: Computing Summary Statistics;
96245      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96246      data WORK.M0WUD_JR;
MPRINT(EM_DIAGRAM):   data WORK.M0WUD_JR;
96247      set WORK.M0WUD_JR;
MPRINT(EM_DIAGRAM):   set WORK.M0WUD_JR;
96248      if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
96249      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.M0WUD_JR.
NOTE: The data set WORK.M0WUD_JR has 14 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
96250      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
96251      * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
96252      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
96253      %macro DMDBClass;
96254          bad(DESC) job(ASC) reason(ASC)
96255      %mend DMDBClass;
96256      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
96257      * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
96258      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
96259      %macro DMDBVar;
96260          REP_clage REP_clno REP_debtinc REP_delinq REP_derog REP_loan REP_mortdue
96261         REP_ninq REP_value REP_yoj yoj
96262      %mend DMDBVar;
96263      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96264      * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
96265      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96266      proc dmdb batch data=EMWS1.Repl_TRAIN
96267      dmdbcat=WORK.EM_DMDB
96268      classout=WORK.Transclassout
96269      maxlevel = 513
96270      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Repl_TRAIN dmdbcat=WORK.EM_DMDB
classout=WORK.Transclassout maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
96271      class %DMDBClass;
MPRINT(DMDBCLASS):   bad(DESC) job(ASC) reason(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
96272      var %DMDBVar;
MPRINT(DMDBVAR):   REP_clage REP_clno REP_debtinc REP_delinq REP_derog REP_loan REP_mortdue
REP_ninq REP_value REP_yoj yoj
MPRINT(EM_DIAGRAM):  ;
96273      target
96274      bad
96275      ;
MPRINT(EM_DIAGRAM):   target bad ;
96276      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: The data set WORK.TRANSCLASSOUT has 12 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
96277      quit;
96278      *--- end code ---*;
 
96279      data WORK.TransINTERVALMETA;
MPRINT(EM_DIAGRAM):    data WORK.TransINTERVALMETA;
96280      set WORK.M0_A6UO6;
MPRINT(EM_DIAGRAM):   set WORK.M0_A6UO6;
96281      if LEVEL ne 'INTERVAL' then delete;
MPRINT(EM_DIAGRAM):   if LEVEL ne 'INTERVAL' then delete;
96282      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.M0_A6UO6.
NOTE: The data set WORK.TRANSINTERVALMETA has 11 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
96283      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96284      * Trans: Determining Variables to Scale;
MPRINT(EM_DIAGRAM):   * Trans: Determining Variables to Scale;
96285      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96286      data WORK.M10WMX8U;
MPRINT(EM_DIAGRAM):   data WORK.M10WMX8U;
96287      set WORK.M10WMX8U;
MPRINT(EM_DIAGRAM):   set WORK.M10WMX8U;
96288      where (TYPE="N" and (METHOD in("MAX_NORM", "MAX_CORR", "EQUALIZE", "OP_MAX_NORM",
96288    ! "OP_EQUALIZE"))) or (ROLE eq "FREQ");
MPRINT(EM_DIAGRAM):   where (TYPE="N" and (METHOD in("MAX_NORM", "MAX_CORR", "EQUALIZE",
"OP_MAX_NORM", "OP_EQUALIZE"))) or (ROLE eq "FREQ");
96289      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.M10WMX8U.
      WHERE ((TYPE='N') and METHOD in ('EQUALIZE', 'MAX_CORR', 'MAX_NORM', 'OP_EQUALIZE',
      'OP_MAX_NORM')) or (ROLE='FREQ');
NOTE: The data set WORK.M10WMX8U has 0 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.57 seconds
      cpu time            0.48 seconds
 
*------------------------------------------------------------*
*  Trans: Creating EMWS1.Trans_RESULT
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):      data EMWS1.Trans_RESULT;
MPRINT(EM_DIAGRAM):   length NAME NEWVAR $32 LEVEL $10 POWER 8 FORMULA $70 LABEL $44 TERM $200;
MPRINT(EM_DIAGRAM):   NAME = "REP_clage";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_clage";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_clage  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Age of oldest trade line in months';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_clno";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_clno";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_clno  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Number of trade (credit) lines';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_debtinc";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_debtinc";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_debtinc  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Debt to income ratio';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_delinq";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_delinq";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_delinq  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Number of delinquent trade lines';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_derog";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_derog";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_derog  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Number of major derogatory reports';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_loan";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_loan";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_loan  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Amount of current loan request';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_mortdue";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_mortdue";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_mortdue  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Amount due on existing mortgage';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_ninq";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_ninq";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_ninq  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Number of recent credit inquiries';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_value";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_value";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_value  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Value of current property';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "REP_yoj";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_REP_yoj";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(REP_yoj  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Replacement: Years on current job';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   NAME = "yoj";
MPRINT(EM_DIAGRAM):   NEWVAR = "LOG_yoj";
MPRINT(EM_DIAGRAM):   POWER = 0;
MPRINT(EM_DIAGRAM):   FORMULA = "log(yoj  + 1)";
MPRINT(EM_DIAGRAM):   LABEL = 'Transformed: Years on current job';
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   TYPE = "N";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_RESULT NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M0_A6UO6
out=WORK._TRANSRESLT(RENAME=(LEVEL=INPUTLEVEL TYPE=INPUTTYPE) KEEP=NAME ROLE LEVEL TYPE)
NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Trans_RESULT(RENAME=(NAME=INPUTNAME NEWVAR=NAME));
MPRINT(EM_DIAGRAM):   merge EMWS1.Trans_RESULT(in=a) WORK._TRANSRESLT;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if a then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This
         might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Trans_RESULT;
MPRINT(EM_DIAGRAM):   label INPUTNAME = "Input Name" NAME = "Output Name" POWER = "Power"
FORMULA = "Formula" ROLE = "rpt_role_vlabel" INPUTLEVEL = "Input Level" LEVEL = "Output Level"
INPUTTYPE = "Input Type" TYPE = "Output Type";
MPRINT(EM_DIAGRAM):   run;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
96400      data EMWS1.Trans_RESULT;
MPRINT(EM_DIAGRAM):   data EMWS1.Trans_RESULT;
96401      length NAME $32 FORMULA $70 POWER 8 ROLE $32 LEVEL $10 INPUTNAME $32 INPUTTYPE $1
96401    ! LABEL $44;
MPRINT(EM_DIAGRAM):   length NAME $32 FORMULA $70 POWER 8 ROLE $32 LEVEL $10 INPUTNAME $32
INPUTTYPE $1 LABEL $44;
96402      label INPUTNAME ='Input Name' NAME='Name' POWER='Power' FORMULA='Formula'
96402    ! ROLE='Role' INPUTLEVEL='Input Level' LEVEL='Level' INPUTTYPE='Input Type'
96402    ! TYPE='Type';
MPRINT(EM_DIAGRAM):   label INPUTNAME = 'Input Name' NAME= 'Name' POWER= 'Power' FORMULA=
'Formula' ROLE= 'Role' INPUTLEVEL= 'Input Level' LEVEL= 'Level' INPUTTYPE= 'Input Type' TYPE=
'Type';
96403      set EMWS1.Trans_RESULT;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_RESULT;
96404      if INPUTNAME = '' then INPUTNAME = "Mixture of variables";
MPRINT(EM_DIAGRAM):   if INPUTNAME = '' then INPUTNAME = "Mixture of variables";
96405      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.TRANS_RESULT.
NOTE: The data set EMWS1.TRANS_RESULT has 11 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
96406      data WORK.M0O23KGT;
MPRINT(EM_DIAGRAM):    data WORK.M0O23KGT;
96407      set WORK.M0O23KGT;
MPRINT(EM_DIAGRAM):   set WORK.M0O23KGT;
96408      if ROLE='REJECTED' then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   if ROLE='REJECTED' then ROLE='INPUT';
96409      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.M0O23KGT.
NOTE: The data set WORK.M0O23KGT has 11 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
*  Trans: Computing summary statistics for transformed variables
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    data WORK.Trans_TRANSFORM / view=WORK.Trans_TRANSFORM;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_TRAIN;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clage , log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_clage = 'Transformed: Replacement: Age of oldest trade
line in months';
MPRINT(EM_DIAGRAM):   if REP_clage eq . then LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_clage + 1 > 0 then LOG_REP_clage = log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clno , log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_clno = 'Transformed: Replacement: Number of trade (credit)
lines';
MPRINT(EM_DIAGRAM):   if REP_clno eq . then LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_clno + 1 > 0 then LOG_REP_clno = log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_debtinc , log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_debtinc = 'Transformed: Replacement: Debt to income ratio';
MPRINT(EM_DIAGRAM):   if REP_debtinc eq . then LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_debtinc + 1 > 0 then LOG_REP_debtinc = log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_delinq , log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_delinq = 'Transformed: Replacement: Number of delinquent
trade lines';
MPRINT(EM_DIAGRAM):   if REP_delinq eq . then LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_delinq + 1 > 0 then LOG_REP_delinq = log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_derog , log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_derog = 'Transformed: Replacement: Number of major
derogatory reports';
MPRINT(EM_DIAGRAM):   if REP_derog eq . then LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_derog + 1 > 0 then LOG_REP_derog = log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_loan , log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_loan = 'Transformed: Replacement: Amount of current loan
request';
MPRINT(EM_DIAGRAM):   if REP_loan eq . then LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_loan + 1 > 0 then LOG_REP_loan = log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_mortdue , log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_mortdue = 'Transformed: Replacement: Amount due on
existing mortgage';
MPRINT(EM_DIAGRAM):   if REP_mortdue eq . then LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_mortdue + 1 > 0 then LOG_REP_mortdue = log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_ninq , log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_ninq = 'Transformed: Replacement: Number of recent credit
inquiries';
MPRINT(EM_DIAGRAM):   if REP_ninq eq . then LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_ninq + 1 > 0 then LOG_REP_ninq = log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_value , log(REP_value + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_value = 'Transformed: Replacement: Value of current
property';
MPRINT(EM_DIAGRAM):   if REP_value eq . then LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_value + 1 > 0 then LOG_REP_value = log(REP_value + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_yoj , log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_REP_yoj = 'Transformed: Replacement: Years on current job';
MPRINT(EM_DIAGRAM):   if REP_yoj eq . then LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if REP_yoj + 1 > 0 then LOG_REP_yoj = log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   else LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: yoj , log(yoj + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_yoj = 'Transformed: Years on current job';
MPRINT(EM_DIAGRAM):   if yoj eq . then LOG_yoj = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if yoj + 1 > 0 then LOG_yoj = log(yoj + 1);
MPRINT(EM_DIAGRAM):   else LOG_yoj = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.Trans_TRANSFORM dmdbcat=WORK.EM_DMDB maxlevel
= 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   LOG_REP_clage LOG_REP_clno LOG_REP_debtinc LOG_REP_delinq LOG_REP_derog
LOG_REP_loan LOG_REP_mortdue LOG_REP_ninq LOG_REP_value LOG_REP_yoj LOG_yoj
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
MPRINT(EM_DIAGRAM):    data WORK.Trans_TEMP;
MPRINT(EM_DIAGRAM):   length SOURCE $6 NAME $32;
MPRINT(EM_DIAGRAM):   label SOURCE = "Source" NAME = "Variable Name" NLEVEL = "Number of
Levels" NMISS = "Missing" MIN = "Minimum" MAX = "Maximum" MEAN = "Mean" STD = "Standard
Deviation" SKEWNESS = "Skewness" KURTOSIS = "Kurtosis";
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_clage";
MPRINT(EM_DIAGRAM):   NMISS = 159;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 0;
MPRINT(EM_DIAGRAM):   MAX = 6.09602201480659;
MPRINT(EM_DIAGRAM):   MEAN = 5.08031649207054;
MPRINT(EM_DIAGRAM):   STD = 0.53992882032277;
MPRINT(EM_DIAGRAM):   SKEWNESS = -1.77596204068915;
MPRINT(EM_DIAGRAM):   KURTOSIS = 9.66144529799502;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_clno";
MPRINT(EM_DIAGRAM):   NMISS = 117;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 0;
MPRINT(EM_DIAGRAM):   MAX = 3.97267646089947;
MPRINT(EM_DIAGRAM):   MEAN = 2.97327871885609;
MPRINT(EM_DIAGRAM):   STD = 0.57597379170017;
MPRINT(EM_DIAGRAM):   SKEWNESS = -1.83913117000406;
MPRINT(EM_DIAGRAM):   KURTOSIS = 6.87153344537087;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_debtinc";
MPRINT(EM_DIAGRAM):   NMISS = 615;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 2.04988663216609;
MPRINT(EM_DIAGRAM):   MAX = 4.12401477516662;
MPRINT(EM_DIAGRAM):   MEAN = 3.51636219658896;
MPRINT(EM_DIAGRAM):   STD = 0.25630294089113;
MPRINT(EM_DIAGRAM):   SKEWNESS = -1.89051001503498;
MPRINT(EM_DIAGRAM):   KURTOSIS = 6.88101393583313;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_delinq";
MPRINT(EM_DIAGRAM):   NMISS = 292;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 0;
MPRINT(EM_DIAGRAM):   MAX = 1.62492710483919;
MPRINT(EM_DIAGRAM):   MEAN = 0.21724196986086;
MPRINT(EM_DIAGRAM):   STD = 0.44387421477117;
MPRINT(EM_DIAGRAM):   SKEWNESS = 1.90778557026351;
MPRINT(EM_DIAGRAM):   KURTOSIS = 2.432049978254;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_derog";
MPRINT(EM_DIAGRAM):   NMISS = 352;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 0;
MPRINT(EM_DIAGRAM):   MAX = 1.30266643086797;
MPRINT(EM_DIAGRAM):   MEAN = 0.11895867339535;
MPRINT(EM_DIAGRAM):   STD = 0.3163537531489;
MPRINT(EM_DIAGRAM):   SKEWNESS = 2.53828632114408;
MPRINT(EM_DIAGRAM):   KURTOSIS = 5.17594336078051;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_loan";
MPRINT(EM_DIAGRAM):   NMISS = 0;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 7.00397413672268;
MPRINT(EM_DIAGRAM):   MAX = 10.8840216672175;
MPRINT(EM_DIAGRAM):   MEAN = 9.66886897904097;
MPRINT(EM_DIAGRAM):   STD = 0.56739710303053;
MPRINT(EM_DIAGRAM):   SKEWNESS = -0.40557095599206;
MPRINT(EM_DIAGRAM):   KURTOSIS = 0.70102708092545;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_mortdue";
MPRINT(EM_DIAGRAM):   NMISS = 252;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 7.63240112660145;
MPRINT(EM_DIAGRAM):   MAX = 12.228861152608;
MPRINT(EM_DIAGRAM):   MEAN = 11.0241418618343;
MPRINT(EM_DIAGRAM):   STD = 0.63638611805217;
MPRINT(EM_DIAGRAM):   SKEWNESS = -0.93101723186006;
MPRINT(EM_DIAGRAM):   KURTOSIS = 1.81157515284363;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_ninq";
MPRINT(EM_DIAGRAM):   NMISS = 259;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 0;
MPRINT(EM_DIAGRAM):   MAX = 1.98437474663128;
MPRINT(EM_DIAGRAM):   MEAN = 0.55020442065582;
MPRINT(EM_DIAGRAM):   STD = 0.59516499706343;
MPRINT(EM_DIAGRAM):   SKEWNESS = 0.6335026913345;
MPRINT(EM_DIAGRAM):   KURTOSIS = -0.74272402853339;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_value";
MPRINT(EM_DIAGRAM):   NMISS = 54;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 8.98732181285012;
MPRINT(EM_DIAGRAM):   MAX = 12.5296298582498;
MPRINT(EM_DIAGRAM):   MEAN = 11.4095920841975;
MPRINT(EM_DIAGRAM):   STD = 0.49021841908437;
MPRINT(EM_DIAGRAM):   SKEWNESS = -0.15160668127771;
MPRINT(EM_DIAGRAM):   KURTOSIS = 0.47295278059592;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_REP_yoj";
MPRINT(EM_DIAGRAM):   NMISS = 250;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 0;
MPRINT(EM_DIAGRAM):   MAX = 3.48952823684632;
MPRINT(EM_DIAGRAM):   MEAN = 1.93093654740314;
MPRINT(EM_DIAGRAM):   STD = 0.92788039255257;
MPRINT(EM_DIAGRAM):   SKEWNESS = -0.51439909026131;
MPRINT(EM_DIAGRAM):   KURTOSIS = -0.53708159804992;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   SOURCE = "OUTPUT";
MPRINT(EM_DIAGRAM):   NAME = "LOG_yoj";
MPRINT(EM_DIAGRAM):   NMISS = 250;
MPRINT(EM_DIAGRAM):   NLEVEL = .;
MPRINT(EM_DIAGRAM):   MIN = 0;
MPRINT(EM_DIAGRAM):   MAX = 3.73766961828336;
MPRINT(EM_DIAGRAM):   MEAN = 1.93146394382402;
MPRINT(EM_DIAGRAM):   STD = 0.92880918038735;
MPRINT(EM_DIAGRAM):   SKEWNESS = -0.5092734176377;
MPRINT(EM_DIAGRAM):   KURTOSIS = -0.53331205794762;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
96664      data WORK.TRANSFOR_03AGRT5_STATISTIC;
MPRINT(EM_DIAGRAM):    data WORK.TRANSFOR_03AGRT5_STATISTIC;
96665      set WORK.Trans_TEMP;
MPRINT(EM_DIAGRAM):   set WORK.Trans_TEMP;
96666      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_TEMP.
NOTE: The data set WORK.TRANSFOR_03AGRT5_STATISTIC has 11 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
96667      %exploreSample(DATA=EMWS1.Repl_TRAIN, OUTPUT=EMWS1.Trans_SAMPLE_DATA,
96667    ! METADATA=EMWS1.Repl_CMeta_TRAIN, VARS=, METHOD=FIRSTN, SIZE=DEFAULT, ALPHA=0.01,
96667    ! PVALUE=0.01, SEED=12345);
MPRINT(EM_DIAGRAM):
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
96668     +/*------------------------------------------------------------------
96669     +  MACRO EXPLOREOBS
96670     +
96671     +  SUPPORT:  SASDHD - David Duling
96672     +  PRODUCT:  Enterprise Miner
96673     +
96674     +  DESCRIPTION:
96675     +  Generates maximum and default numbers of observations to
96676     +  download for visualization depending on the record length.
96677     +
96678     +  Values were determined by trial and error using typical
96679     +  Windows workstation configurations.
96680     +
96681     +  Discrete sets of values are returned so that user experience
96682     +  will be consitent with similar sized data sets.
96683     +
96684     +  These macro variables are set:
96685     +  _exploreobs_max -- maximum number of obs downloadable
96686     +  _exploreobs_def -- default number of obs to be downloaded
96687     +  _exploreobs_recl - record length.  Might be useful for reporting.
96688     +
96689     +  Use the _exploreobs_max to set limit the GUI selection of
96690     +  observations for downloading.  The GUI selection for obs
96691     +  could be reduced to "Default" and "Max".
96692     +
96693     +  Parameters
96694     +  data=   libname.memname of input data
96695     +  vars=   subset list of variables.
96696     +          downloading 1 out of 500 really does work like downloading
96697     +          1 out of 1 vars.  Users may select a subset of vars for
96698     +                   visualizations.  Pass in the list as space delimited
96699     +          var names.  If vars is not specified, the record length
96700     +          of the entire data will be used.
96701     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
96702     +
96703     +  Control
96704     +  Users may control the values by entering these macro variables.
96705     +            EM_EXPLOREOBS_MAX
96706     +            EM_EXPLOREOBS_DEFAULT
96707     +  These values override the computed values.
96708     +
96709     +  Debugging
96710     +  %let _exploreobs_debug=1 ;
96711     +--------------------------------------------------------------------
96712     +  HISTORY: 20APR2004. sasdhd. pushed.
96713     +           18DEC2004. sasdhd. S0280556.
96714     +           07SEP2007. sasdhd. HK1009586
96715     +--------------------------------------------------------------------*/
96716     +
96717     +%macro exploreobs(data=,vars=, nbytes=) ;
96718     +
96719     +   /*--- variable definitions ---*/
96720     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
96721     +   %local xobs xvars xlen vlen xi vname vlist ;
96722     +   %local _exp_source _exp_notes ;
96723     +
96724     +   /*--- USER definitions ---*/
96725     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
96726     +
96727     +   /*--- variable intializations ---*/
96728     +   %let _exploreobs_max=0 ;
96729     +   %let _exploreobs_def=0 ;
96730     +   %let _exploreobs_recl=0 ;
96731     +   %let xvars= 0 ;
96732     +   %let xlen = 0 ;
96733     +   %let xobs = 0 ;
96734     +
96735     +   /*--- data error checks ---*/
96736     +   %if "&data" eq "" %then %do ;
96737     +            %put NOTE: DATA is not specified. ;
96738     +            %goto term ;
96739     +      %end ;
96740     +
96741     +   %let dsid=%sysfunc(open(&data)) ;
96742     +   %if not &dsid %then %do ;
96743     +            %put NOTE: DATA &data is not available. ;
96744     +            %goto term ;
96745     +      %end ;
96746     +
96747     +   /*--- if a vars list exists generate a subset ---*/
96748     +   %if &vars ne %then %do ;
96749     +         %let dsid=%sysfunc(close(&dsid)) ;
96750     +         %if &_exploreobs_debug ne 1 %then %do ;
96751     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
96752     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
96753     +                  options nosource nonotes ;
96754     +         %end ;
96755     +         data _exploreobs_temp_data ;
96756     +         set &data(obs=0) ;
96757     +          keep &vars ;
96758     +         run;
96759     +         %if &_exploreobs_debug ne 1 %then %do ;
96760     +                  options &_exp_source &_exp_notes ;
96761     +         %end ;
96762     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
96763     +         %if &dsid eq 0 %then %do ;
96764     +                  %put NOTE: Sample is not available.;
96765     +                  %goto term ;
96766     +            %end ;
96767     +      %end ;
96768     +
96769     +   /*--- get var attributes ---*/
96770     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
96771     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
96772     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
96773     +   %let dsid= %sysfunc(close(&dsid)) ;
96774     +
96775     +   /*--- set default and max obs ---*/
96776     +   %let _exploreobs_recl=%eval(&xlen) ;
96777     +   %if &_exploreobs_recl eq 0 %then %do ;
96778     +             %let _exploreobs_max= 0 ;
96779     +             %let _exploreobs_def= 0 ;
96780     +             %goto term ;
96781     +
96782     +   %end ;
96783     +   %else
96784     +   %if &_exploreobs_recl le 32 %then %do ;
96785     +             %let _exploreobs_max=100000 ;
96786     +             %let _exploreobs_def= 10000 ;
96787     +   %end ;
96788     +   %else
96789     +   %if &_exploreobs_recl le 128 %then %do ;
96790     +             %let _exploreobs_max=60000 ;
96791     +             %let _exploreobs_def= 6000 ;
96792     +   %end ;
96793     +   %else
96794     +   %if &_exploreobs_recl lt 1000 %then %do ;
96795     +             %let _exploreobs_max=20000 ;
96796     +             %let _exploreobs_def= 2000 ;
96797     +   %end ;
96798     +   %else
96799     +   %if &_exploreobs_recl lt 5000 %then %do ;
96800     +             %let _exploreobs_max= 10000 ;
96801     +             %let _exploreobs_def=  1000 ;
96802     +   %end ;
96803     +   %else
96804     +   %if &_exploreobs_recl lt 20000 %then %do ;
96805     +             %let _exploreobs_max= 5000 ;
96806     +             %let _exploreobs_def=  500 ;
96807     +   %end ;
96808     +   %else %do ;
96809     +             %let _exploreobs_max= 1000 ;
96810     +             %let _exploreobs_def=  200 ;
96811     +   %end ;
96812     +
96813     +   /*--- Users options ---*/
96814     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
96815     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
96816     +   %end;
96817     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
96818     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
96819     +   %end;
96820     +
96821     +    /*--- S0868273 ---*/
96822     +    %if "&NBYTES" ne "" %then %do;
96823     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
96824     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
96825     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows ,
96825    !+&EM_EXPLOREOBS_MAX));
96826     +       %end;
96827     +
96828     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
96829     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
96830     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows ,
96830    !+&EM_EXPLOREOBS_DEFAULT));
96831     +          %if ^&_exploreobs_def %then
96832     +              %let _exploreobs_def = 1;
96833     +
96834     +       %end;
96835     +    %end;
96836     +
96837     +   /*--- Terminate ---*/
96838     +   %term:
96839     +
96840     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl :
96840    !+max=&_exploreobs_max : def= &_exploreobs_def ;
96841     +%mend ;
96842     +
96843     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
NOTE: EXPLOREOBS EMWS1.Repl_TRAIN : vars= 24 : recl= 189 : max=20000 : def= 2000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.Trans_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.Repl_TRAIN(obs= 2000 );
MPRINT(EXPLORESAMPLE):   run;
 
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2000 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: The data set EMWS1.TRANS_SAMPLE_DATA has 2000 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
96844      proc print data = EMWS1.Trans_RESULT(obs=500) noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Trans_RESULT(obs=500) noobs label;
96845      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_computedtransformations_title, NOQUOTE))"
96845    ! ;
MPRINT(EM_DIAGRAM):   title9 "Computed Transformations";
96846      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var INPUTNAME ROLE INPUTLEVEL NAME LEVEL FORMULA;
MPRINT(EM_DIAGRAM):   run;
96847      var INPUTNAME ROLE INPUTLEVEL NAME LEVEL FORMULA;
96848      run;
 
NOTE: There were 11 observations read from the data set EMWS1.TRANS_RESULT.
NOTE: The PROCEDURE PRINT printed page 48.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
96849      title9;
MPRINT(EM_DIAGRAM):   title9;
96850      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:10:30" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 05, 2015
Time:                14:10:30
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O12TO88K
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMSCORE.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O12TO88K new;
MPRINT(EM_DIAGRAM):   run;
96952      proc sort data=EMWS1.Trans_RESULT out=WORK.TransRESULT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Trans_RESULT out=WORK.TransRESULT NOTHREADS;
96953      by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
96954      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.TRANS_RESULT.
NOTE: The data set WORK.TRANSRESULT has 11 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
96955      proc sort data=EMWS1.Trans_VariableSet(KEEP= NAME FAMILY REPORT
96955    ! rename=(NAME=INPUTNAME)) out=WORK.TransVARSET NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_VariableSet(KEEP= NAME FAMILY REPORT
rename=(NAME=INPUTNAME)) out=WORK.TransVARSET NOTHREADS;
96956      by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
96957      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TRANS_VARIABLESET.
NOTE: The data set WORK.TRANSVARSET has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
96958      data WORK.TransRESULT;
MPRINT(EM_DIAGRAM):   data WORK.TransRESULT;
96959      merge WORK.TransRESULT WORK.TransVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.TransRESULT WORK.TransVARSET;
96960      by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
96961      if NAME ne '' then output;
MPRINT(EM_DIAGRAM):   if NAME ne '' then output;
96962      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable INPUTNAME by input data sets.
         This might cause unexpected results.
NOTE: There were 11 observations read from the data set WORK.TRANSRESULT.
NOTE: There were 23 observations read from the data set WORK.TRANSVARSET.
NOTE: The data set WORK.TRANSRESULT has 11 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
96963      filename _code
96963    ! "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\TRA
96963    ! INDELTACODE.sas";
MPRINT(EM_DIAGRAM):   filename _code
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\TRAINDELTACODE
.sas";
96964      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
96965      set WORK.TransRESULT;
MPRINT(EM_DIAGRAM):   set WORK.TransRESULT;
96966      length String $200;
MPRINT(EM_DIAGRAM):   length String $200;
96967      file _code;
MPRINT(EM_DIAGRAM):   file _code;
96968      String = 'if NAME="'!!strip(name)!!'" then do;';
MPRINT(EM_DIAGRAM):   String = 'if NAME="'!!strip(name)!!'" then do;';
96969      put / String;
MPRINT(EM_DIAGRAM):   put / String;
96970      if family ne '' then do;
MPRINT(EM_DIAGRAM):   if family ne '' then do;
96971      String = '   FAMILY ="'!!strip(family)!!'";';
MPRINT(EM_DIAGRAM):   String = '   FAMILY ="'!!strip(family)!!'";';
96972      put String;
MPRINT(EM_DIAGRAM):   put String;
96973      end;
MPRINT(EM_DIAGRAM):   end;
96974      select(formula);
MPRINT(EM_DIAGRAM):   select(formula);
96975      when('Interaction') put '   FAMILY  ="INTERACTION";';
MPRINT(EM_DIAGRAM):   when('Interaction') put '   FAMILY  ="INTERACTION";';
96976      when('') put '   COMMENT = "' method 'transformation of ' INPUTVAR '";';
MPRINT(EM_DIAGRAM):   when('') put '   COMMENT = "' method 'transformation of ' INPUTVAR '";';
96977      otherwise put '   COMMENT = "' formula '";';
MPRINT(EM_DIAGRAM):   otherwise put '   COMMENT = "' formula '";';
96978      end;
MPRINT(EM_DIAGRAM):   end;
96979      String = '   ROLE ="'!!strip(role)!!'";';
MPRINT(EM_DIAGRAM):   String = '   ROLE ="'!!strip(role)!!'";';
96980      put String;
MPRINT(EM_DIAGRAM):   put String;
96981      if REPORT="" then REPORT = "N";
MPRINT(EM_DIAGRAM):   if REPORT="" then REPORT = "N";
96982      String = '   REPORT ="'!!strip(report)!!'";';
MPRINT(EM_DIAGRAM):   String = '   REPORT ="'!!strip(report)!!'";';
96983      put String;
MPRINT(EM_DIAGRAM):   put String;
96984      String = '   LEVEL  ="'!!strip(level)!!'";';
MPRINT(EM_DIAGRAM):   String = '   LEVEL  ="'!!strip(level)!!'";';
96985      put String;
MPRINT(EM_DIAGRAM):   put String;
96986      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
96987      if formula ne 'Interaction' and INPUTNAME ne '' then do;
MPRINT(EM_DIAGRAM):   if formula ne 'Interaction' and INPUTNAME ne '' then do;
96988      String = 'if NAME="'!!strip(INPUTNAME)!!'" then delete;';
MPRINT(EM_DIAGRAM):   String = 'if NAME="'!!strip(INPUTNAME)!!'" then delete;';
96989      put String;
MPRINT(EM_DIAGRAM):   put String;
96990      end;
MPRINT(EM_DIAGRAM):   end;
96991      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable method is uninitialized.
NOTE: Variable INPUTVAR is uninitialized.
NOTE: The file _CODE is:
 
      Filename=C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\
      TRAINDELTACODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=05Nov2015:14:10:30,
      Create Time=05Nov2015:05:45:02
 
NOTE: 88 records were written to the file _CODE.
      The minimum record length was 0.
      The maximum record length was 38.
NOTE: There were 11 observations read from the data set WORK.TRANSRESULT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
96992      filename _code;
MPRINT(EM_DIAGRAM):   filename _code;
NOTE: Fileref _CODE has been deassigned.
96993      filename emflow
96993    ! "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMF
96993    ! LOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMFLOWSCORE.sa
s";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96994      *------------------------------------------------------------*;
96995      * Trans: Scoring DATA data;
96996      *------------------------------------------------------------*;
96997      data EMWS1.Trans_TRAIN
96998      / view=EMWS1.Trans_TRAIN
96999      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Trans_TRAIN / view=EMWS1.Trans_TRAIN ;
97000      set EMWS1.Repl_TRAIN
97001      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_TRAIN ;
97002      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMFLOWSCO
      RE.sas.
97003     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97004     +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
97005     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97006     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97007     +* TRANSFORM: REP_clage , log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clage , log(REP_clage + 1);
97008     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97009     +label LOG_REP_clage = 'Transformed: Replacement: Age of oldest trade line in months'
97009    !+;
MPRINT(EM_DIAGRAM):   label LOG_REP_clage = 'Transformed: Replacement: Age of oldest trade
line in months';
97010     +if REP_clage eq . then LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   if REP_clage eq . then LOG_REP_clage = .;
97011     +else do;
MPRINT(EM_DIAGRAM):   else do;
97012     +if REP_clage + 1 > 0 then LOG_REP_clage = log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   if REP_clage + 1 > 0 then LOG_REP_clage = log(REP_clage + 1);
97013     +else LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_clage = .;
97014     +end;
MPRINT(EM_DIAGRAM):   end;
97015     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97016     +* TRANSFORM: REP_clno , log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clno , log(REP_clno + 1);
97017     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97018     +label LOG_REP_clno = 'Transformed: Replacement: Number of trade (credit) lines';
MPRINT(EM_DIAGRAM):   label LOG_REP_clno = 'Transformed: Replacement: Number of trade (credit)
lines';
97019     +if REP_clno eq . then LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   if REP_clno eq . then LOG_REP_clno = .;
97020     +else do;
MPRINT(EM_DIAGRAM):   else do;
97021     +if REP_clno + 1 > 0 then LOG_REP_clno = log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   if REP_clno + 1 > 0 then LOG_REP_clno = log(REP_clno + 1);
97022     +else LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_clno = .;
97023     +end;
MPRINT(EM_DIAGRAM):   end;
97024     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97025     +* TRANSFORM: REP_debtinc , log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_debtinc , log(REP_debtinc + 1);
97026     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97027     +label LOG_REP_debtinc = 'Transformed: Replacement: Debt to income ratio';
MPRINT(EM_DIAGRAM):   label LOG_REP_debtinc = 'Transformed: Replacement: Debt to income ratio';
97028     +if REP_debtinc eq . then LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   if REP_debtinc eq . then LOG_REP_debtinc = .;
97029     +else do;
MPRINT(EM_DIAGRAM):   else do;
97030     +if REP_debtinc + 1 > 0 then LOG_REP_debtinc = log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   if REP_debtinc + 1 > 0 then LOG_REP_debtinc = log(REP_debtinc + 1);
97031     +else LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_debtinc = .;
97032     +end;
MPRINT(EM_DIAGRAM):   end;
97033     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97034     +* TRANSFORM: REP_delinq , log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_delinq , log(REP_delinq + 1);
97035     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97036     +label LOG_REP_delinq = 'Transformed: Replacement: Number of delinquent trade lines';
MPRINT(EM_DIAGRAM):   label LOG_REP_delinq = 'Transformed: Replacement: Number of delinquent
trade lines';
97037     +if REP_delinq eq . then LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   if REP_delinq eq . then LOG_REP_delinq = .;
97038     +else do;
MPRINT(EM_DIAGRAM):   else do;
97039     +if REP_delinq + 1 > 0 then LOG_REP_delinq = log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   if REP_delinq + 1 > 0 then LOG_REP_delinq = log(REP_delinq + 1);
97040     +else LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_delinq = .;
97041     +end;
MPRINT(EM_DIAGRAM):   end;
97042     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97043     +* TRANSFORM: REP_derog , log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_derog , log(REP_derog + 1);
97044     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97045     +label LOG_REP_derog = 'Transformed: Replacement: Number of major derogatory reports'
97045    !+;
MPRINT(EM_DIAGRAM):   label LOG_REP_derog = 'Transformed: Replacement: Number of major
derogatory reports';
97046     +if REP_derog eq . then LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   if REP_derog eq . then LOG_REP_derog = .;
97047     +else do;
MPRINT(EM_DIAGRAM):   else do;
97048     +if REP_derog + 1 > 0 then LOG_REP_derog = log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   if REP_derog + 1 > 0 then LOG_REP_derog = log(REP_derog + 1);
97049     +else LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_derog = .;
97050     +end;
MPRINT(EM_DIAGRAM):   end;
97051     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97052     +* TRANSFORM: REP_loan , log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_loan , log(REP_loan + 1);
97053     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97054     +label LOG_REP_loan = 'Transformed: Replacement: Amount of current loan request';
MPRINT(EM_DIAGRAM):   label LOG_REP_loan = 'Transformed: Replacement: Amount of current loan
request';
97055     +if REP_loan eq . then LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   if REP_loan eq . then LOG_REP_loan = .;
97056     +else do;
MPRINT(EM_DIAGRAM):   else do;
97057     +if REP_loan + 1 > 0 then LOG_REP_loan = log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   if REP_loan + 1 > 0 then LOG_REP_loan = log(REP_loan + 1);
97058     +else LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_loan = .;
97059     +end;
MPRINT(EM_DIAGRAM):   end;
97060     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97061     +* TRANSFORM: REP_mortdue , log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_mortdue , log(REP_mortdue + 1);
97062     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97063     +label LOG_REP_mortdue = 'Transformed: Replacement: Amount due on existing mortgage';
MPRINT(EM_DIAGRAM):   label LOG_REP_mortdue = 'Transformed: Replacement: Amount due on
existing mortgage';
97064     +if REP_mortdue eq . then LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   if REP_mortdue eq . then LOG_REP_mortdue = .;
97065     +else do;
MPRINT(EM_DIAGRAM):   else do;
97066     +if REP_mortdue + 1 > 0 then LOG_REP_mortdue = log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   if REP_mortdue + 1 > 0 then LOG_REP_mortdue = log(REP_mortdue + 1);
97067     +else LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_mortdue = .;
97068     +end;
MPRINT(EM_DIAGRAM):   end;
97069     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97070     +* TRANSFORM: REP_ninq , log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_ninq , log(REP_ninq + 1);
97071     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97072     +label LOG_REP_ninq = 'Transformed: Replacement: Number of recent credit inquiries';
MPRINT(EM_DIAGRAM):   label LOG_REP_ninq = 'Transformed: Replacement: Number of recent credit
inquiries';
97073     +if REP_ninq eq . then LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   if REP_ninq eq . then LOG_REP_ninq = .;
97074     +else do;
MPRINT(EM_DIAGRAM):   else do;
97075     +if REP_ninq + 1 > 0 then LOG_REP_ninq = log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   if REP_ninq + 1 > 0 then LOG_REP_ninq = log(REP_ninq + 1);
97076     +else LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_ninq = .;
97077     +end;
MPRINT(EM_DIAGRAM):   end;
97078     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97079     +* TRANSFORM: REP_value , log(REP_value + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_value , log(REP_value + 1);
97080     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97081     +label LOG_REP_value = 'Transformed: Replacement: Value of current property';
MPRINT(EM_DIAGRAM):   label LOG_REP_value = 'Transformed: Replacement: Value of current
property';
97082     +if REP_value eq . then LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   if REP_value eq . then LOG_REP_value = .;
97083     +else do;
MPRINT(EM_DIAGRAM):   else do;
97084     +if REP_value + 1 > 0 then LOG_REP_value = log(REP_value + 1);
MPRINT(EM_DIAGRAM):   if REP_value + 1 > 0 then LOG_REP_value = log(REP_value + 1);
97085     +else LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_value = .;
97086     +end;
MPRINT(EM_DIAGRAM):   end;
97087     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97088     +* TRANSFORM: REP_yoj , log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_yoj , log(REP_yoj + 1);
97089     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97090     +label LOG_REP_yoj = 'Transformed: Replacement: Years on current job';
MPRINT(EM_DIAGRAM):   label LOG_REP_yoj = 'Transformed: Replacement: Years on current job';
97091     +if REP_yoj eq . then LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   if REP_yoj eq . then LOG_REP_yoj = .;
97092     +else do;
MPRINT(EM_DIAGRAM):   else do;
97093     +if REP_yoj + 1 > 0 then LOG_REP_yoj = log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   if REP_yoj + 1 > 0 then LOG_REP_yoj = log(REP_yoj + 1);
97094     +else LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_yoj = .;
97095     +end;
MPRINT(EM_DIAGRAM):   end;
97096     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97097     +* TRANSFORM: yoj , log(yoj + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: yoj , log(yoj + 1);
97098     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97099     +label LOG_yoj = 'Transformed: Years on current job';
MPRINT(EM_DIAGRAM):   label LOG_yoj = 'Transformed: Years on current job';
97100     +if yoj eq . then LOG_yoj = .;
MPRINT(EM_DIAGRAM):   if yoj eq . then LOG_yoj = .;
97101     +else do;
MPRINT(EM_DIAGRAM):   else do;
97102     +if yoj + 1 > 0 then LOG_yoj = log(yoj + 1);
MPRINT(EM_DIAGRAM):   if yoj + 1 > 0 then LOG_yoj = log(yoj + 1);
97103     +else LOG_yoj = .;
MPRINT(EM_DIAGRAM):   else LOG_yoj = .;
97104     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
97105      run;
 
NOTE: DATA STEP view saved on file EMWS1.TRANS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
97106      quit;
97107      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
97108      filename emflow
97108    ! "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMF
97108    ! LOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMFLOWSCORE.sa
s";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97109      *------------------------------------------------------------*;
97110      * Trans: Scoring VALIDATE data;
97111      *------------------------------------------------------------*;
97112      data EMWS1.Trans_VALIDATE
97113      / view=EMWS1.Trans_VALIDATE
97114      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Trans_VALIDATE / view=EMWS1.Trans_VALIDATE ;
97115      set EMWS1.Repl_VALIDATE
97116      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Repl_VALIDATE ;
97117      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMFLOWSCO
      RE.sas.
97118     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97119     +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
97120     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97121     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97122     +* TRANSFORM: REP_clage , log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clage , log(REP_clage + 1);
97123     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97124     +label LOG_REP_clage = 'Transformed: Replacement: Age of oldest trade line in months'
97124    !+;
MPRINT(EM_DIAGRAM):   label LOG_REP_clage = 'Transformed: Replacement: Age of oldest trade
line in months';
97125     +if REP_clage eq . then LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   if REP_clage eq . then LOG_REP_clage = .;
97126     +else do;
MPRINT(EM_DIAGRAM):   else do;
97127     +if REP_clage + 1 > 0 then LOG_REP_clage = log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   if REP_clage + 1 > 0 then LOG_REP_clage = log(REP_clage + 1);
97128     +else LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_clage = .;
97129     +end;
MPRINT(EM_DIAGRAM):   end;
97130     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97131     +* TRANSFORM: REP_clno , log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clno , log(REP_clno + 1);
97132     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97133     +label LOG_REP_clno = 'Transformed: Replacement: Number of trade (credit) lines';
MPRINT(EM_DIAGRAM):   label LOG_REP_clno = 'Transformed: Replacement: Number of trade (credit)
lines';
97134     +if REP_clno eq . then LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   if REP_clno eq . then LOG_REP_clno = .;
97135     +else do;
MPRINT(EM_DIAGRAM):   else do;
97136     +if REP_clno + 1 > 0 then LOG_REP_clno = log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   if REP_clno + 1 > 0 then LOG_REP_clno = log(REP_clno + 1);
97137     +else LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_clno = .;
97138     +end;
MPRINT(EM_DIAGRAM):   end;
97139     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97140     +* TRANSFORM: REP_debtinc , log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_debtinc , log(REP_debtinc + 1);
97141     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97142     +label LOG_REP_debtinc = 'Transformed: Replacement: Debt to income ratio';
MPRINT(EM_DIAGRAM):   label LOG_REP_debtinc = 'Transformed: Replacement: Debt to income ratio';
97143     +if REP_debtinc eq . then LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   if REP_debtinc eq . then LOG_REP_debtinc = .;
97144     +else do;
MPRINT(EM_DIAGRAM):   else do;
97145     +if REP_debtinc + 1 > 0 then LOG_REP_debtinc = log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   if REP_debtinc + 1 > 0 then LOG_REP_debtinc = log(REP_debtinc + 1);
97146     +else LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_debtinc = .;
97147     +end;
MPRINT(EM_DIAGRAM):   end;
97148     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97149     +* TRANSFORM: REP_delinq , log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_delinq , log(REP_delinq + 1);
97150     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97151     +label LOG_REP_delinq = 'Transformed: Replacement: Number of delinquent trade lines';
MPRINT(EM_DIAGRAM):   label LOG_REP_delinq = 'Transformed: Replacement: Number of delinquent
trade lines';
97152     +if REP_delinq eq . then LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   if REP_delinq eq . then LOG_REP_delinq = .;
97153     +else do;
MPRINT(EM_DIAGRAM):   else do;
97154     +if REP_delinq + 1 > 0 then LOG_REP_delinq = log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   if REP_delinq + 1 > 0 then LOG_REP_delinq = log(REP_delinq + 1);
97155     +else LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_delinq = .;
97156     +end;
MPRINT(EM_DIAGRAM):   end;
97157     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97158     +* TRANSFORM: REP_derog , log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_derog , log(REP_derog + 1);
97159     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97160     +label LOG_REP_derog = 'Transformed: Replacement: Number of major derogatory reports'
97160    !+;
MPRINT(EM_DIAGRAM):   label LOG_REP_derog = 'Transformed: Replacement: Number of major
derogatory reports';
97161     +if REP_derog eq . then LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   if REP_derog eq . then LOG_REP_derog = .;
97162     +else do;
MPRINT(EM_DIAGRAM):   else do;
97163     +if REP_derog + 1 > 0 then LOG_REP_derog = log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   if REP_derog + 1 > 0 then LOG_REP_derog = log(REP_derog + 1);
97164     +else LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_derog = .;
97165     +end;
MPRINT(EM_DIAGRAM):   end;
97166     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97167     +* TRANSFORM: REP_loan , log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_loan , log(REP_loan + 1);
97168     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97169     +label LOG_REP_loan = 'Transformed: Replacement: Amount of current loan request';
MPRINT(EM_DIAGRAM):   label LOG_REP_loan = 'Transformed: Replacement: Amount of current loan
request';
97170     +if REP_loan eq . then LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   if REP_loan eq . then LOG_REP_loan = .;
97171     +else do;
MPRINT(EM_DIAGRAM):   else do;
97172     +if REP_loan + 1 > 0 then LOG_REP_loan = log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   if REP_loan + 1 > 0 then LOG_REP_loan = log(REP_loan + 1);
97173     +else LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_loan = .;
97174     +end;
MPRINT(EM_DIAGRAM):   end;
97175     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97176     +* TRANSFORM: REP_mortdue , log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_mortdue , log(REP_mortdue + 1);
97177     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97178     +label LOG_REP_mortdue = 'Transformed: Replacement: Amount due on existing mortgage';
MPRINT(EM_DIAGRAM):   label LOG_REP_mortdue = 'Transformed: Replacement: Amount due on
existing mortgage';
97179     +if REP_mortdue eq . then LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   if REP_mortdue eq . then LOG_REP_mortdue = .;
97180     +else do;
MPRINT(EM_DIAGRAM):   else do;
97181     +if REP_mortdue + 1 > 0 then LOG_REP_mortdue = log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   if REP_mortdue + 1 > 0 then LOG_REP_mortdue = log(REP_mortdue + 1);
97182     +else LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_mortdue = .;
97183     +end;
MPRINT(EM_DIAGRAM):   end;
97184     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97185     +* TRANSFORM: REP_ninq , log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_ninq , log(REP_ninq + 1);
97186     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97187     +label LOG_REP_ninq = 'Transformed: Replacement: Number of recent credit inquiries';
MPRINT(EM_DIAGRAM):   label LOG_REP_ninq = 'Transformed: Replacement: Number of recent credit
inquiries';
97188     +if REP_ninq eq . then LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   if REP_ninq eq . then LOG_REP_ninq = .;
97189     +else do;
MPRINT(EM_DIAGRAM):   else do;
97190     +if REP_ninq + 1 > 0 then LOG_REP_ninq = log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   if REP_ninq + 1 > 0 then LOG_REP_ninq = log(REP_ninq + 1);
97191     +else LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_ninq = .;
97192     +end;
MPRINT(EM_DIAGRAM):   end;
97193     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97194     +* TRANSFORM: REP_value , log(REP_value + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_value , log(REP_value + 1);
97195     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97196     +label LOG_REP_value = 'Transformed: Replacement: Value of current property';
MPRINT(EM_DIAGRAM):   label LOG_REP_value = 'Transformed: Replacement: Value of current
property';
97197     +if REP_value eq . then LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   if REP_value eq . then LOG_REP_value = .;
97198     +else do;
MPRINT(EM_DIAGRAM):   else do;
97199     +if REP_value + 1 > 0 then LOG_REP_value = log(REP_value + 1);
MPRINT(EM_DIAGRAM):   if REP_value + 1 > 0 then LOG_REP_value = log(REP_value + 1);
97200     +else LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_value = .;
97201     +end;
MPRINT(EM_DIAGRAM):   end;
97202     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97203     +* TRANSFORM: REP_yoj , log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_yoj , log(REP_yoj + 1);
97204     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97205     +label LOG_REP_yoj = 'Transformed: Replacement: Years on current job';
MPRINT(EM_DIAGRAM):   label LOG_REP_yoj = 'Transformed: Replacement: Years on current job';
97206     +if REP_yoj eq . then LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   if REP_yoj eq . then LOG_REP_yoj = .;
97207     +else do;
MPRINT(EM_DIAGRAM):   else do;
97208     +if REP_yoj + 1 > 0 then LOG_REP_yoj = log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   if REP_yoj + 1 > 0 then LOG_REP_yoj = log(REP_yoj + 1);
97209     +else LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_yoj = .;
97210     +end;
MPRINT(EM_DIAGRAM):   end;
97211     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97212     +* TRANSFORM: yoj , log(yoj + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: yoj , log(yoj + 1);
97213     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97214     +label LOG_yoj = 'Transformed: Years on current job';
MPRINT(EM_DIAGRAM):   label LOG_yoj = 'Transformed: Years on current job';
97215     +if yoj eq . then LOG_yoj = .;
MPRINT(EM_DIAGRAM):   if yoj eq . then LOG_yoj = .;
97216     +else do;
MPRINT(EM_DIAGRAM):   else do;
97217     +if yoj + 1 > 0 then LOG_yoj = log(yoj + 1);
MPRINT(EM_DIAGRAM):   if yoj + 1 > 0 then LOG_yoj = log(yoj + 1);
97218     +else LOG_yoj = .;
MPRINT(EM_DIAGRAM):   else LOG_yoj = .;
97219     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
97220      run;
 
NOTE: DATA STEP view saved on file EMWS1.TRANS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
97221      quit;
97222      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
97223      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97224      * Trans: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Trans: Computing metadata for TRAIN data;
97225      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\CDELTA_TRAIN.s
as";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Trans_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Trans_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Trans_TRAIN out=WORK.M3PXKHLI noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PXKHLI;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PXKHLI(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3PXKHLI;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3PXKHLI;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3LRMS36 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3LRMS36;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LRMS36;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3MFYXLK(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LRMS36;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3LRMS36;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LRMS36;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3LRMS36;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LRMS36;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Repl_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Repl_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Trans_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Trans";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Computed Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_clage" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_clage  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_clage" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_clno" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_clno  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_clno" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_debtinc" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_debtinc  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_debtinc" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_delinq" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_delinq  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_delinq" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_derog" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_derog  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_derog" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_loan" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_loan  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_loan" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_mortdue" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_mortdue  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_mortdue" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_ninq" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_ninq  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_ninq" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_value" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_value  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_value" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_REP_yoj" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(REP_yoj  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="REP_yoj" then delete;
MPRINT(EM_DIAGRAM):   if NAME="LOG_yoj" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "log(yoj  + 1) ";
MPRINT(EM_DIAGRAM):   ROLE ="REJECTED";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="yoj" then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 05,
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:10:32" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 05, 2015
Time:                14:10:32
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1WOBPCX
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMREPORT.out"
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1WOBPCX new;
MPRINT(EM_DIAGRAM):   run;
97659      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97660      * &msgString;
MPRINT(EM_DIAGRAM):   * &msgString;
97661      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97662      filename _flowref
97662    ! "C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMF
97662    ! LOWSCORE.sas";
MPRINT(EM_DIAGRAM):   filename _flowref
"C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMFLOWSCORE.sa
s";
97663      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK.TRANS_SCOREINPUTS;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK.TRANS_SCOREINPUTS;
97664      %INCLUDE _flowref;
NOTE: %INCLUDE (level 1) file _FLOWREF is file
      C:\Users\bteric01\Documents\Tutorials_Projects\Project_3\Workspaces\EMWS1\Trans\EMFLOWSCO
      RE.sas.
97665     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97666     +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
97667     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97668     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97669     +* TRANSFORM: REP_clage , log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clage , log(REP_clage + 1);
97670     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97671     +label LOG_REP_clage = 'Transformed: Replacement: Age of oldest trade line in months'
97671    !+;
MPRINT(EM_DIAGRAM):   label LOG_REP_clage = 'Transformed: Replacement: Age of oldest trade
line in months';
97672     +if REP_clage eq . then LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   if REP_clage eq . then LOG_REP_clage = .;
97673     +else do;
MPRINT(EM_DIAGRAM):   else do;
97674     +if REP_clage + 1 > 0 then LOG_REP_clage = log(REP_clage + 1);
MPRINT(EM_DIAGRAM):   if REP_clage + 1 > 0 then LOG_REP_clage = log(REP_clage + 1);
97675     +else LOG_REP_clage = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_clage = .;
97676     +end;
MPRINT(EM_DIAGRAM):   end;
97677     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97678     +* TRANSFORM: REP_clno , log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_clno , log(REP_clno + 1);
97679     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97680     +label LOG_REP_clno = 'Transformed: Replacement: Number of trade (credit) lines';
MPRINT(EM_DIAGRAM):   label LOG_REP_clno = 'Transformed: Replacement: Number of trade (credit)
lines';
97681     +if REP_clno eq . then LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   if REP_clno eq . then LOG_REP_clno = .;
97682     +else do;
MPRINT(EM_DIAGRAM):   else do;
97683     +if REP_clno + 1 > 0 then LOG_REP_clno = log(REP_clno + 1);
MPRINT(EM_DIAGRAM):   if REP_clno + 1 > 0 then LOG_REP_clno = log(REP_clno + 1);
97684     +else LOG_REP_clno = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_clno = .;
97685     +end;
MPRINT(EM_DIAGRAM):   end;
97686     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97687     +* TRANSFORM: REP_debtinc , log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_debtinc , log(REP_debtinc + 1);
97688     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97689     +label LOG_REP_debtinc = 'Transformed: Replacement: Debt to income ratio';
MPRINT(EM_DIAGRAM):   label LOG_REP_debtinc = 'Transformed: Replacement: Debt to income ratio';
97690     +if REP_debtinc eq . then LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   if REP_debtinc eq . then LOG_REP_debtinc = .;
97691     +else do;
MPRINT(EM_DIAGRAM):   else do;
97692     +if REP_debtinc + 1 > 0 then LOG_REP_debtinc = log(REP_debtinc + 1);
MPRINT(EM_DIAGRAM):   if REP_debtinc + 1 > 0 then LOG_REP_debtinc = log(REP_debtinc + 1);
97693     +else LOG_REP_debtinc = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_debtinc = .;
97694     +end;
MPRINT(EM_DIAGRAM):   end;
97695     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97696     +* TRANSFORM: REP_delinq , log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_delinq , log(REP_delinq + 1);
97697     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97698     +label LOG_REP_delinq = 'Transformed: Replacement: Number of delinquent trade lines';
MPRINT(EM_DIAGRAM):   label LOG_REP_delinq = 'Transformed: Replacement: Number of delinquent
trade lines';
97699     +if REP_delinq eq . then LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   if REP_delinq eq . then LOG_REP_delinq = .;
97700     +else do;
MPRINT(EM_DIAGRAM):   else do;
97701     +if REP_delinq + 1 > 0 then LOG_REP_delinq = log(REP_delinq + 1);
MPRINT(EM_DIAGRAM):   if REP_delinq + 1 > 0 then LOG_REP_delinq = log(REP_delinq + 1);
97702     +else LOG_REP_delinq = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_delinq = .;
97703     +end;
MPRINT(EM_DIAGRAM):   end;
97704     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97705     +* TRANSFORM: REP_derog , log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_derog , log(REP_derog + 1);
97706     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97707     +label LOG_REP_derog = 'Transformed: Replacement: Number of major derogatory reports'
97707    !+;
MPRINT(EM_DIAGRAM):   label LOG_REP_derog = 'Transformed: Replacement: Number of major
derogatory reports';
97708     +if REP_derog eq . then LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   if REP_derog eq . then LOG_REP_derog = .;
97709     +else do;
MPRINT(EM_DIAGRAM):   else do;
97710     +if REP_derog + 1 > 0 then LOG_REP_derog = log(REP_derog + 1);
MPRINT(EM_DIAGRAM):   if REP_derog + 1 > 0 then LOG_REP_derog = log(REP_derog + 1);
97711     +else LOG_REP_derog = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_derog = .;
97712     +end;
MPRINT(EM_DIAGRAM):   end;
97713     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97714     +* TRANSFORM: REP_loan , log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_loan , log(REP_loan + 1);
97715     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97716     +label LOG_REP_loan = 'Transformed: Replacement: Amount of current loan request';
MPRINT(EM_DIAGRAM):   label LOG_REP_loan = 'Transformed: Replacement: Amount of current loan
request';
97717     +if REP_loan eq . then LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   if REP_loan eq . then LOG_REP_loan = .;
97718     +else do;
MPRINT(EM_DIAGRAM):   else do;
97719     +if REP_loan + 1 > 0 then LOG_REP_loan = log(REP_loan + 1);
MPRINT(EM_DIAGRAM):   if REP_loan + 1 > 0 then LOG_REP_loan = log(REP_loan + 1);
97720     +else LOG_REP_loan = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_loan = .;
97721     +end;
MPRINT(EM_DIAGRAM):   end;
97722     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97723     +* TRANSFORM: REP_mortdue , log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_mortdue , log(REP_mortdue + 1);
97724     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97725     +label LOG_REP_mortdue = 'Transformed: Replacement: Amount due on existing mortgage';
MPRINT(EM_DIAGRAM):   label LOG_REP_mortdue = 'Transformed: Replacement: Amount due on
existing mortgage';
97726     +if REP_mortdue eq . then LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   if REP_mortdue eq . then LOG_REP_mortdue = .;
97727     +else do;
MPRINT(EM_DIAGRAM):   else do;
97728     +if REP_mortdue + 1 > 0 then LOG_REP_mortdue = log(REP_mortdue + 1);
MPRINT(EM_DIAGRAM):   if REP_mortdue + 1 > 0 then LOG_REP_mortdue = log(REP_mortdue + 1);
97729     +else LOG_REP_mortdue = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_mortdue = .;
97730     +end;
MPRINT(EM_DIAGRAM):   end;
97731     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97732     +* TRANSFORM: REP_ninq , log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_ninq , log(REP_ninq + 1);
97733     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97734     +label LOG_REP_ninq = 'Transformed: Replacement: Number of recent credit inquiries';
MPRINT(EM_DIAGRAM):   label LOG_REP_ninq = 'Transformed: Replacement: Number of recent credit
inquiries';
97735     +if REP_ninq eq . then LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   if REP_ninq eq . then LOG_REP_ninq = .;
97736     +else do;
MPRINT(EM_DIAGRAM):   else do;
97737     +if REP_ninq + 1 > 0 then LOG_REP_ninq = log(REP_ninq + 1);
MPRINT(EM_DIAGRAM):   if REP_ninq + 1 > 0 then LOG_REP_ninq = log(REP_ninq + 1);
97738     +else LOG_REP_ninq = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_ninq = .;
97739     +end;
MPRINT(EM_DIAGRAM):   end;
97740     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97741     +* TRANSFORM: REP_value , log(REP_value + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_value , log(REP_value + 1);
97742     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97743     +label LOG_REP_value = 'Transformed: Replacement: Value of current property';
MPRINT(EM_DIAGRAM):   label LOG_REP_value = 'Transformed: Replacement: Value of current
property';
97744     +if REP_value eq . then LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   if REP_value eq . then LOG_REP_value = .;
97745     +else do;
MPRINT(EM_DIAGRAM):   else do;
97746     +if REP_value + 1 > 0 then LOG_REP_value = log(REP_value + 1);
MPRINT(EM_DIAGRAM):   if REP_value + 1 > 0 then LOG_REP_value = log(REP_value + 1);
97747     +else LOG_REP_value = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_value = .;
97748     +end;
MPRINT(EM_DIAGRAM):   end;
97749     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97750     +* TRANSFORM: REP_yoj , log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: REP_yoj , log(REP_yoj + 1);
97751     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97752     +label LOG_REP_yoj = 'Transformed: Replacement: Years on current job';
MPRINT(EM_DIAGRAM):   label LOG_REP_yoj = 'Transformed: Replacement: Years on current job';
97753     +if REP_yoj eq . then LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   if REP_yoj eq . then LOG_REP_yoj = .;
97754     +else do;
MPRINT(EM_DIAGRAM):   else do;
97755     +if REP_yoj + 1 > 0 then LOG_REP_yoj = log(REP_yoj + 1);
MPRINT(EM_DIAGRAM):   if REP_yoj + 1 > 0 then LOG_REP_yoj = log(REP_yoj + 1);
97756     +else LOG_REP_yoj = .;
MPRINT(EM_DIAGRAM):   else LOG_REP_yoj = .;
97757     +end;
MPRINT(EM_DIAGRAM):   end;
97758     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97759     +* TRANSFORM: yoj , log(yoj + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: yoj , log(yoj + 1);
97760     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97761     +label LOG_yoj = 'Transformed: Years on current job';
MPRINT(EM_DIAGRAM):   label LOG_yoj = 'Transformed: Years on current job';
97762     +if yoj eq . then LOG_yoj = .;
MPRINT(EM_DIAGRAM):   if yoj eq . then LOG_yoj = .;
97763     +else do;
MPRINT(EM_DIAGRAM):   else do;
97764     +if yoj + 1 > 0 then LOG_yoj = log(yoj + 1);
MPRINT(EM_DIAGRAM):   if yoj + 1 > 0 then LOG_yoj = log(yoj + 1);
97765     +else LOG_yoj = .;
MPRINT(EM_DIAGRAM):   else LOG_yoj = .;
97766     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
97767      run;
 
NOTE: Dependency structure written to data set WORK.TRANS_SCOREINPUTS.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           1.45 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
97768      quit;
97769      data WORK.TRANS_SCOREINPUTS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_SCOREINPUTS;
97770      set WORK.TRANS_SCOREINPUTS(keep=RHS rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   set WORK.TRANS_SCOREINPUTS(keep=RHS rename=(RHS=NAME));
97771      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
97772      UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
97773      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: The data set WORK.TRANS_SCOREINPUTS has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97774      proc sort data=WORK.TRANS_SCOREINPUTS NODUPKEY;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_SCOREINPUTS NODUPKEY;
97775      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
97776      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TRANS_SCOREINPUTS has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97777      filename _flowref;
MPRINT(EM_DIAGRAM):   filename _flowref;
NOTE: Fileref _FLOWREF has been deassigned.
97778      %let SYSCC = 0;
97779      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97780      * transformcombinevariables;
MPRINT(EM_DIAGRAM):   * transformcombinevariables;
97781      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97782      data WORK.TRANS_OUTPUTVARS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_OUTPUTVARS;
97783      length Uname inputName $32 inputLevel $10 inputType $1 _MetaFlag 8;
MPRINT(EM_DIAGRAM):   length Uname inputName $32 inputLevel $10 inputType $1 _MetaFlag 8;
97784      set
97785      EMWS1.Trans_RESULT
97786      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_RESULT ;
97787      _MetaFlag=0;
MPRINT(EM_DIAGRAM):   _MetaFlag=0;
97788      uname = upcase(name);
MPRINT(EM_DIAGRAM):   uname = upcase(name);
97789      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.TRANS_RESULT.
NOTE: The data set WORK.TRANS_OUTPUTVARS has 11 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97790      data _temp;
MPRINT(EM_DIAGRAM):    data _temp;
97791      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
97792      set EMWS1.Trans_CMeta_TRAIN(keep=NAME LEVEL ROLE TYPE CREATOR LABEL);
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_CMeta_TRAIN(keep=NAME LEVEL ROLE TYPE CREATOR LABEL);
97793      UNAME = upcase(name);
MPRINT(EM_DIAGRAM):   UNAME = upcase(name);
97794      where upcase(CREATOR) = upcase("Trans");
MPRINT(EM_DIAGRAM):   where upcase(CREATOR) = upcase("Trans");
97795      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
      WHERE UPCASE(CREATOR)='TRANS';
NOTE: The data set WORK._TEMP has 11 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97796      proc sort data=_temp(drop=CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=_temp(drop=CREATOR);
97797      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
97798      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 11 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97799      proc sort data=WORK.TRANS_OUTPUTVARS;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.TRANS_OUTPUTVARS;
97800      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
97801      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: The data set WORK.TRANS_OUTPUTVARS has 11 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97802      data WORK.TRANS_OUTPUTVARS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_OUTPUTVARS;
97803      merge WORK.TRANS_OUTPUTVARS _temp;
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_OUTPUTVARS _temp;
97804      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
97805      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_OUTPUTVARS has 11 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97806      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97807      * Trans: Get Metadata for the Score Inputs Variables;
MPRINT(EM_DIAGRAM):   * Trans: Get Metadata for the Score Inputs Variables;
97808      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97809      data _temp;
MPRINT(EM_DIAGRAM):   data _temp;
97810      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
97811      set EMWS1.Trans_VariableSet(keep=NAME LEVEL TYPE LABEL);
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_VariableSet(keep=NAME LEVEL TYPE LABEL);
97812      UNAME = upcase(name);
MPRINT(EM_DIAGRAM):   UNAME = upcase(name);
97813      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.TRANS_VARIABLESET.
NOTE: The data set WORK._TEMP has 23 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97814      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
97815      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
97816      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 23 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97817      data WORK.TRANS_SCOREINPUTS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_SCOREINPUTS;
97818      merge WORK.TRANS_SCOREINPUTS(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_SCOREINPUTS(in=_a) _temp(in=_b);
97819      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
97820      if _a and _b then output;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
97821      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: There were 23 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_SCOREINPUTS has 11 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97822      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97823      * Trans: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Trans: Computing Summary Statistics;
97824      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97825      proc dmdb data=EMWS1.Trans_TRAIN classout=WORK.TRANS_CLASSSTATS
97825    ! varout=WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   proc dmdb data=EMWS1.Trans_TRAIN classout=WORK.TRANS_CLASSSTATS
varout=WORK.TRANS_VARSTATS;
97826      ;
MPRINT(EM_DIAGRAM):   ;
97827      var
97828      REP_clage
97829      REP_clno
97830      REP_debtinc
97831      REP_delinq
97832      REP_derog
97833      REP_loan
97834      REP_mortdue
97835      REP_ninq
97836      REP_value
97837      REP_yoj
97838      yoj
97839      LOG_REP_clage
97840      LOG_REP_clno
97841      LOG_REP_debtinc
97842      LOG_REP_delinq
97843      LOG_REP_derog
97844      LOG_REP_loan
97845      LOG_REP_mortdue
97846      LOG_REP_ninq
97847      LOG_REP_value
97848      LOG_REP_yoj
97849      LOG_yoj
97850      ;
MPRINT(EM_DIAGRAM):   var REP_clage REP_clno REP_debtinc REP_delinq REP_derog REP_loan
REP_mortdue REP_ninq REP_value REP_yoj yoj LOG_REP_clage LOG_REP_clno LOG_REP_debtinc
LOG_REP_delinq LOG_REP_derog LOG_REP_loan LOG_REP_mortdue LOG_REP_ninq LOG_REP_value
LOG_REP_yoj LOG_yoj ;
97851      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK.TRANS_VARSTATS has 22 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
97852      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97853      * Trans: Combine Information and Statistics for Class Variables;
MPRINT(EM_DIAGRAM):   * Trans: Combine Information and Statistics for Class Variables;
97854      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97855      proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
97856      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97857      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: The data set WORK._TEMP has 11 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97858      proc sort data=WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_CLASSSTATS;
97859      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97860      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.TRANS_CLASSSTATS has 0 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97861      data WORK.TRANS_CLASSSTATS(keep=name nlevel nmiss);
MPRINT(EM_DIAGRAM):   data WORK.TRANS_CLASSSTATS(keep=name nlevel nmiss);
97862      retain nlevel nmiss;
MPRINT(EM_DIAGRAM):   retain nlevel nmiss;
97863      set WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   set WORK.TRANS_CLASSSTATS;
97864      by Name;
MPRINT(EM_DIAGRAM):   by Name;
97865      if first.Name then do;
MPRINT(EM_DIAGRAM):   if first.Name then do;
97866      nlevel= 0;
MPRINT(EM_DIAGRAM):   nlevel= 0;
97867      nmiss= 0;
MPRINT(EM_DIAGRAM):   nmiss= 0;
97868      end;
MPRINT(EM_DIAGRAM):   end;
97869      if (type='C' and CRAW='') or (type='N' and NRAW=.) then nmiss = FREQUENCY;
MPRINT(EM_DIAGRAM):   if (type='C' and CRAW='') or (type='N' and NRAW=.) then nmiss =
FREQUENCY;
97870      else nlevel + 1;
MPRINT(EM_DIAGRAM):   else nlevel + 1;
97871      if last.name then output;
MPRINT(EM_DIAGRAM):   if last.name then output;
97872      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: The data set WORK.TRANS_CLASSSTATS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97873      /*Merge Statistics for Class Output Vars */
97874      data WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_CLASSSTATS;
97875      length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
MPRINT(EM_DIAGRAM):   length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
97876      merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b keep=NAME InputName Formula _MetaFlag
97876    !  LEVEL TYPE LABEL);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b keep=NAME InputName
Formula _MetaFlag LEVEL TYPE LABEL);
97877      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97878      if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
97879      SOURCE='Output';
MPRINT(EM_DIAGRAM):   SOURCE='Output';
97880      if _MetaFlag = 1 then _METHOD_="Meta";
MPRINT(EM_DIAGRAM):   if _MetaFlag = 1 then _METHOD_="Meta";
97881      else if Formula eq 'Interaction' then _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else if Formula eq 'Interaction' then _METHOD_="Computed";
97882      else if inputName eq '' then _METHOD_="Formula";
MPRINT(EM_DIAGRAM):   else if inputName eq '' then _METHOD_="Formula";
97883      else _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else _METHOD_="Computed";
97884      if Formula = '' then Formula = "User Code";
MPRINT(EM_DIAGRAM):   if Formula = '' then Formula = "User Code";
97885      end;
MPRINT(EM_DIAGRAM):   end;
97886      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
97887      drop inputName LEVEL TYPE _MetaFlag;
MPRINT(EM_DIAGRAM):   drop inputName LEVEL TYPE _MetaFlag;
97888      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_CLASSSTATS has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97889      /*Merge Statistics for Class Input Vars */
97890      proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp
nodupkey;
97891      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97892      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97893      data WORK.TRANS_CLASSSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_CLASSSTATS;
97894      merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_CLASSSTATS(in=_a) _temp(in=_b);
97895      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97896      if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
97897      SOURCE='Input';
MPRINT(EM_DIAGRAM):   SOURCE='Input';
97898      _METHOD_="Original";
MPRINT(EM_DIAGRAM):   _METHOD_="Original";
97899      end;
MPRINT(EM_DIAGRAM):   end;
97900      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
97901      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_CLASSSTATS has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97902      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97903      * Trans: Combine Information and Statistics for Interval Variables;
MPRINT(EM_DIAGRAM):   * Trans: Combine Information and Statistics for Interval Variables;
97904      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97905      proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_OUTPUTVARS out=_temp;
97906      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97907      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_OUTPUTVARS.
NOTE: The data set WORK._TEMP has 11 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97908      proc sort data=WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_VARSTATS;
97909      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97910      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: The data set WORK.TRANS_VARSTATS has 22 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *Merge Statistics for Output Vars;
97911      *Merge Statistics for Output Vars;
97912      data WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_VARSTATS;
97913      length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
MPRINT(EM_DIAGRAM):   length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
97914      merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b keep=NAME Formula InputName _MetaFlag
97914    ! LEVEL TYPE LABEL);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b keep=NAME Formula InputName
_MetaFlag LEVEL TYPE LABEL);
97915      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97916      if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
97917      SOURCE='Output';
MPRINT(EM_DIAGRAM):   SOURCE='Output';
97918      if _MetaFlag = 1 then _METHOD_="Meta";
MPRINT(EM_DIAGRAM):   if _MetaFlag = 1 then _METHOD_="Meta";
97919      else if Formula eq 'Interaction' then _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else if Formula eq 'Interaction' then _METHOD_="Computed";
97920      else if inputName eq '' then _METHOD_="Formula";
MPRINT(EM_DIAGRAM):   else if inputName eq '' then _METHOD_="Formula";
97921      else _METHOD_="Computed";
MPRINT(EM_DIAGRAM):   else _METHOD_="Computed";
97922      if Formula = '' then Formula = "Mixture of variables";
MPRINT(EM_DIAGRAM):   if Formula = '' then Formula = "Mixture of variables";
97923      end;
MPRINT(EM_DIAGRAM):   end;
97924      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
97925      drop inputName LEVEL TYPE _MetaFlag;
MPRINT(EM_DIAGRAM):   drop inputName LEVEL TYPE _MetaFlag;
97926      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_VARSTATS has 22 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *Merge Statistics for Input Vars;
97927      *Merge Statistics for Input Vars;
97928      proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TRANS_SCOREINPUTS(drop=TYPE LEVEL) out=_temp
nodupkey;
97929      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97930      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set WORK.TRANS_SCOREINPUTS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97931      data WORK.TRANS_VARSTATS;
MPRINT(EM_DIAGRAM):   data WORK.TRANS_VARSTATS;
97932      merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge WORK.TRANS_VARSTATS(in=_a) _temp(in=_b);
97933      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
97934      if _a and _b then do;
MPRINT(EM_DIAGRAM):   if _a and _b then do;
97935      SOURCE='Input';
MPRINT(EM_DIAGRAM):   SOURCE='Input';
97936      _METHOD_="Original";
MPRINT(EM_DIAGRAM):   _METHOD_="Original";
97937      end;
MPRINT(EM_DIAGRAM):   end;
97938      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
97939      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK.TRANS_VARSTATS has 22 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97940      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97941      * Trans: Combine statistics for class and interval variables;
MPRINT(EM_DIAGRAM):   * Trans: Combine statistics for class and interval variables;
97942      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97943      data EMWS1.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   data EMWS1.Trans_STATISTICS;
97944      length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
MPRINT(EM_DIAGRAM):   length SOURCE $6 _METHOD_ $8 NAME $32 FORMULA $300;
97945      label SOURCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_source_vlabel,  NOQUOTE))"
97945    ! _METHOD_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_method_vlabel,  NOQUOTE))" NAME =
97945    ! "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel,  NOQUOTE))" FORMULA =
97946         "%sysfunc(sasmsg(sashelp.dmine, rpt_formula_vlabel,   NOQUOTE))" NLEVEL =
97946    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel,   NOQUOTE))" N =
97946    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nonmiss_vlabel, NOQUOTE))" NMISS =
97947         "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))" MIN =
97947    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))" MAX =
97947    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))" MEAN =
97948         "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel,    NOQUOTE))" STD =
97948    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel,     NOQUOTE))" SKEWNESS =
97948    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_skewness_vlabel, NOQUOTE))" KURTOSIS =
97949         "%sysfunc(sasmsg(sashelp.dmine, rpt_kurtosis_vlabel, NOQUOTE))" LABEL =
97949    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SOURCE = "Source" _METHOD_ = "Method" NAME = "Variable Name"
FORMULA = "Formula" NLEVEL = "Number of Levels" N = "Non Missing" NMISS = "Missing" MIN =
"Minimum" MAX = "Maximum" MEAN = "Mean" STD = "Standard Deviation" SKEWNESS = "Skewness"
KURTOSIS = "Kurtosis" LABEL = "Label";
97950      set
97951      WORK.TRANS_CLASSSTATS
97952      WORK.TRANS_VARSTATS
97953      ;
MPRINT(EM_DIAGRAM):   set WORK.TRANS_CLASSSTATS WORK.TRANS_VARSTATS ;
97954      drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
97955      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set WORK.TRANS_CLASSSTATS.
NOTE: There were 22 observations read from the data set WORK.TRANS_VARSTATS.
NOTE: The data set EMWS1.TRANS_STATISTICS has 22 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
97956      proc sort data=EMWS1.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_STATISTICS;
97957      by SOURCE _METHOD_ NAME;
MPRINT(EM_DIAGRAM):   by SOURCE _METHOD_ NAME;
97958      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.TRANS_STATISTICS.
NOTE: The data set EMWS1.TRANS_STATISTICS has 22 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97959      proc sort data = EMWS1.Trans_STATISTICS NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Trans_STATISTICS NOTHREADS;
97960      by SOURCE NAME;
MPRINT(EM_DIAGRAM):   by SOURCE NAME;
97961      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS1.TRANS_STATISTICS.
NOTE: The data set EMWS1.TRANS_STATISTICS has 22 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97962      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
97963      proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
97964      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_intervalinputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Input Interval Variables";
97965      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'INPUT' and mean ne .;
MPRINT(EM_DIAGRAM):   run;
97966      var Name NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
97967      where SOURCE eq 'INPUT' and mean ne .;
97968      run;
 
NOTE: No observations were selected from data set EMWS1.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS1.TRANS_STATISTICS.
      WHERE (SOURCE='INPUT') and (mean not = .);
NOTE: PROCEDURE PRINT used (Total process time):
The SAS System
 
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
97969      proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
97970      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_intervaloutputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Output Interval Variables";
97971      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name _METHOD_ NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'OUTPUT' and mean ne .;
MPRINT(EM_DIAGRAM):   run;
97972      var Name _METHOD_ NMISS MIN MAX MEAN STD SKEWNESS KURTOSIS;
97973      where SOURCE eq 'OUTPUT' and mean ne .;
97974      run;
 
NOTE: No observations were selected from data set EMWS1.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS1.TRANS_STATISTICS.
      WHERE (SOURCE='OUTPUT') and (mean not = .);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97975      proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
97976      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_classinputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Input Class Variables";
97977      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name NLEVEL NMISS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'INPUT' and nlevel ne .;
MPRINT(EM_DIAGRAM):   run;
97978      var Name NLEVEL NMISS;
97979      where SOURCE eq 'INPUT' and nlevel ne .;
97980      run;
 
NOTE: No observations were selected from data set EMWS1.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS1.TRANS_STATISTICS.
      WHERE (SOURCE='INPUT') and (nlevel not = .);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97981      proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS1.Trans_STATISTICS(obs=500) noobs label;
97982      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_classoutputStats_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Summary Statistics for Output Class Variables";
97983      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_maxObsPrinted_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "(maximum 500 observations printed)";
MPRINT(EM_DIAGRAM):   var Name _METHOD_ NLEVEL NMISS;
MPRINT(EM_DIAGRAM):   where SOURCE eq 'OUTPUT' and nlevel ne .;
MPRINT(EM_DIAGRAM):   run;
97984      var Name _METHOD_ NLEVEL NMISS;
97985      where SOURCE eq 'OUTPUT' and nlevel ne .;
97986      run;
 
NOTE: No observations were selected from data set EMWS1.TRANS_STATISTICS.
NOTE: There were 0 observations read from the data set EMWS1.TRANS_STATISTICS.
      WHERE (SOURCE='OUTPUT') and (nlevel not = .);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
97987      title9;
MPRINT(EM_DIAGRAM):   title9;
97988      title10;
MPRINT(EM_DIAGRAM):   title10;
97989      data EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):    data EMWS1.Trans_EMSCOREVAR;
97990      length Name $32 formula $300 file $200;
MPRINT(EM_DIAGRAM):   length Name $32 formula $300 file $200;
97991      keep NAME Formula file;
MPRINT(EM_DIAGRAM):   keep NAME Formula file;
97992      set EMWS1.Trans_STATISTICS;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_STATISTICS;
97993      where SOURCE='Output';
MPRINT(EM_DIAGRAM):   where SOURCE='Output';
97994      select( _METHOD_);
MPRINT(EM_DIAGRAM):   select( _METHOD_);
97995      when('Computed') do;
MPRINT(EM_DIAGRAM):   when('Computed') do;
97996      file="TRANSFORMCODE\"!!strip(NAME)!!'.sas';
MPRINT(EM_DIAGRAM):   file="TRANSFORMCODE\"!!strip(NAME)!!'.sas';
97997      formula = '';
MPRINT(EM_DIAGRAM):   formula = '';
97998      end;
MPRINT(EM_DIAGRAM):   end;
97999      when('Formula') do;
MPRINT(EM_DIAGRAM):   when('Formula') do;
98000      if Formula eq 'Mixture of variables' then do;
MPRINT(EM_DIAGRAM):   if Formula eq 'Mixture of variables' then do;
98001      file= "EDITORCODE.sas";
MPRINT(EM_DIAGRAM):   file= "EDITORCODE.sas";
98002      formula = '';
MPRINT(EM_DIAGRAM):   formula = '';
98003      end;
MPRINT(EM_DIAGRAM):   end;
98004      if Formula = 'User Code' then do;
MPRINT(EM_DIAGRAM):   if Formula = 'User Code' then do;
98005      file= "EDITORCODE.sas";
MPRINT(EM_DIAGRAM):   file= "EDITORCODE.sas";
98006      formula = '';
MPRINT(EM_DIAGRAM):   formula = '';
98007      end;
MPRINT(EM_DIAGRAM):   end;
98008      end;
MPRINT(EM_DIAGRAM):   end;
98009      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
98010      end;
MPRINT(EM_DIAGRAM):   end;
98011      output;
MPRINT(EM_DIAGRAM):   output;
98012      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.TRANS_STATISTICS.
      WHERE SOURCE='Output';
NOTE: The data set EMWS1.TRANS_EMSCOREVAR has 11 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
